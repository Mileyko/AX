Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: DBT

; Microsoft Dynamics Table : TmpAlcoDeclApp11T1Data unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #TmpAlcoDeclApp11T1Data
    Id 40190
    PROPERTIES
      Name                #TmpAlcoDeclApp11T1Data
      Label               #Временная таблица для данных приложения №11 таблицы 1
      Table               #TmpAlcoDeclApp11T1Data
      TitleField1         #ItemId
      TitleField2         #DimDepartment
      Temporary           #Yes
      ConfigurationKey    #LedgerBasic
      SecurityKey         #ProducerTables
      ClusterIndex        #InventLocationIdx
    ENDPROPERTIES
    
    FIELDS
      FIELD #ItemId
        Id 40001
        STRING
        PROPERTIES
          Name                #ItemId
          Table               #TmpAlcoDeclApp11T1Data
          ExtendedDataType    
            ARRAY 
              #ItemId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #Col4
        Id 40002
        STRING
        PROPERTIES
          Name                #Col4
          Table               #TmpAlcoDeclApp11T1Data
          ExtendedDataType    
            ARRAY 
              #INN_RU
              #
            ENDARRAY
          StringSize          #12
        ENDPROPERTIES
        
      FIELD #Col5
        Id 40003
        STRING
        PROPERTIES
          Name                #Col5
          Table               #TmpAlcoDeclApp11T1Data
          ExtendedDataType    
            ARRAY 
              #KPPU_RU
              #
            ENDARRAY
          StringSize          #9
        ENDPROPERTIES
        
      FIELD #Col3
        Id 40004
        STRING
        PROPERTIES
          Name                #Col3
          Table               #TmpAlcoDeclApp11T1Data
          ExtendedDataType    
            ARRAY 
              #ProducerName
              #
            ENDARRAY
          StringSize          #140
        ENDPROPERTIES
        
      FIELD #Col1
        Id 40005
        STRING
        PROPERTIES
          Name                #Col1
          Table               #TmpAlcoDeclApp11T1Data
          ExtendedDataType    
            ARRAY 
              #Name
              #
            ENDARRAY
          StringSize          #140
        ENDPROPERTIES
        
      FIELD #Col2
        Id 40006
        STRING
        PROPERTIES
          Name                #Col2
          Table               #TmpAlcoDeclApp11T1Data
          ExtendedDataType    
            ARRAY 
              #OKP_alcoId
              #
            ENDARRAY
          StringSize          #5
        ENDPROPERTIES
        
      FIELD #Col6
        Id 40007
        REAL
        PROPERTIES
          Name                #Col6
          Table               #TmpAlcoDeclApp11T1Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col7
        Id 40008
        REAL
        PROPERTIES
          Name                #Col7
          Table               #TmpAlcoDeclApp11T1Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col8
        Id 40009
        REAL
        PROPERTIES
          Name                #Col8
          Table               #TmpAlcoDeclApp11T1Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col15
        Id 40010
        REAL
        PROPERTIES
          Name                #Col15
          Table               #TmpAlcoDeclApp11T1Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #DimDepartment
        Id 40011
        STRING
        PROPERTIES
          Name                #DimDepartment
          Table               #TmpAlcoDeclApp11T1Data
          ExtendedDataType    
            ARRAY 
              #DimensionDepartment
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col17
        Id 40012
        REAL
        PROPERTIES
          Name                #Col17
          Table               #TmpAlcoDeclApp11T1Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col9
        Id 40013
        REAL
        PROPERTIES
          Name                #Col9
          Table               #TmpAlcoDeclApp11T1Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col10
        Id 40014
        REAL
        PROPERTIES
          Name                #Col10
          Table               #TmpAlcoDeclApp11T1Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col11
        Id 40015
        REAL
        PROPERTIES
          Name                #Col11
          Table               #TmpAlcoDeclApp11T1Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col12
        Id 40016
        REAL
        PROPERTIES
          Name                #Col12
          Table               #TmpAlcoDeclApp11T1Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col13
        Id 40017
        REAL
        PROPERTIES
          Name                #Col13
          Table               #TmpAlcoDeclApp11T1Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col14
        Id 40018
        REAL
        PROPERTIES
          Name                #Col14
          Table               #TmpAlcoDeclApp11T1Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col16
        Id 40019
        REAL
        PROPERTIES
          Name                #Col16
          Table               #TmpAlcoDeclApp11T1Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col18
        Id 40020
        REAL
        PROPERTIES
          Name                #Col18
          Table               #TmpAlcoDeclApp11T1Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col19
        Id 40021
        REAL
        PROPERTIES
          Name                #Col19
          Table               #TmpAlcoDeclApp11T1Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col20
        Id 40022
        REAL
        PROPERTIES
          Name                #Col20
          Table               #TmpAlcoDeclApp11T1Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #ProducerId
        Id 40028
        INT
        PROPERTIES
          Name                #ProducerId
          Table               #TmpAlcoDeclApp11T1Data
          ExtendedDataType    
            ARRAY 
              #ProducerId
              #
            ENDARRAY
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
    ENDGROUPS
    
    INDICES
      #InventLocationIdx
      Id 40001
      PROPERTIES
        Name                #InventLocationIdx
      ENDPROPERTIES
      
      INDEXFIELDS
        #DimDepartment
      ENDINDEXFIELDS
      
      #InventLocationItemIdx
      Id 40002
      PROPERTIES
        Name                #InventLocationItemIdx
      ENDPROPERTIES
      
      INDEXFIELDS
        #ItemId
        #DimDepartment
      ENDINDEXFIELDS
      
      #IdIdx
      Id 40003
      PROPERTIES
        Name                #IdIdx
      ENDPROPERTIES
      
      INDEXFIELDS
        #ItemId
        #ProducerId
      ENDINDEXFIELDS
      
      #Col2Idx
      Id 40004
      PROPERTIES
        Name                #Col2Idx
      ENDPROPERTIES
      
      INDEXFIELDS
        #Col2
      ENDINDEXFIELDS
      
    ENDINDICES
    REFERENCES
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
      Version: 3
      SOURCE #convert
        #real convert(boolean _convert2Decaliter, ItemVolume _unitVolume, real _valueFrom)
        #{
        #    #DEFINE.Liter       ("л")
        #    #DEFINE.Decaliter   ("дкл")
        #
        #    if (_convert2Decaliter)
        #        return UnitConvert::valueConvert(_valueFrom * _unitVolume, #Liter, #Decaliter, "");
        #    else
        #        return _valueFrom;
        #}
      ENDSOURCE
      SOURCE #insert
        #public void insert()
        #{
        #    super();
        #
        #    this.Col9   = 0;
        #    this.Col10  = this.Col7 + this.Col8 + this.Col9;
        #    this.Col11  = 0;
        #    this.Col12  = 0;
        #    this.Col13  = 0;
        #    this.Col14  = this.Col11 + this.Col12 + this.Col13;
        #    this.Col16  = 0;
        #    this.Col18  = 0;
        #    this.Col19  = this.Col15 + this.Col16 + this.Col17 + this.Col18;
        #    this.Col20  = this.Col6 + this.Col10 - this.Col19;
        #
        #    this.write();
        #    TmpAlcoDeclApp11T1DataCopy::insertLine(this); // TODO Удалить после отладки
        #}
        #
      ENDSOURCE
      SOURCE #insertLine
        #private void insertLine(ItemId              _itemId,
        #                        ItemVolume          _unitVolume,
        #                        boolean             _convert2Decaliter,
        #                        DimensionDepartment _dimDepartment,
        #                        Name                _col1,
        #                        OKP_alcoId          _col2,
        #                        ProducerId          _producerId,
        #                        ProducerName        _col3,
        #                        INN_RU              _col4,
        #                        KPPU_RU             _col5,
        #                        Decaliter           _col6,
        #                        Decaliter           _col7,
        #                        Decaliter           _col8,
        #                        Decaliter           _col15,
        #                        Decaliter           _col17)
        #{
        #    ;
        #
        #    ttsBegin;
        #    this.ItemId          = _itemId;
        #    this.DimDepartment   = _dimDepartment;
        #    this.ProducerId      = _producerId;
        #
        #    this.Col1            = _col1;
        #    this.Col2            = _col2;
        #    this.Col3            = _col3;
        #    this.Col4            = _col4;
        #    this.Col5            = _col5;
        #    this.Col6            = this.convert(_convert2Decaliter, _unitVolume, _col6);
        #    this.Col7            = this.convert(_convert2Decaliter, _unitVolume, _col7);
        #    this.Col8            = this.convert(_convert2Decaliter, _unitVolume, _col8);
        #    this.Col15           = this.convert(_convert2Decaliter, _unitVolume, _col15);
        #    this.Col17           = this.convert(_convert2Decaliter, _unitVolume, _col17);
        #
        #    this.insert();
        #    ttsCommit;
        #}
      ENDSOURCE
      SOURCE #buildQueryLines
        #static Query buildQueryLines(OKP_alcoId             _col2,
        #                             DimensionDepartment    _dimDepartment  = "",
        #                             ProducerId             _producerId     = 0)
        #{
        #    Query                   ret = new Query();
        #    QueryBuildDataSource    qbds;
        #    QueryBuildFieldList     qbfl;
        #    ;
        #
        #    qbds    = ret.addDataSource(tablenum(TmpAlcoDeclApp11T1Data));
        #    qbds.addRange(fieldnum(TmpAlcoDeclApp11T1Data, Col2)).value(_col2);
        #    qbfl    = qbds.fields();
        #
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp11T1Data, Col2), SortOrder::Ascending);
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp11T1Data, Col1));
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp11T1Data, Col3));
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp11T1Data, Col4));
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp11T1Data, Col5));
        #
        #    if (_dimDepartment)
        #    {
        #        qbds.addSortField(fieldnum(TmpAlcoDeclApp11T1Data, DimDepartment));
        #        qbds.addRange(fieldnum(TmpAlcoDeclApp11T1Data, DimDepartment)).value(_dimDepartment);
        #    }
        #
        #    if (_producerId)
        #        qbds.addRange(fieldnum(TmpAlcoDeclApp11T1Data, ProducerId)).value(queryValue(_producerId));
        #
        #    qbds.orderMode(OrderMode::GroupBy);
        #
        #    qbfl.addField(fieldnum(TmpAlcoDeclApp11T1Data, Col6), SelectionField::Sum);
        #    qbfl.addField(fieldnum(TmpAlcoDeclApp11T1Data, Col7), SelectionField::Sum);
        #    qbfl.addField(fieldnum(TmpAlcoDeclApp11T1Data, Col8), SelectionField::Sum);
        #    qbfl.addField(fieldnum(TmpAlcoDeclApp11T1Data, Col9), SelectionField::Sum);
        #    qbfl.addField(fieldnum(TmpAlcoDeclApp11T1Data, Col10), SelectionField::Sum);
        #    qbfl.addField(fieldnum(TmpAlcoDeclApp11T1Data, Col11), SelectionField::Sum);
        #    qbfl.addField(fieldnum(TmpAlcoDeclApp11T1Data, Col12), SelectionField::Sum);
        #    qbfl.addField(fieldnum(TmpAlcoDeclApp11T1Data, Col15), SelectionField::Sum);
        #    qbfl.addField(fieldnum(TmpAlcoDeclApp11T1Data, Col16), SelectionField::Sum);
        #    qbfl.addField(fieldnum(TmpAlcoDeclApp11T1Data, Col17), SelectionField::Sum);
        #    qbfl.addField(fieldnum(TmpAlcoDeclApp11T1Data, Col19), SelectionField::Sum);
        #    qbfl.addField(fieldnum(TmpAlcoDeclApp11T1Data, Col20), SelectionField::Sum);
        #
        #    if (_dimDepartment)
        #    {
        #        qbfl.addField(fieldnum(TmpAlcoDeclApp11T1Data, Col13), SelectionField::Sum);
        #        qbfl.addField(fieldnum(TmpAlcoDeclApp11T1Data, Col18), SelectionField::Sum);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #existOKP_alcoId
        #static boolean existOKP_alcoId(TmpAlcoDeclApp11T1Data  _tmpAlcoDeclApp11T1Data, OKP_alcoId _alcoId, DimensionDepartment _dimDepartment = "")
        #{
        #    if (_alcoId)
        #    {
        #        select firstonly _tmpAlcoDeclApp11T1Data
        #            where   _tmpAlcoDeclApp11T1Data.Col2             == _alcoId
        #                &&  (_tmpAlcoDeclApp11T1Data.DimDepartment   == _dimDepartment || !_dimDepartment);
        #    }
        #
        #    return (_tmpAlcoDeclApp11T1Data.RecId);
        #}
      ENDSOURCE
      SOURCE #prepareData
        #static TmpAlcoDeclApp11T1Data prepareData(JuridicalPersonId _juridicalPersonId,
        #                                          TransDate         _fromDate,
        #                                          TransDate         _toDate,
        #                                          boolean           _convert2Decaliter,
        #                                          ItemId            _itemId                     = "",
        #                                          NoYes             _includeInventJournalTrans  = NoYes::No)
        #{
        #    TmpAlcoDeclApp11T1Data  dynamicData;
        #
        #    Date                    startDate = mkdate(01, 01, year(_fromDate));
        #    ProducerItem            producerItem;
        #    ProducerTable           producerTable;
        #    InventTable             inventTable;
        #    PurchTable              purchTable;
        #    SalesTable              salesTable;
        #    InventLocation          inventLocation;
        #    OKP_ALCO_RU             OKP_ALCO_RU;
        #    VendInvoiceTrans        vendInvoiceTrans;
        #    CustInvoiceTrans        custInvoiceTrans;
        #    PurchPlanningRemains    purchPlanningRemains;
        #    InventJournalTable      inventJournalTable;
        #    InventJournalTrans      inventJournalTrans;
        #    Decaliter               col7;
        #    Decaliter               col8;
        #    Decaliter               col15;
        #    Decaliter               col17;
        #    ;
        #
        #    TmpAlcoDeclApp11T1DataCopy::clear(); // TODO Удалить после отладки
        #    dynamicData.clear();
        #
        #    while
        #        select ItemId, ProducerAccount from producerItem
        #            index hint ProducerAccountItemIdIdx
        #            where   (producerItem.ItemId             == _itemId || !_itemId)
        #            join AccountNum, Name, INN_RU, KPP_RU, ProducerId from producerTable
        #                index hint AccountIdx
        #                where   producerTable.AccountNum    == producerItem.ProducerAccount
        #    {
        #        col7            = 0;
        #        col8            = 0;
        #        col15           = 0;
        #        col17           = 0;
        #        inventTable     = InventTable::find(producerItem.ItemId);
        #        OKP_ALCO_RU     = OKP_ALCO_RU::find(inventTable.OKP_alcoId);
        #
        #        if (OKP_ALCO_RU.OKP_alcoType == OKP_alcoType::Beer) continue;
        #
        #        while
        #            select ItemId, InventLocationId, RemainQty from purchPlanningRemains
        #                where   purchPlanningRemains.ItemId     == producerItem.ItemId
        #                    &&  purchPlanningRemains.FixedDate  == startDate
        #        {
        #            inventLocation  = InventLocation::find(purchPlanningRemains.InventLocationId);
        #
        #            if (inventLocation.JuridicalPersonId != _juridicalPersonId) continue;
        #
        #            dynamicData.insertLine(inventTable.ItemId,
        #                                   inventTable.UnitVolume,
        #                                   _convert2Decaliter,
        #                                   inventLocation.DimDepartment,
        #
        #                                   OKP_ALCO_RU.Name,
        #                                   OKP_ALCO_RU.OKP_alcoId,
        #                                   producerTable.ProducerId,
        #                                   producerTable.Name,
        #                                   producerTable.INN_RU,
        #                                   producerTable.KPP_RU,
        #                                   purchPlanningRemains.RemainQty,
        #                                   0,
        #                                   0,
        #                                   0,
        #                                   0);
        #        }
        #
        #        while
        #            select PurchID, ItemId, Qty from vendInvoiceTrans
        #                index hint ItemIdIdx
        #                where   vendInvoiceTrans.ItemId         == producerItem.ItemId
        #                    &&  (vendInvoiceTrans.InvoiceDate   >= _fromDate || !_fromDate)
        #                    &&  (vendInvoiceTrans.InvoiceDate   <= _toDate   || !_toDate)
        #        {
        #            purchTable      = PurchTable::find(vendInvoiceTrans.PurchID);
        #            inventLocation  = InventLocation::find(purchTable.InventLocationId);
        #
        #            if (inventLocation.JuridicalPersonId != _juridicalPersonId) continue;
        #
        #            if (inventLocation.InventLocationType   == InventLocationType::Shop)
        #            {
        #                if (VendTable::find(purchTable.OrderAccount).VendProducer == NoYes::Yes)
        #                {
        #                    col7    = vendInvoiceTrans.Qty;
        #                    col8    = 0;
        #                }
        #                else
        #                {
        #                    col7    = 0;
        #                    col8    = vendInvoiceTrans.Qty;
        #                }
        #
        #                dynamicData.insertLine(inventTable.ItemId,
        #                                       inventTable.UnitVolume,
        #                                       _convert2Decaliter,
        #                                       inventLocation.DimDepartment,
        #
        #                                       OKP_ALCO_RU.Name,
        #                                       OKP_ALCO_RU.OKP_alcoId,
        #                                       producerTable.ProducerId,
        #                                       producerTable.Name,
        #                                       producerTable.INN_RU,
        #                                       producerTable.KPP_RU,
        #                                       0,
        #                                       col7,
        #                                       col8,
        #                                       0,
        #                                       0);
        #            }
        #            else if (inventLocation.InventLocationType  == InventLocationType::Damage)
        #            {
        #                col15   = 0;
        #                col17   = vendInvoiceTrans.Qty;
        #
        #                dynamicData.insertLine(inventTable.ItemId,
        #                                       inventTable.UnitVolume,
        #                                       _convert2Decaliter,
        #                                       inventLocation.DimDepartment,
        #
        #                                       OKP_ALCO_RU.Name,
        #                                       OKP_ALCO_RU.OKP_alcoId,
        #                                       producerTable.ProducerId,
        #                                       producerTable.Name,
        #                                       producerTable.INN_RU,
        #                                       producerTable.KPP_RU,
        #                                       0,
        #                                       0,
        #                                       0,
        #                                       col15,
        #                                       col17);
        #            }
        #        }
        #
        #        while
        #            select SalesId, ItemId, Qty from custInvoiceTrans
        #                index hint ItemIdIdx
        #                where   custInvoiceTrans.ItemId         == producerItem.ItemId
        #                    &&  (custInvoiceTrans.InvoiceDate   >= _fromDate || !_fromDate)
        #                    &&  (custInvoiceTrans.InvoiceDate   <= _toDate   || !_toDate)
        #        {
        #            salesTable      = SalesTable::find(custInvoiceTrans.SalesId);
        #            inventLocation  = InventLocation::find(salesTable.InventLocationId);
        #
        #            if (inventLocation.JuridicalPersonId != _juridicalPersonId) continue;
        #
        #            if (inventLocation.InventLocationType       == InventLocationType::Shop)
        #            {
        #                col15   = custInvoiceTrans.Qty;
        #                col17   = 0;
        #            }
        #            else if (inventLocation.InventLocationType  == InventLocationType::Damage)
        #            {
        #                col15   = 0;
        #                col17   = custInvoiceTrans.Qty;
        #            }
        #
        #            dynamicData.insertLine(inventTable.ItemId,
        #                                   inventTable.UnitVolume,
        #                                   _convert2Decaliter,
        #                                   inventLocation.DimDepartment,
        #
        #                                   OKP_ALCO_RU.Name,
        #                                   OKP_ALCO_RU.OKP_alcoId,
        #                                   producerTable.ProducerId,
        #                                   producerTable.Name,
        #                                   producerTable.INN_RU,
        #                                   producerTable.KPP_RU,
        #                                   0,
        #                                   0,
        #                                   0,
        #                                   col15,
        #                                   col17);
        #        }
        #
        #        if (!_includeInventJournalTrans) continue;
        #
        #        while
        #            select inventJournalTrans
        #                index hint KeyIdx
        #                where   inventJournalTrans.ItemId       == producerItem.ItemId
        #                    &&  (inventJournalTrans.TransDate   >= _fromDate || !_fromDate)
        #                    &&  (inventJournalTrans.TransDate   <= _toDate   || !_toDate)
        #        {
        #            inventJournalTable  = inventJournalTable::find(inventJournalTrans.JournalId);
        #
        #            if (inventJournalTable.Posted           != NoYes::Yes                   ||
        #                !(inventJournalTable.JournalType    != inventJournalType::Count     ||
        #                  inventJournalTable.JournalType    != inventJournalType::Movement) ||
        #                !(inventJournalTable.JournalNameId  == "МОЛ"        ||
        #                  inventJournalTable.JournalNameId  == "БракМаг"    ||
        #                  inventJournalTable.JournalNameId  == "ИНВ"))
        #                continue;
        #
        #            inventLocation      = InventLocation::find(inventJournalTable.InventLocationId);
        #
        #            if (inventLocation.JuridicalPersonId != _juridicalPersonId) continue;
        #
        #            col15   = -inventJournalTrans.Qty;
        #            col17   = 0;
        #
        #            dynamicData.insertLine(inventTable.ItemId,
        #                                   inventTable.UnitVolume,
        #                                   _convert2Decaliter,
        #                                   inventLocation.DimDepartment,
        #
        #                                   OKP_ALCO_RU.Name,
        #                                   OKP_ALCO_RU.OKP_alcoId,
        #                                   producerTable.ProducerId,
        #                                   producerTable.Name,
        #                                   producerTable.INN_RU,
        #                                   producerTable.KPP_RU,
        #                                   0,
        #                                   0,
        #                                   0,
        #                                   col15,
        #                                   col17);
        #        }
        #    }
        #
        #    return dynamicData;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics Table : TmpAlcoDeclApp11T2Data unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #TmpAlcoDeclApp11T2Data
    Id 40192
    PROPERTIES
      Name                #TmpAlcoDeclApp11T2Data
      Label               #Временная таблица для данных приложения №11 таблицы 2
      Table               #TmpAlcoDeclApp11T2Data
      TitleField1         #ItemId
      TitleField2         #DimDepartment
      Temporary           #Yes
      ConfigurationKey    #LedgerBasic
      SecurityKey         #ProducerTables
      ClusterIndex        #InventLocationIdx
    ENDPROPERTIES
    
    FIELDS
      FIELD #ItemId
        Id 40001
        STRING
        PROPERTIES
          Name                #ItemId
          Table               #TmpAlcoDeclApp11T2Data
          ExtendedDataType    
            ARRAY 
              #ItemId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #DimDepartment
        Id 40002
        STRING
        PROPERTIES
          Name                #DimDepartment
          Table               #TmpAlcoDeclApp11T2Data
          ExtendedDataType    
            ARRAY 
              #DimensionDepartment
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col1
        Id 40003
        STRING
        PROPERTIES
          Name                #Col1
          Table               #TmpAlcoDeclApp11T2Data
          ExtendedDataType    
            ARRAY 
              #Name
              #
            ENDARRAY
          StringSize          #140
        ENDPROPERTIES
        
      FIELD #Col2
        Id 40004
        STRING
        PROPERTIES
          Name                #Col2
          Table               #TmpAlcoDeclApp11T2Data
          ExtendedDataType    
            ARRAY 
              #OKP_alcoId
              #
            ENDARRAY
          StringSize          #5
        ENDPROPERTIES
        
      FIELD #Col3
        Id 40005
        STRING
        PROPERTIES
          Name                #Col3
          Table               #TmpAlcoDeclApp11T2Data
          ExtendedDataType    
            ARRAY 
              #ProducerName
              #
            ENDARRAY
          StringSize          #140
        ENDPROPERTIES
        
      FIELD #Col4
        Id 40006
        STRING
        PROPERTIES
          Name                #Col4
          Table               #TmpAlcoDeclApp11T2Data
          ExtendedDataType    
            ARRAY 
              #INN_RU
              #
            ENDARRAY
          StringSize          #12
        ENDPROPERTIES
        
      FIELD #Col5
        Id 40007
        STRING
        PROPERTIES
          Name                #Col5
          Table               #TmpAlcoDeclApp11T2Data
          ExtendedDataType    
            ARRAY 
              #KPPU_RU
              #
            ENDARRAY
          StringSize          #9
        ENDPROPERTIES
        
      FIELD #Col6
        Id 40008
        STRING
        PROPERTIES
          Name                #Col6
          Table               #TmpAlcoDeclApp11T2Data
          ExtendedDataType    
            ARRAY 
              #VendName
              #
            ENDARRAY
          StringSize          #140
        ENDPROPERTIES
        
      FIELD #Col7
        Id 40009
        STRING
        PROPERTIES
          Name                #Col7
          Table               #TmpAlcoDeclApp11T2Data
          ExtendedDataType    
            ARRAY 
              #INN_RU
              #
            ENDARRAY
          StringSize          #12
        ENDPROPERTIES
        
      FIELD #Col8
        Id 40010
        STRING
        PROPERTIES
          Name                #Col8
          Table               #TmpAlcoDeclApp11T2Data
          ExtendedDataType    
            ARRAY 
              #KPPU_RU
              #
            ENDARRAY
          StringSize          #9
        ENDPROPERTIES
        
      FIELD #Col9
        Id 40011
        STRING
        PROPERTIES
          Name                #Col9
          Table               #TmpAlcoDeclApp11T2Data
          StringSize          #40
        ENDPROPERTIES
        
      FIELD #Col12
        Id 40012
        STRING
        PROPERTIES
          Name                #Col12
          Table               #TmpAlcoDeclApp11T2Data
          ExtendedDataType    
            ARRAY 
              #LicenseCardIssuedBy_RU
              #
            ENDARRAY
          StringSize          #200
          Adjustment          #Right
        ENDPROPERTIES
        
      FIELD #Col10
        Id 40013
        DATE
        PROPERTIES
          Name                #Col10
          Table               #TmpAlcoDeclApp11T2Data
          ExtendedDataType    
            ARRAY 
              #LicenseCardStartDate_RU
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col11
        Id 40014
        DATE
        PROPERTIES
          Name                #Col11
          Table               #TmpAlcoDeclApp11T2Data
          ExtendedDataType    
            ARRAY 
              #LicenseCardFinishDate_RU
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col13
        Id 40015
        DATE
        PROPERTIES
          Name                #Col13
          Table               #TmpAlcoDeclApp11T2Data
          ExtendedDataType    
            ARRAY 
              #TransDate
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col14
        Id 40016
        STRING
        PROPERTIES
          Name                #Col14
          Table               #TmpAlcoDeclApp11T2Data
          ExtendedDataType    
            ARRAY 
              #VendInvoiceId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #Col16
        Id 40017
        REAL
        PROPERTIES
          Name                #Col16
          Table               #TmpAlcoDeclApp11T2Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #ProducerId
        Id 40043
        INT
        PROPERTIES
          Name                #ProducerId
          Table               #TmpAlcoDeclApp11T2Data
          ExtendedDataType    
            ARRAY 
              #ProducerId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #LicenseId
        Id 40044
        INT
        PROPERTIES
          Name                #LicenseId
          Table               #TmpAlcoDeclApp11T2Data
          ExtendedDataType    
            ARRAY 
              #LicenseId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #VendId
        Id 40045
        INT
        PROPERTIES
          Name                #VendId
          Table               #TmpAlcoDeclApp11T2Data
          ExtendedDataType    
            ARRAY 
              #VendId
              #
            ENDARRAY
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
    ENDGROUPS
    
    INDICES
      #InventLocationIdx
      Id 40001
      PROPERTIES
        Name                #InventLocationIdx
      ENDPROPERTIES
      
      INDEXFIELDS
        #DimDepartment
      ENDINDEXFIELDS
      
      #InventLocationItemIdx
      Id 40002
      PROPERTIES
        Name                #InventLocationItemIdx
      ENDPROPERTIES
      
      INDEXFIELDS
        #ItemId
        #DimDepartment
      ENDINDEXFIELDS
      
      #IdIdx
      Id 40003
      PROPERTIES
        Name                #IdIdx
      ENDPROPERTIES
      
      INDEXFIELDS
        #ItemId
        #LicenseId
        #ProducerId
        #VendId
      ENDINDEXFIELDS
      
    ENDINDICES
    REFERENCES
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
      Version: 3
      SOURCE #convert
        #real convert(boolean _convert2Decaliter, ItemVolume _unitVolume, real _valueFrom)
        #{
        #    #DEFINE.Liter       ("л")
        #    #DEFINE.Decaliter   ("дкл")
        #
        #    if (_convert2Decaliter)
        #        return UnitConvert::valueConvert(_valueFrom * _unitVolume, #Liter, #Decaliter, "");
        #    else
        #        return _valueFrom;
        #}
      ENDSOURCE
      SOURCE #insert
        #public void insert()
        #{
        #    super();
        #
        #    TmpAlcoDeclApp11T2DataCopy::insertLine(this); // TODO Удалить после отладки
        #}
        #
      ENDSOURCE
      SOURCE #insertLine
        #private void insertLine(ItemId                      _itemId,
        #                        ItemVolume                  _unitVolume,
        #                        boolean                     _convert2Decaliter,
        #                        DimensionDepartment         _dimDepartment,
        #                        Name                        _col1,
        #                        OKP_alcoId                  _col2,
        #                        ProducerId                  _producerId,
        #                        ProducerName                _col3,
        #                        INN_RU                      _col4,
        #                        KPPU_RU                     _col5,
        #                        VendId                      _vendId,
        #                        VendName                    _col6,
        #                        INN_RU                      _col7,
        #                        KPPU_RU                     _col8,
        #                        str                         _col9,
        #                        LicenseId                   _licenseId,
        #                        LicenseCardStartDate_RU     _col10,
        #                        LicenseCardFinishDate_RU    _col11,
        #                        LicenseCardIssuedBy_RU      _col12,
        #                        TransDate                   _col13,
        #                        VendInvoiceId               _col14,
        #                        Decaliter                   _col16)
        #{
        #    ttsBegin;
        #    this.ItemId          = _itemId;
        #    this.DimDepartment   = _dimDepartment;
        #    this.ProducerId      = _producerId;
        #    this.VendId          = _vendId;
        #    this.LicenseId       = _licenseId;
        #
        #    this.Col1            = _col1;
        #    this.Col2            = _col2;
        #    this.Col3            = _col3;
        #    this.Col4            = _col4;
        #    this.Col5            = _col5;
        #    this.Col6            = _col6;
        #    this.Col7            = _col7;
        #    this.Col8            = _col8;
        #    this.Col9            = _col9;
        #    this.Col10           = _col10;
        #    this.Col11           = _col11;
        #    this.Col12           = _col12;
        #    this.Col13           = _col13;
        #    this.Col14           = _col14;
        #    this.Col16           = this.convert(_convert2Decaliter, _unitVolume, _col16);
        #
        #    this.insert();
        #    ttsCommit;
        #}
      ENDSOURCE
      SOURCE #buildQueryLines
        #static Query buildQueryLines(OKP_alcoId             _col2,
        #                             DimensionDepartment    _dimDepartment  = "",
        #                             ProducerId             _producerId     = 0,
        #                             VendId                 _vendId         = 0,
        #                             LicenseId              _licenseId      = 0) // MIL 17.08.2012 CU_00236_2
        #{
        #    Query                   ret = new Query();
        #    QueryBuildDataSource    qbds;
        #    QueryBuildFieldList     qbfl;
        #    ;
        #
        #    qbds    = ret.addDataSource(tablenum(TmpAlcoDeclApp11T2Data));
        #    qbds.addRange(fieldnum(TmpAlcoDeclApp11T2Data, Col2)).value(_col2);
        #    qbfl    = qbds.fields();
        #
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp11T2Data, Col2), SortOrder::Ascending);
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp11T2Data, Col1));
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp11T2Data, Col3));
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp11T2Data, Col4));
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp11T2Data, Col5));
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp11T2Data, Col6));
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp11T2Data, Col7));
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp11T2Data, Col8));
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp11T2Data, Col9));
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp11T2Data, Col10));
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp11T2Data, Col11));
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp11T2Data, Col12));
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp11T2Data, Col13));
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp11T2Data, Col14));
        #
        #    if (_dimDepartment)
        #    {
        #        qbds.addSortField(fieldnum(TmpAlcoDeclApp11T2Data, DimDepartment));
        #        qbds.addRange(fieldnum(TmpAlcoDeclApp11T2Data, DimDepartment)).value(_dimDepartment);
        #    }
        #
        #    if (_producerId)
        #    {
        #        qbds.addSortField(fieldnum(TmpAlcoDeclApp11T2Data, ProducerId));
        #        qbds.addRange(fieldnum(TmpAlcoDeclApp11T2Data, ProducerId)).value(queryValue(_producerId));
        #    }
        #
        #    if (_vendId)
        #    {
        #        qbds.addSortField(fieldnum(TmpAlcoDeclApp11T2Data, VendId));
        #        qbds.addRange(fieldnum(TmpAlcoDeclApp11T2Data, VendId)).value(queryValue(_vendId));
        #    }
        #
        #//+ MIL 17.08.2012 CU_00236_2
        #    if (_licenseId)
        #    {
        #        qbds.addSortField(fieldnum(TmpAlcoDeclApp11T2Data, LicenseId));
        #        qbds.addRange(fieldnum(TmpAlcoDeclApp11T2Data, LicenseId)).value(queryValue(_licenseId));
        #    }
        #//- MIL 17.08.2012 CU_00236_2
        #
        #    qbds.orderMode(OrderMode::GroupBy);
        #
        #    qbfl.addField(fieldnum(TmpAlcoDeclApp11T2Data, Col16), SelectionField::Sum);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #existOKP_alcoId
        #public static boolean existOKP_alcoId(TmpAlcoDeclApp11T2Data  _tmpAlcoDeclApp11T2Data, OKP_alcoId _alcoId)
        #{
        #    if (_alcoId)
        #    {
        #        select firstonly _tmpAlcoDeclApp11T2Data
        #            where   _tmpAlcoDeclApp11T2Data.Col2   == _alcoId;
        #    }
        #
        #    return (_tmpAlcoDeclApp11T2Data.RecId != 0);
        #}
      ENDSOURCE
      SOURCE #existVendor
        #static boolean existVendor(TmpAlcoDeclApp11T2Data   _tmpAlcoDeclApp11T2Data,
        #                           OKP_alcoId               _col2,
        #                           DimensionDepartment      _dimDepartment  = "",
        #                           ProducerId               _producerId     = 0,
        #                           VendId                   _vendId         = 0)
        #{
        #    select sum(Col16) from _tmpAlcoDeclApp11T2Data
        #        where   _tmpAlcoDeclApp11T2Data.Col2             == _col2
        #            &&  (_tmpAlcoDeclApp11T2Data.DimDepartment   == _dimDepartment || !_dimDepartment)
        #            &&  (_tmpAlcoDeclApp11T2Data.ProducerId      == _producerId || !_producerId)
        #            &&  (_tmpAlcoDeclApp11T2Data.VendId          == _vendId || !_vendId);
        #
        #    return _tmpAlcoDeclApp11T2Data.Col16 ? true : false;
        #}
      ENDSOURCE
      SOURCE #prepareData
        #static TmpAlcoDeclApp11T2Data prepareData(JuridicalPersonId _juridicalPersonId,
        #                                          TransDate         _fromDate,
        #                                          TransDate         _toDate,
        #                                          boolean           _convert2Decaliter,
        #                                          ItemId            _itemId = "")
        #{
        #    TmpAlcoDeclApp11T2Data  dynamicData;
        #
        #    ProducerItem            producerItem;
        #    ProducerTable           producerTable;
        #    InventTable             inventTable;
        #    OKP_ALCO_RU             OKP_ALCO_RU;
        #    VendTable               vendTable;
        #    VendInvoiceTrans        vendInvoiceTrans;
        #    InventDim               inventDim;
        #    InventLocation          inventLocation;
        #    LicenseTable            licenseTable; // MIL 15.08.2012 CU_00273_2
        #    ;
        #
        #    TmpAlcoDeclApp11T2DataCopy::clear(); // TODO Удалить после отладки
        #    dynamicData.clear();
        #
        #    while
        #        select ItemId, ProducerAccount from producerItem
        #            index hint ProducerAccountItemIdIdx
        #            where   (producerItem.ItemId             == _itemId || !_itemId)
        #            join AccountNum, Name, INN_RU, KPP_RU, ProducerId from producerTable
        #                where   producerTable.AccountNum    == producerItem.ProducerAccount
        #    {
        #        inventTable     = InventTable::find(producerItem.ItemId);
        #        OKP_ALCO_RU     = OKP_ALCO_RU::find(inventTable.OKP_alcoId);
        #
        #        if (OKP_ALCO_RU.OKP_alcoType == OKP_alcoType::Beer) continue;
        #
        #//        vendTable       = VendTable::find(inventTable.PrimaryVendorId);
        #
        #        while
        #            select InvoiceId, InvoiceDate, PurchID, ItemId, Qty from vendInvoiceTrans
        #                index hint InvoiceIdx
        #                where   vendInvoiceTrans.ItemId         == producerItem.ItemId
        #                    &&  (vendInvoiceTrans.InvoiceDate   >= _fromDate || !_fromDate)
        #                    &&  (vendInvoiceTrans.InvoiceDate   <= _toDate   || !_toDate)
        #                join inventDim
        #                    where   inventDim.inventDimId       == vendInvoiceTrans.InventDimId
        #                join inventLocation
        #                    where   inventLocation.InventLocationId     == inventDim.InventLocationId   &&
        #                            inventLocation.JuridicalPersonId    == _juridicalPersonId            &&
        #                            inventLocation.InventLocationType   == InventLocationType::Shop
        #        {
        #//            purchTable      = PurchTable::find(vendInvoiceTrans.PurchID);
        #//            inventLocation  = InventLocation::find(purchTable.InventLocationId);
        #
        #//            if (inventLocation.JuridicalPersonId != juridicalPersonId) continue;
        #            vendTable   = VendTable::find(PurchTable::find(vendInvoiceTrans.PurchID).OrderAccount);
        #            licenseTable    = LicenseTable::find(vendTable.AccountNum, vendInvoiceTrans.InvoiceDate); // MIL 15.08.2012 CU_00273_2
        #
        #            dynamicData.insertLine(inventTable.ItemId,
        #                                   inventTable.UnitVolume,
        #                                   _convert2Decaliter,
        #                                   inventLocation.DimDepartment,
        #                                   OKP_ALCO_RU.Name,
        #                                   OKP_ALCO_RU.OKP_alcoId,
        #                                   producerTable.ProducerId,
        #                                   producerTable.Name,
        #                                   producerTable.INN_RU,
        #                                   producerTable.KPP_RU,
        #                                   vendTable.VendId,
        #                                   vendTable.Name,
        #                                   vendTable.INN_RU,
        #                                   vendTable.KPP_RU,
        #                                   strFmt("%1 %2", vendTable.LicenseCardSeries_RU, vendTable.LicenseCardNum_RU),
        #//+ MIL 15.08.2012 CU_00273_2
        #//                                   vendTable.LicenseId,
        #//                                   vendTable.LicenseCardStartDate_RU,
        #//                                   vendTable.LicenseCardFinishDate_RU,
        #//                                   vendTable.LicenseCardIssuedBy_RU,
        #                                   licenseTable.LicenseId,
        #                                   licenseTable.LicenseCardStartDate_RU,
        #                                   licenseTable.LicenseCardFinishDate_RU,
        #                                   licenseTable.LicenseCardIssuedBy_RU,
        #//- MIL 15.08.2012 CU_00273_2
        #                                   vendInvoiceTrans.InvoiceDate,
        #                                   vendInvoiceTrans.InvoiceId,
        #                                   vendInvoiceTrans.Qty);
        #        }
        #    }
        #
        #    return dynamicData;
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics Table : TmpAlcoDeclApp12T1Data unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #TmpAlcoDeclApp12T1Data
    Id 40194
    PROPERTIES
      Name                #TmpAlcoDeclApp12T1Data
      Label               #Временная таблица для данных приложения №12 таблицы 1
      Table               #TmpAlcoDeclApp12T1Data
      TitleField1         #ItemId
      TitleField2         #DimDepartment
      Temporary           #Yes
      ConfigurationKey    #LedgerBasic
      SecurityKey         #ProducerTables
      ClusterIndex        #InventLocationIdx
    ENDPROPERTIES
    
    FIELDS
      FIELD #ItemId
        Id 40001
        STRING
        PROPERTIES
          Name                #ItemId
          Table               #TmpAlcoDeclApp12T1Data
          ExtendedDataType    
            ARRAY 
              #ItemId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #Col4
        Id 40002
        STRING
        PROPERTIES
          Name                #Col4
          Table               #TmpAlcoDeclApp12T1Data
          ExtendedDataType    
            ARRAY 
              #INN_RU
              #
            ENDARRAY
          StringSize          #12
        ENDPROPERTIES
        
      FIELD #Col5
        Id 40003
        STRING
        PROPERTIES
          Name                #Col5
          Table               #TmpAlcoDeclApp12T1Data
          ExtendedDataType    
            ARRAY 
              #KPPU_RU
              #
            ENDARRAY
          StringSize          #9
        ENDPROPERTIES
        
      FIELD #Col3
        Id 40004
        STRING
        PROPERTIES
          Name                #Col3
          Table               #TmpAlcoDeclApp12T1Data
          ExtendedDataType    
            ARRAY 
              #ProducerName
              #
            ENDARRAY
          StringSize          #140
        ENDPROPERTIES
        
      FIELD #Col1
        Id 40005
        STRING
        PROPERTIES
          Name                #Col1
          Table               #TmpAlcoDeclApp12T1Data
          ExtendedDataType    
            ARRAY 
              #Name
              #
            ENDARRAY
          StringSize          #140
        ENDPROPERTIES
        
      FIELD #Col2
        Id 40006
        STRING
        PROPERTIES
          Name                #Col2
          Table               #TmpAlcoDeclApp12T1Data
          ExtendedDataType    
            ARRAY 
              #OKP_alcoId
              #
            ENDARRAY
          StringSize          #5
        ENDPROPERTIES
        
      FIELD #Col6
        Id 40007
        REAL
        PROPERTIES
          Name                #Col6
          Table               #TmpAlcoDeclApp12T1Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col7
        Id 40008
        REAL
        PROPERTIES
          Name                #Col7
          Table               #TmpAlcoDeclApp12T1Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col8
        Id 40009
        REAL
        PROPERTIES
          Name                #Col8
          Table               #TmpAlcoDeclApp12T1Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col15
        Id 40010
        REAL
        PROPERTIES
          Name                #Col15
          Table               #TmpAlcoDeclApp12T1Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #DimDepartment
        Id 40011
        STRING
        PROPERTIES
          Name                #DimDepartment
          Table               #TmpAlcoDeclApp12T1Data
          ExtendedDataType    
            ARRAY 
              #DimensionDepartment
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col17
        Id 40012
        REAL
        PROPERTIES
          Name                #Col17
          Table               #TmpAlcoDeclApp12T1Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col9
        Id 40013
        REAL
        PROPERTIES
          Name                #Col9
          Table               #TmpAlcoDeclApp12T1Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col10
        Id 40014
        REAL
        PROPERTIES
          Name                #Col10
          Table               #TmpAlcoDeclApp12T1Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col11
        Id 40015
        REAL
        PROPERTIES
          Name                #Col11
          Table               #TmpAlcoDeclApp12T1Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col12
        Id 40016
        REAL
        PROPERTIES
          Name                #Col12
          Table               #TmpAlcoDeclApp12T1Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col13
        Id 40017
        REAL
        PROPERTIES
          Name                #Col13
          Table               #TmpAlcoDeclApp12T1Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col14
        Id 40018
        REAL
        PROPERTIES
          Name                #Col14
          Table               #TmpAlcoDeclApp12T1Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col16
        Id 40019
        REAL
        PROPERTIES
          Name                #Col16
          Table               #TmpAlcoDeclApp12T1Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col18
        Id 40020
        REAL
        PROPERTIES
          Name                #Col18
          Table               #TmpAlcoDeclApp12T1Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col19
        Id 40021
        REAL
        PROPERTIES
          Name                #Col19
          Table               #TmpAlcoDeclApp12T1Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col20
        Id 40022
        REAL
        PROPERTIES
          Name                #Col20
          Table               #TmpAlcoDeclApp12T1Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #ProducerId
        Id 40024
        INT
        PROPERTIES
          Name                #ProducerId
          Table               #TmpAlcoDeclApp12T1Data
          ExtendedDataType    
            ARRAY 
              #ProducerId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #LicenseId
        Id 40025
        INT
        PROPERTIES
          Name                #LicenseId
          Table               #TmpAlcoDeclApp12T1Data
          ExtendedDataType    
            ARRAY 
              #LicenseId
              #
            ENDARRAY
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
    ENDGROUPS
    
    INDICES
      #InventLocationIdx
      Id 40001
      PROPERTIES
        Name                #InventLocationIdx
      ENDPROPERTIES
      
      INDEXFIELDS
        #DimDepartment
      ENDINDEXFIELDS
      
      #InventLocationItemIdx
      Id 40002
      PROPERTIES
        Name                #InventLocationItemIdx
      ENDPROPERTIES
      
      INDEXFIELDS
        #ItemId
        #DimDepartment
      ENDINDEXFIELDS
      
      #IdIdx
      Id 40003
      PROPERTIES
        Name                #IdIdx
      ENDPROPERTIES
      
      INDEXFIELDS
        #ItemId
        #LicenseId
        #ProducerId
      ENDINDEXFIELDS
      
      #Col2Idx
      Id 40004
      PROPERTIES
        Name                #Col2Idx
      ENDPROPERTIES
      
      INDEXFIELDS
        #Col2
      ENDINDEXFIELDS
      
    ENDINDICES
    REFERENCES
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
      Version: 3
      SOURCE #convert
        #real convert(boolean _convert2Decaliter, ItemVolume _unitVolume, real _valueFrom)
        #{
        #    #DEFINE.Liter       ("л")
        #    #DEFINE.Decaliter   ("дкл")
        #
        #    if (_convert2Decaliter)
        #        return UnitConvert::valueConvert(_valueFrom * _unitVolume, #Liter, #Decaliter, "");
        #    else
        #        return _valueFrom;
        #}
      ENDSOURCE
      SOURCE #insert
        #public void insert()
        #{
        #    super();
        #
        #    this.Col9   = 0;
        #    this.Col10  = this.Col7 + this.Col8 + this.Col9;
        #    this.Col11  = 0;
        #    this.Col12  = 0;
        #    this.Col13  = this.Col11 + this.Col12;
        #    this.Col15  = 0;
        #    this.Col17  = this.Col14 + this.Col15 + this.Col16;
        #    this.Col18  = this.Col6 + this.Col10 - this.Col17;
        #
        #    this.write();
        #    TmpAlcoDeclApp12T1DataCopy::insertLine(this); // TODO Удалить после отладки
        #}
      ENDSOURCE
      SOURCE #insertLine
        #private void insertLine(ItemId              _itemId,
        #                        ItemVolume          _unitVolume,
        #                        boolean             _convert2Decaliter,
        #                        DimensionDepartment _dimDepartment,
        #                        Name                _col1,
        #                        OKP_alcoId          _col2,
        #                        ProducerId          _producerId,
        #                        ProducerName        _col3,
        #                        LicenseId           _licenseId, // MIL 17.08.2012 CU_00236_2
        #                        INN_RU              _col4,
        #                        KPPU_RU             _col5,
        #                        Decaliter           _col6,
        #                        Decaliter           _col7,
        #                        Decaliter           _col8,
        #                        Decaliter           _col14,
        #                        Decaliter           _col16)
        #{
        #    ;
        #
        #    ttsBegin;
        #    this.ItemId         = _itemId;
        #    this.DimDepartment  = _dimDepartment;
        #    this.ProducerId     = _producerId;
        #    this.LicenseId      = _licenseId; // MIL 17.08.2012 CU_00236_2
        #
        #    this.Col1           = _col1;
        #    this.Col2           = _col2;
        #    this.Col3           = _col3;
        #    this.Col4           = _col4;
        #    this.Col5           = _col5;
        #    this.Col6           = this.convert(_convert2Decaliter, _unitVolume, _col6);
        #    this.Col7           = this.convert(_convert2Decaliter, _unitVolume, _col7);
        #    this.Col8           = this.convert(_convert2Decaliter, _unitVolume, _col8);
        #    this.Col14          = this.convert(_convert2Decaliter, _unitVolume, _col14);
        #    this.Col16          = this.convert(_convert2Decaliter, _unitVolume, _col16);
        #
        #    this.insert();
        #    ttsCommit;
        #}
      ENDSOURCE
      SOURCE #buildQueryLines
        #static Query buildQueryLines(OKP_alcoId             _col2,
        #                             DimensionDepartment    _dimDepartment  = "",
        #                             ProducerId             _producerId     = 0)
        #{
        #    Query                   ret = new Query();
        #    QueryBuildDataSource    qbds;
        #    QueryBuildFieldList     qbfl;
        #    ;
        #
        #    qbds    = ret.addDataSource(tablenum(TmpAlcoDeclApp12T1Data));
        #    qbds.addRange(fieldnum(TmpAlcoDeclApp12T1Data, Col2)).value(_col2);
        #    qbfl    = qbds.fields();
        #
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp12T1Data, Col2), SortOrder::Ascending);
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp12T1Data, Col1));
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp12T1Data, Col3));
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp12T1Data, Col4));
        #
        #    if (_dimDepartment)
        #    {
        #        qbds.addSortField(fieldnum(TmpAlcoDeclApp12T1Data, DimDepartment));
        #        qbds.addRange(fieldnum(TmpAlcoDeclApp12T1Data, DimDepartment)).value(_dimDepartment);
        #    }
        #
        #    if (_producerId)
        #        qbds.addRange(fieldnum(TmpAlcoDeclApp12T1Data, ProducerId)).value(queryValue(_producerId));
        #
        #    qbds.orderMode(OrderMode::GroupBy);
        #
        #    qbfl.addField(fieldnum(TmpAlcoDeclApp12T1Data, Col6), SelectionField::Sum);
        #    qbfl.addField(fieldnum(TmpAlcoDeclApp12T1Data, Col7), SelectionField::Sum);
        #    qbfl.addField(fieldnum(TmpAlcoDeclApp12T1Data, Col8), SelectionField::Sum);
        #    qbfl.addField(fieldnum(TmpAlcoDeclApp12T1Data, Col9), SelectionField::Sum);
        #    qbfl.addField(fieldnum(TmpAlcoDeclApp12T1Data, Col10), SelectionField::Sum);
        #    qbfl.addField(fieldnum(TmpAlcoDeclApp12T1Data, Col11), SelectionField::Sum);
        #    qbfl.addField(fieldnum(TmpAlcoDeclApp12T1Data, Col13), SelectionField::Sum);
        #    qbfl.addField(fieldnum(TmpAlcoDeclApp12T1Data, Col14), SelectionField::Sum);
        #    qbfl.addField(fieldnum(TmpAlcoDeclApp12T1Data, Col15), SelectionField::Sum);
        #    qbfl.addField(fieldnum(TmpAlcoDeclApp12T1Data, Col17), SelectionField::Sum);
        #    qbfl.addField(fieldnum(TmpAlcoDeclApp12T1Data, Col18), SelectionField::Sum);
        #
        #    if (_dimDepartment)
        #    {
        #        qbfl.addField(fieldnum(TmpAlcoDeclApp12T1Data, Col12), SelectionField::Sum);
        #        qbfl.addField(fieldnum(TmpAlcoDeclApp12T1Data, Col16), SelectionField::Sum);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #existOKP_alcoId
        #static boolean existOKP_alcoId(TmpAlcoDeclApp12T1Data  _tmpAlcoDeclApp12T1Data, OKP_alcoId _alcoId, DimensionDepartment _dimDepartment = "")
        #{
        #    if (_alcoId)
        #    {
        #        select firstonly _tmpAlcoDeclApp12T1Data
        #            where   _tmpAlcoDeclApp12T1Data.Col2             == _alcoId
        #                &&  (_tmpAlcoDeclApp12T1Data.DimDepartment   == _dimDepartment || !_dimDepartment);
        #    }
        #
        #    return (_tmpAlcoDeclApp12T1Data.RecId);
        #}
      ENDSOURCE
      SOURCE #prepareData
        #server static TmpAlcoDeclApp12T1Data prepareData(JuridicalPersonId  _juridicalPersonId,
        #                                                 TransDate          _fromDate,
        #                                                 TransDate          _toDate,
        #                                                 boolean            _convert2Decaliter,
        #                                                 ItemId             _itemId                     = "",
        #                                                 boolean            _includeInventJournalTrans  = false,
        #                                                 boolean            _excludeSales               = false)
        #{
        #    TmpAlcoDeclApp12T1Data  dynamicData;
        #
        #    Date                    startDate   = mkdate(01, 01, year(_fromDate));
        #    ProducerItem            producerItem;
        #    ProducerTable           producerTable;
        #    InventTable             inventTable;
        #    PurchTable              purchTable;
        #    SalesTable              salesTable;
        #    InventLocation          inventLocation;
        #    OKP_ALCO_RU             OKP_ALCO_RU;
        #    VendInvoiceTrans        vendInvoiceTrans;
        #    CustInvoiceTrans        custInvoiceTrans;
        #    PurchPlanningRemains    purchPlanningRemains;
        #    InventJournalTable      inventJournalTable;
        #    InventJournalTrans      inventJournalTrans;
        #//+ MIL 17.08.2012 CU_00236_2
        #    VendTable               vendTable;
        #    LicenseTable            licenseTable;
        #//- MIL 17.08.2012 CU_00236_2
        #    Decaliter               col7;
        #    Decaliter               col8;
        #    Decaliter               col14;
        #    Decaliter               col16;
        #    ;
        #
        #    TmpAlcoDeclApp12T1DataCopy::clear(); // TODO Удалить после отладки
        #    dynamicData.clear();
        #
        #    while
        #        select ItemId, ProducerAccount from producerItem
        #            index hint ProducerAccountItemIdIdx
        #            where   (producerItem.ItemId             == _itemId || !_itemId)
        #            join AccountNum, Name, INN_RU, KPP_RU, ProducerId from producerTable
        #                index hint AccountIdx
        #                where   producerTable.AccountNum    == producerItem.ProducerAccount
        #    {
        #        col7            = 0;
        #        col8            = 0;
        #        col14           = 0;
        #        col16           = 0;
        #        inventTable     = InventTable::find(producerItem.ItemId);
        #        OKP_ALCO_RU     = OKP_ALCO_RU::find(inventTable.OKP_alcoId);
        #        vendTable       = VendTable::find(inventTable.PrimaryVendorId); // MIL 17.08.2012 CU_00236_2
        #
        #        if (OKP_ALCO_RU.OKP_alcoType != OKP_alcoType::Beer) continue;
        #
        #        while
        #            select ItemId, InventLocationId, RemainQty from purchPlanningRemains
        #                where   purchPlanningRemains.ItemId     == producerItem.ItemId
        #                    &&  purchPlanningRemains.FixedDate  == startDate
        #        {
        #            inventLocation  = InventLocation::find(purchPlanningRemains.InventLocationId);
        #
        #            if (inventLocation.JuridicalPersonId != _juridicalPersonId) continue;
        #
        #            dynamicData.insertLine(inventTable.ItemId,
        #                                   inventTable.UnitVolume,
        #                                   _convert2Decaliter,
        #                                   inventLocation.DimDepartment,
        #
        #                                   OKP_ALCO_RU.Name,
        #                                   OKP_ALCO_RU.OKP_alcoId,
        #                                   producerTable.ProducerId,
        #                                   producerTable.Name,
        #                                   LicenseTable::find(vendTable.AccountNum, purchPlanningRemains.FixedDate).LicenseId, // MIL 17.08.2012 CU_00236_2
        #                                   producerTable.INN_RU,
        #                                   producerTable.KPP_RU,
        #                                   purchPlanningRemains.RemainQty,
        #                                   0,
        #                                   0,
        #                                   0,
        #                                   0);
        #        }
        #
        #        while
        #            select PurchID, ItemId, Qty from vendInvoiceTrans
        #                index hint ItemIdIdx
        #                where   vendInvoiceTrans.ItemId         == producerItem.ItemId
        #                    &&  (vendInvoiceTrans.InvoiceDate   >= _fromDate || !_fromDate)
        #                    &&  (vendInvoiceTrans.InvoiceDate   <= _toDate   || !_toDate)
        #        {
        #            purchTable      = PurchTable::find(vendInvoiceTrans.PurchID);
        #            inventLocation  = InventLocation::find(purchTable.InventLocationId);
        #            licenseTable    = LicenseTable::find(vendTable.AccountNum, vendInvoiceTrans.InvoiceDate); // MIL 17.08.2012 CU_00236_2
        #
        #            if (inventLocation.JuridicalPersonId != _juridicalPersonId) continue;
        #
        #            if (inventLocation.InventLocationType   == InventLocationType::Shop)
        #            {
        #                if (VendTable::find(purchTable.OrderAccount).VendProducer == NoYes::Yes)
        #                {
        #                    col7    = vendInvoiceTrans.Qty;
        #                    col8    = 0;
        #                }
        #                else
        #                {
        #                    col7    = 0;
        #                    col8    = vendInvoiceTrans.Qty;
        #                }
        #
        #                dynamicData.insertLine(inventTable.ItemId,
        #                                       inventTable.UnitVolume,
        #                                       _convert2Decaliter,
        #                                       inventLocation.DimDepartment,
        #
        #                                       OKP_ALCO_RU.Name,
        #                                       OKP_ALCO_RU.OKP_alcoId,
        #                                       producerTable.ProducerId,
        #                                       producerTable.Name,
        #                                       licenseTable.LicenseId, // MIL 17.08.2012 CU_00236_2
        #                                       producerTable.INN_RU,
        #                                       producerTable.KPP_RU,
        #                                       0,
        #                                       col7,
        #                                       col8,
        #                                       0,
        #                                       0);
        #            }
        #            else if (inventLocation.InventLocationType  == InventLocationType::Damage)
        #            {
        #                if (_excludeSales) continue;
        #
        #                col14   = 0;
        #                col16   = -vendInvoiceTrans.Qty;
        #
        #                dynamicData.insertLine(inventTable.ItemId,
        #                                       inventTable.UnitVolume,
        #                                       _convert2Decaliter,
        #                                       inventLocation.DimDepartment,
        #
        #                                       OKP_ALCO_RU.Name,
        #                                       OKP_ALCO_RU.OKP_alcoId,
        #                                       producerTable.ProducerId,
        #                                       producerTable.Name,
        #                                       licenseTable.LicenseId, // MIL 17.08.2012 CU_00236_2
        #                                       producerTable.INN_RU,
        #                                       producerTable.KPP_RU,
        #                                       0,
        #                                       0,
        #                                       0,
        #                                       col14,
        #                                       col16);
        #            }
        #        }
        #
        #        if (!_excludeSales)
        #        while
        #            select SalesId, ItemId, Qty from custInvoiceTrans
        #                index hint ItemIdIdx
        #                where   custInvoiceTrans.ItemId         == producerItem.ItemId
        #                    &&  (custInvoiceTrans.InvoiceDate   >= _fromDate || !_fromDate)
        #                    &&  (custInvoiceTrans.InvoiceDate   <= _toDate   || !_toDate)
        #        {
        #            salesTable      = SalesTable::find(custInvoiceTrans.SalesId);
        #            inventLocation  = InventLocation::find(salesTable.InventLocationId);
        #            licenseTable    = LicenseTable::find(vendTable.AccountNum, custInvoiceTrans.InvoiceDate); // MIL 17.08.2012 CU_00236_2
        #
        #            if (inventLocation.JuridicalPersonId != _juridicalPersonId) continue;
        #
        #            if (inventLocation.InventLocationType       == InventLocationType::Shop)
        #            {
        #                col14   = custInvoiceTrans.Qty;
        #                col16   = 0;
        #            }
        #            else if (inventLocation.InventLocationType  == InventLocationType::Damage)
        #            {
        #                col14   = 0;
        #                col16   = custInvoiceTrans.Qty;
        #            }
        #
        #            dynamicData.insertLine(inventTable.ItemId,
        #                                   inventTable.UnitVolume,
        #                                   _convert2Decaliter,
        #                                   inventLocation.DimDepartment,
        #
        #                                   OKP_ALCO_RU.Name,
        #                                   OKP_ALCO_RU.OKP_alcoId,
        #                                   producerTable.ProducerId,
        #                                   producerTable.Name,
        #                                   licenseTable.RecId, // MIL 17.08.2012 CU_00236_2
        #                                   producerTable.INN_RU,
        #                                   producerTable.KPP_RU,
        #                                   0,
        #                                   0,
        #                                   0,
        #                                   col14,
        #                                   col16);
        #        }
        #
        #        if (!_includeInventJournalTrans) continue;
        #
        #        while
        #            select inventJournalTrans
        #                index hint KeyIdx
        #                where   inventJournalTrans.ItemId       == producerItem.ItemId
        #                    &&  (inventJournalTrans.TransDate   >= _fromDate || !_fromDate)
        #                    &&  (inventJournalTrans.TransDate   <= _toDate   || !_toDate)
        #        {
        #            inventJournalTable  = inventJournalTable::find(inventJournalTrans.JournalId);
        #            licenseTable        = LicenseTable::find(vendTable.AccountNum, inventJournalTrans.TransDate); // MIL 17.08.2012 CU_00236_2
        #
        #            if (inventJournalTable.Posted           != NoYes::Yes                   ||
        #                !(inventJournalTable.JournalType    != inventJournalType::Count     ||
        #                  inventJournalTable.JournalType    != inventJournalType::Movement) ||
        #                !(inventJournalTable.JournalNameId  == "МОЛ"        ||
        #                  inventJournalTable.JournalNameId  == "БракМаг"    ||
        #                  inventJournalTable.JournalNameId  == "ИНВ"))
        #                continue;
        #
        #            inventLocation      = InventLocation::find(inventJournalTable.InventLocationId);
        #
        #            if (inventLocation.JuridicalPersonId != _juridicalPersonId) continue;
        #
        #            col14   = -inventJournalTrans.Qty;
        #            col16   = 0;
        #
        #            if (col14   == 1) info(inventJournalTable.JournalId);
        #
        #            dynamicData.insertLine(inventTable.ItemId,
        #                                   inventTable.UnitVolume,
        #                                   _convert2Decaliter,
        #                                   inventLocation.DimDepartment,
        #
        #                                   OKP_ALCO_RU.Name,
        #                                   OKP_ALCO_RU.OKP_alcoId,
        #                                   producerTable.ProducerId,
        #                                   producerTable.Name,
        #                                   licenseTable.LicenseId, // MIL 17.08.2012 CU_00236_2
        #                                   producerTable.INN_RU,
        #                                   producerTable.KPP_RU,
        #                                   0,
        #                                   0,
        #                                   0,
        #                                   col14,
        #                                   col16);
        #        }
        #    }
        #
        #    return dynamicData;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics Table : TmpAlcoDeclApp12T2Data unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #TmpAlcoDeclApp12T2Data
    Id 40196
    PROPERTIES
      Name                #TmpAlcoDeclApp12T2Data
      Label               #Временная таблица для данных приложения №12 таблицы 2
      Table               #TmpAlcoDeclApp12T2Data
      TitleField1         #ItemId
      TitleField2         #DimDepartment
      Temporary           #Yes
      ConfigurationKey    #LedgerBasic
      SecurityKey         #ProducerTables
      ClusterIndex        #InventLocationIdx
    ENDPROPERTIES
    
    FIELDS
      FIELD #ItemId
        Id 40001
        STRING
        PROPERTIES
          Name                #ItemId
          Table               #TmpAlcoDeclApp12T2Data
          ExtendedDataType    
            ARRAY 
              #ItemId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #DimDepartment
        Id 40002
        STRING
        PROPERTIES
          Name                #DimDepartment
          Table               #TmpAlcoDeclApp12T2Data
          ExtendedDataType    
            ARRAY 
              #DimensionDepartment
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col1
        Id 40003
        STRING
        PROPERTIES
          Name                #Col1
          Table               #TmpAlcoDeclApp12T2Data
          ExtendedDataType    
            ARRAY 
              #Name
              #
            ENDARRAY
          StringSize          #140
        ENDPROPERTIES
        
      FIELD #Col2
        Id 40004
        STRING
        PROPERTIES
          Name                #Col2
          Table               #TmpAlcoDeclApp12T2Data
          ExtendedDataType    
            ARRAY 
              #OKP_alcoId
              #
            ENDARRAY
          StringSize          #5
        ENDPROPERTIES
        
      FIELD #Col3
        Id 40005
        STRING
        PROPERTIES
          Name                #Col3
          Table               #TmpAlcoDeclApp12T2Data
          ExtendedDataType    
            ARRAY 
              #ProducerName
              #
            ENDARRAY
          StringSize          #140
        ENDPROPERTIES
        
      FIELD #Col4
        Id 40006
        STRING
        PROPERTIES
          Name                #Col4
          Table               #TmpAlcoDeclApp12T2Data
          ExtendedDataType    
            ARRAY 
              #INN_RU
              #
            ENDARRAY
          StringSize          #12
        ENDPROPERTIES
        
      FIELD #Col5
        Id 40007
        STRING
        PROPERTIES
          Name                #Col5
          Table               #TmpAlcoDeclApp12T2Data
          ExtendedDataType    
            ARRAY 
              #KPPU_RU
              #
            ENDARRAY
          StringSize          #9
        ENDPROPERTIES
        
      FIELD #Col6
        Id 40008
        STRING
        PROPERTIES
          Name                #Col6
          Table               #TmpAlcoDeclApp12T2Data
          ExtendedDataType    
            ARRAY 
              #VendName
              #
            ENDARRAY
          StringSize          #140
        ENDPROPERTIES
        
      FIELD #Col7
        Id 40009
        STRING
        PROPERTIES
          Name                #Col7
          Table               #TmpAlcoDeclApp12T2Data
          ExtendedDataType    
            ARRAY 
              #INN_RU
              #
            ENDARRAY
          StringSize          #12
        ENDPROPERTIES
        
      FIELD #Col8
        Id 40010
        STRING
        PROPERTIES
          Name                #Col8
          Table               #TmpAlcoDeclApp12T2Data
          ExtendedDataType    
            ARRAY 
              #KPPU_RU
              #
            ENDARRAY
          StringSize          #9
        ENDPROPERTIES
        
      FIELD #Col11
        Id 40014
        DATE
        PROPERTIES
          Name                #Col11
          Table               #TmpAlcoDeclApp12T2Data
          ExtendedDataType    
            ARRAY 
              #LicenseCardFinishDate_RU
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col13
        Id 40015
        DATE
        PROPERTIES
          Name                #Col13
          Table               #TmpAlcoDeclApp12T2Data
          ExtendedDataType    
            ARRAY 
              #TransDate
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col14
        Id 40016
        STRING
        PROPERTIES
          Name                #Col14
          Table               #TmpAlcoDeclApp12T2Data
          ExtendedDataType    
            ARRAY 
              #VendInvoiceId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #Col16
        Id 40017
        REAL
        PROPERTIES
          Name                #Col16
          Table               #TmpAlcoDeclApp12T2Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #LicenseId
        Id 40020
        INT
        PROPERTIES
          Name                #LicenseId
          Table               #TmpAlcoDeclApp12T2Data
          ExtendedDataType    
            ARRAY 
              #LicenseId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col9
        Id 40021
        DATE
        PROPERTIES
          Name                #Col9
          Table               #TmpAlcoDeclApp12T2Data
          ExtendedDataType    
            ARRAY 
              #TransDate
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Col10
        Id 40022
        STRING
        PROPERTIES
          Name                #Col10
          Table               #TmpAlcoDeclApp12T2Data
          ExtendedDataType    
            ARRAY 
              #VendInvoiceId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #Col12
        Id 40023
        REAL
        PROPERTIES
          Name                #Col12
          Table               #TmpAlcoDeclApp12T2Data
          ExtendedDataType    
            ARRAY 
              #Decaliter
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #VendId
        Id 40024
        INT
        PROPERTIES
          Name                #VendId
          Table               #TmpAlcoDeclApp12T2Data
          ExtendedDataType    
            ARRAY 
              #VendId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #ProducerId
        Id 40025
        INT
        PROPERTIES
          Name                #ProducerId
          Table               #TmpAlcoDeclApp12T2Data
          ExtendedDataType    
            ARRAY 
              #ProducerId
              #
            ENDARRAY
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
    ENDGROUPS
    
    INDICES
      #InventLocationIdx
      Id 40001
      PROPERTIES
        Name                #InventLocationIdx
      ENDPROPERTIES
      
      INDEXFIELDS
        #DimDepartment
      ENDINDEXFIELDS
      
      #InventLocationItemIdx
      Id 40002
      PROPERTIES
        Name                #InventLocationItemIdx
      ENDPROPERTIES
      
      INDEXFIELDS
        #ItemId
        #DimDepartment
      ENDINDEXFIELDS
      
      #IdIdx
      Id 40003
      PROPERTIES
        Name                #IdIdx
      ENDPROPERTIES
      
      INDEXFIELDS
        #ItemId
        #LicenseId
        #ProducerId
        #VendId
      ENDINDEXFIELDS
      
    ENDINDICES
    REFERENCES
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
      Version: 3
      SOURCE #convert
        #real convert(boolean _convert2Decaliter, ItemVolume _unitVolume, real _valueFrom)
        #{
        #    #DEFINE.Liter       ("л")
        #    #DEFINE.Decaliter   ("дкл")
        #
        #    if (_convert2Decaliter)
        #        return UnitConvert::valueConvert(_valueFrom * _unitVolume, #Liter, #Decaliter, "");
        #    else
        #        return _valueFrom;
        #}
      ENDSOURCE
      SOURCE #insert
        #public void insert()
        #{
        #    super();
        #
        #    TmpAlcoDeclApp12T2DataCopy::insertLine(this); // TODO Удалить после отладки
        #}
        #
      ENDSOURCE
      SOURCE #insertLine
        #private void insertLine(ItemId              _itemId,
        #                        ItemVolume          _unitVolume,
        #                        boolean             _convert2Decaliter,
        #                        DimensionDepartment _dimDepartment,
        #                        Name                _col1,
        #                        OKP_alcoId          _col2,
        #                        ProducerId          _producerId,
        #                        ProducerName        _col3,
        #                        INN_RU              _col4,
        #                        KPPU_RU             _col5,
        #                        VendId              _vendId,
        #                        VendName            _col6,
        #                        INN_RU              _col7,
        #                        KPPU_RU             _col8,
        #                        TransDate           _col9,
        #                        VendInvoiceId       _col10,
        #                        Decaliter           _col12)
        #{
        #    ttsBegin;
        #    this.ItemId         = _itemId;
        #    this.DimDepartment  = _dimDepartment;
        #    this.ProducerId     = _producerId;
        #    this.VendId         = _vendId;
        #
        #    this.Col1           = _col1;
        #    this.Col2           = _col2;
        #    this.Col3           = _col3;
        #    this.Col4           = _col4;
        #    this.Col5           = _col5;
        #    this.Col6           = _col6;
        #    this.Col7           = _col7;
        #    this.Col8           = _col8;
        #    this.Col9           = _col9;
        #    this.Col10          = _col10;
        #    this.Col12          = this.convert(_convert2Decaliter, _unitVolume, _col12);
        #
        #    this.insert();
        #    ttsCommit;
        #}
      ENDSOURCE
      SOURCE #buildQueryLines
        #static Query buildQueryLines(OKP_alcoId             _col2,
        #                             DimensionDepartment    _dimDepartment  = "",
        #                             ProducerId             _producerId     = 0,
        #                             VendId                 _vendId         = 0)
        #{
        #    Query                   ret = new Query();
        #    QueryBuildDataSource    qbds;
        #    QueryBuildFieldList     qbfl;
        #    ;
        #
        #    qbds    = ret.addDataSource(tablenum(TmpAlcoDeclApp12T2Data));
        #    qbds.addRange(fieldnum(TmpAlcoDeclApp12T2Data, Col2)).value(_col2);
        #    qbfl    = qbds.fields();
        #
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp12T2Data, Col2), SortOrder::Ascending);
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp12T2Data, Col1));
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp12T2Data, Col3));
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp12T2Data, Col4));
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp12T2Data, Col5));
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp12T2Data, Col6));
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp12T2Data, Col7));
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp12T2Data, Col8));
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp12T2Data, Col9));
        #    qbds.addSortField(fieldnum(TmpAlcoDeclApp12T2Data, Col10));
        #
        #    if (_dimDepartment)
        #    {
        #        qbds.addSortField(fieldnum(TmpAlcoDeclApp12T2Data, DimDepartment));
        #        qbds.addRange(fieldnum(TmpAlcoDeclApp12T2Data, DimDepartment)).value(_dimDepartment);
        #    }
        #
        #    if (_producerId)
        #    {
        #        qbds.addSortField(fieldnum(TmpAlcoDeclApp12T2Data, ProducerId));
        #        qbds.addRange(fieldnum(TmpAlcoDeclApp12T2Data, ProducerId)).value(queryValue(_producerId));
        #    }
        #
        #    if (_vendId)
        #    {
        #        qbds.addSortField(fieldnum(TmpAlcoDeclApp12T2Data, VendId));
        #        qbds.addRange(fieldnum(TmpAlcoDeclApp12T2Data, VendId)).value(queryValue(_vendId));
        #    }
        #
        #    qbds.orderMode(OrderMode::GroupBy);
        #
        #    qbfl.addField(fieldnum(TmpAlcoDeclApp12T2Data, Col12), SelectionField::Sum);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #existOKP_alcoId
        #public static boolean existOKP_alcoId(TmpAlcoDeclApp12T2Data  _tmpAlcoDeclApp12T2Data, OKP_alcoId _alcoId)
        #{
        #    if (_alcoId)
        #    {
        #        select firstonly _tmpAlcoDeclApp12T2Data
        #            where   _tmpAlcoDeclApp12T2Data.Col2   == _alcoId;
        #    }
        #
        #    return (_tmpAlcoDeclApp12T2Data.RecId != 0);
        #}
      ENDSOURCE
      SOURCE #existVendor
        #static boolean existVendor(TmpAlcoDeclApp12T2Data   _tmpAlcoDeclApp12T2Data,
        #                           OKP_alcoId               _col2,
        #                           DimensionDepartment      _dimDepartment  = "",
        #                           ProducerId               _producerId     = 0,
        #                           VendId                   _vendId         = 0)
        #{
        #    select sum(Col12) from _tmpAlcoDeclApp12T2Data
        #        where   _tmpAlcoDeclApp12T2Data.Col2             == _col2
        #            &&  (_tmpAlcoDeclApp12T2Data.DimDepartment   == _dimDepartment || !_dimDepartment)
        #            &&  (_tmpAlcoDeclApp12T2Data.ProducerId      == _producerId || !_producerId)
        #            &&  (_tmpAlcoDeclApp12T2Data.VendId          == _vendId || !_vendId);
        #
        #    return _tmpAlcoDeclApp12T2Data.Col12 ? true : false;
        #}
      ENDSOURCE
      SOURCE #prepareData
        #static TmpAlcoDeclApp12T2Data prepareData(JuridicalPersonId _juridicalPersonId,
        #                                          TransDate         _fromDate,
        #                                          TransDate         _toDate,
        #                                          boolean           _convert2Decaliter,
        #                                          ItemId            _itemId = "")
        #{
        #    TmpAlcoDeclApp12T2Data  dynamicData;
        #
        #    ProducerItem            producerItem;
        #    ProducerTable           producerTable;
        #    InventTable             inventTable;
        #    OKP_ALCO_RU             OKP_ALCO_RU;
        #    VendTable               vendTable;
        #    VendInvoiceTrans        vendInvoiceTrans;
        #    InventDim               inventDim;
        #    InventLocation          inventLocation;
        #    ;
        #
        #    TmpAlcoDeclApp12T2DataCopy::clear(); // TODO Удалить после отладки
        #    dynamicData.clear();
        #
        #    while
        #        select ItemId, ProducerAccount from producerItem
        #            index hint ProducerAccountItemIdIdx
        #            where   (producerItem.ItemId             == _itemId || !_itemId)
        #            join AccountNum, Name, INN_RU, KPP_RU, ProducerId from producerTable
        #                where   producerTable.AccountNum    == producerItem.ProducerAccount
        #    {
        #        inventTable     = InventTable::find(producerItem.ItemId);
        #        OKP_ALCO_RU     = OKP_ALCO_RU::find(inventTable.OKP_alcoId);
        #
        #        if (OKP_ALCO_RU.OKP_alcoType != OKP_alcoType::Beer) continue;
        #
        #        vendTable       = VendTable::find(inventTable.PrimaryVendorId);
        #
        #        while
        #            select InvoiceId, InvoiceDate, PurchID, ItemId, Qty from vendInvoiceTrans
        #                index hint InvoiceIdx
        #                where   vendInvoiceTrans.ItemId         == producerItem.ItemId
        #                    &&  (vendInvoiceTrans.InvoiceDate   >= _fromDate || !_fromDate)
        #                    &&  (vendInvoiceTrans.InvoiceDate   <= _toDate   || !_toDate)
        #                join inventDim
        #                    where   inventDim.inventDimId       == vendInvoiceTrans.InventDimId
        #                join inventLocation
        #                    where   inventLocation.InventLocationId     == inventDim.InventLocationId   &&
        #                            inventLocation.JuridicalPersonId    == _juridicalPersonId            &&
        #                            inventLocation.InventLocationType   == InventLocationType::Shop
        #        {
        #//            purchTable      = PurchTable::find(vendInvoiceTrans.PurchID);
        #//            inventLocation  = InventLocation::find(purchTable.InventLocationId);
        #
        #//            if (inventLocation.JuridicalPersonId != juridicalPersonId) continue;
        #
        #            dynamicData.insertLine(inventTable.ItemId,
        #                                   inventTable.UnitVolume,
        #                                   _convert2Decaliter,
        #                                   inventLocation.DimDepartment,
        #                                   OKP_ALCO_RU.Name,
        #                                   OKP_ALCO_RU.OKP_alcoId,
        #                                   producerTable.ProducerId,
        #                                   producerTable.Name,
        #                                   producerTable.INN_RU,
        #                                   producerTable.KPP_RU,
        #                                   vendTable.VendId,
        #                                   vendTable.Name,
        #                                   vendTable.INN_RU,
        #                                   vendTable.KPP_RU,
        #                                   vendInvoiceTrans.InvoiceDate,
        #                                   vendInvoiceTrans.InvoiceId,
        #                                   vendInvoiceTrans.Qty);
        #        }
        #    }
        #
        #    return dynamicData;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics Table : VendTable unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #VendTable
    Id 505
    PROPERTIES
      Name                #VendTable
      Label               #@SYS9449
      SearchLinkRefName   #EPVendTableInfo
      Table               #VendTable
      TitleField1         #AccountNum
      TitleField2         #Name
      ConfigurationKey    #LedgerBasic
      SecurityKey         #VendTables
      CacheLookup         #NotInTTS
      CreateRecIdIndex    #Yes
      SaveDataPerCompany  #No
      TableGroup          #Main
      PrimaryIndex        #AccountIdx
      ClusterIndex        #AccountIdx
      AnalysisVisibility  #High
      ModifiedDate        #Yes
      ModifiedTime        #Yes
      ModifiedBy          #Yes
      CreatedDate         #Yes
      CreatedTime         #Yes
      CreatedBy           #Yes
    ENDPROPERTIES
    
    FIELDS
      FIELD #AccountNum
        Id 1
        STRING
        PROPERTIES
          Name                #AccountNum
          Mandatory           #Yes
          AllowEdit           #No
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendAccount
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #Name
        Id 2
        STRING
        PROPERTIES
          Name                #Name
          HelpText            #@SYS28170
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendName
              #
            ENDARRAY
          StringSize          #140
        ENDPROPERTIES
        
      FIELD #Address
        Id 3
        STRING
        PROPERTIES
          Name                #Address
          HelpText            #@SYS11555
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #Addressing
              #
            ENDARRAY
          StringSize          #250
        ENDPROPERTIES
        
      FIELD #Phone
        Id 4
        STRING
        PROPERTIES
          Name                #Phone
          HelpText            #@SYS297
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #Phone
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #TeleFax
        Id 5
        STRING
        PROPERTIES
          Name                #TeleFax
          HelpText            #@SYS6816
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #TeleFax
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #InvoiceAccount
        Id 6
        STRING
        PROPERTIES
          Name                #InvoiceAccount
          HelpText            #@SYS28168
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendInvoiceAccount
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #VendGroup
        Id 7
        STRING
        PROPERTIES
          Name                #VendGroup
          Label               #@SYS3815
          HelpText            #@SYS17189
          Mandatory           #Yes
          AllowEdit           #No
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendGroupId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #PaymTermId
        Id 8
        STRING
        PROPERTIES
          Name                #PaymTermId
          HelpText            #@SYS57525
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendPaymTermId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #CashDisc
        Id 9
        STRING
        PROPERTIES
          Name                #CashDisc
          HelpText            #@SYS15767
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendCashDiscCode
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Currency
        Id 10
        STRING
        PROPERTIES
          Name                #Currency
          HelpText            #@SYS20786
          Mandatory           #Yes
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendCurrencyCode
              #
            ENDARRAY
          StringSize          #3
        ENDPROPERTIES
        
      FIELD #CompanyIdNAF
        Id 11
        STRING
        PROPERTIES
          Name                #CompanyIdNAF
          Table               #VendTable
          AnalysisVisibility  #Low
          ExtendedDataType    
            ARRAY 
              #CompanyIdNAF
              #
            ENDARRAY
          StringSize          #4
        ENDPROPERTIES
        
      FIELD #LineDisc
        Id 12
        STRING
        PROPERTIES
          Name                #LineDisc
          HelpText            #@SYS7138
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendLineDiscCode
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #EnterpriseNumber
        Id 13
        STRING
        PROPERTIES
          Name                #EnterpriseNumber
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #TaxEnterpriseNumber
              #
            ENDARRAY
          StringSize          #50
        ENDPROPERTIES
        
      FIELD #Blocked
        Id 14
        ENUM
        PROPERTIES
          Name                #Blocked
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendBlocked
              #
            ENDARRAY
          EnumType            #CustVendorBlocked
        ENDPROPERTIES
        
      FIELD #OneTimeVendor
        Id 15
        ENUM
        PROPERTIES
          Name                #OneTimeVendor
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #OneTimeSupplier
              #
            ENDARRAY
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #Dimension
        Id 16
        STRING
        PROPERTIES
          Name                #Dimension
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #Dimension
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Telex
        Id 17
        STRING
        PROPERTIES
          Name                #Telex
          HelpText            #@SYS137
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #Telex
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #PriceGroup
        Id 18
        STRING
        PROPERTIES
          Name                #PriceGroup
          HelpText            #@SYS5185
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendPriceGroup
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #MultiLineDisc
        Id 19
        STRING
        PROPERTIES
          Name                #MultiLineDisc
          Label               #@SYS11440
          HelpText            #@SYS8892
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendMultiLineDiscCode
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #EndDisc
        Id 20
        STRING
        PROPERTIES
          Name                #EndDisc
          HelpText            #@SYS893
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendEndDiscCode
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #PaymId
        Id 21
        STRING
        PROPERTIES
          Name                #PaymId
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendPaymId
              #
            ENDARRAY
          StringSize          #200
        ENDPROPERTIES
        
      FIELD #CustAccount
        Id 22
        STRING
        PROPERTIES
          Name                #CustAccount
          HelpText            #@SYS1414
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #CustAccount
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #VATNum
        Id 23
        STRING
        PROPERTIES
          Name                #VATNum
          HelpText            #@SYS1339
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VATNum
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #CountryRegionId
        Id 24
        STRING
        PROPERTIES
          Name                #CountryRegionId
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #AddressCountryRegionId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #InventLocation
        Id 25
        STRING
        PROPERTIES
          Name                #InventLocation
          HelpText            #@SYS16977
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #InventLocationId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #YourAccountNum
        Id 26
        STRING
        PROPERTIES
          Name                #YourAccountNum
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendAccountExt
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #DlvTerm
        Id 27
        STRING
        PROPERTIES
          Name                #DlvTerm
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendDlvTermId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #DlvMode
        Id 28
        STRING
        PROPERTIES
          Name                #DlvMode
          HelpText            #@SYS6488
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendDlvModeId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #BankAccount
        Id 29
        STRING
        PROPERTIES
          Name                #BankAccount
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendBankAccountId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #PaymMode
        Id 30
        STRING
        PROPERTIES
          Name                #PaymMode
          HelpText            #@SYS12830
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendPaymMode
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #PaymSpec
        Id 31
        STRING
        PROPERTIES
          Name                #PaymSpec
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #PaymSpec
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #MarkupGroup
        Id 32
        STRING
        PROPERTIES
          Name                #MarkupGroup
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendMarkupGroupId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #ClearingPeriod
        Id 33
        STRING
        PROPERTIES
          Name                #ClearingPeriod
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendClearingPeriod
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #ZipCode
        Id 34
        STRING
        PROPERTIES
          Name                #ZipCode
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #AddressZipCodeId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #State
        Id 35
        STRING
        PROPERTIES
          Name                #State
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #AddressStateId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #County
        Id 36
        STRING
        PROPERTIES
          Name                #County
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #AddressCountyId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #URL
        Id 37
        STRING
        PROPERTIES
          Name                #URL
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #URL
              #
            ENDARRAY
          StringSize          #255
        ENDPROPERTIES
        
      FIELD #Email
        Id 38
        STRING
        PROPERTIES
          Name                #Email
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #Email
              #
            ENDARRAY
          StringSize          #80
        ENDPROPERTIES
        
      FIELD #CellularPhone
        Id 39
        STRING
        PROPERTIES
          Name                #CellularPhone
          HelpText            #@SYS28167
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #PhoneMobile
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #PhoneLocal
        Id 40
        STRING
        PROPERTIES
          Name                #PhoneLocal
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #PhoneLocal
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #CompanyIdSiret
        Id 41
        STRING
        PROPERTIES
          Name                #CompanyIdSiret
          Table               #VendTable
          AnalysisVisibility  #Low
          ExtendedDataType    
            ARRAY 
              #CompanyIdSiret
              #
            ENDARRAY
          StringSize          #14
        ENDPROPERTIES
        
      FIELD #TaxGroup
        Id 42
        STRING
        PROPERTIES
          Name                #TaxGroup
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #TaxGroup
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #FreightZone
        Id 43
        STRING
        PROPERTIES
          Name                #FreightZone
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendFreightZoneId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #MinorityOwned
        Id 44
        ENUM
        PROPERTIES
          Name                #MinorityOwned
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #MinorityOwner
              #
            ENDARRAY
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #FemaleOwned
        Id 45
        ENUM
        PROPERTIES
          Name                #FemaleOwned
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #FemaleOwner
              #
            ENDARRAY
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #CreditRating
        Id 46
        STRING
        PROPERTIES
          Name                #CreditRating
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendCreditRating
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #CreditMax
        Id 47
        REAL
        PROPERTIES
          Name                #CreditMax
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendCreditMaxMST
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Tax1099Reports
        Id 48
        ENUM
        PROPERTIES
          Name                #Tax1099Reports
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #Tax1099Reporting
              #
            ENDARRAY
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #Tax1099RegNum
        Id 49
        STRING
        PROPERTIES
          Name                #Tax1099RegNum
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #Tax1099RegNum
              #
            ENDARRAY
          StringSize          #11
        ENDPROPERTIES
        
      FIELD #PaymSched
        Id 50
        STRING
        PROPERTIES
          Name                #PaymSched
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendPaymSchedId
              #
            ENDARRAY
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #Tax1099Box
        Id 51
        STRING
        PROPERTIES
          Name                #Tax1099Box
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #Tax1099Box
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #NameAlias
        Id 52
        STRING
        PROPERTIES
          Name                #NameAlias
          Table               #VendTable
          AliasFor            #AccountNum
          ExtendedDataType    
            ARRAY 
              #VendTableAlias
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #ItemBuyerGroupId
        Id 53
        STRING
        PROPERTIES
          Name                #ItemBuyerGroupId
          Mandatory           #Yes
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #ItemBuyerGroupId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #ContactPersonId
        Id 54
        STRING
        PROPERTIES
          Name                #ContactPersonId
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #ContactPersonId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #PurchPoolId
        Id 55
        STRING
        PROPERTIES
          Name                #PurchPoolId
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendPurchPoolId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #PurchAmountPurchaseOrder
        Id 56
        ENUM
        PROPERTIES
          Name                #PurchAmountPurchaseOrder
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #PurchAmountPurchaseOrder
              #
            ENDARRAY
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #InclTax
        Id 59
        ENUM
        PROPERTIES
          Name                #InclTax
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #InclTax
              #
            ENDARRAY
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #VendItemGroupId
        Id 60
        STRING
        PROPERTIES
          Name                #VendItemGroupId
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendItemGroupId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #ResidenceForeignCountry
        Id 61
        STRING
        PROPERTIES
          Name                #ResidenceForeignCountry
          Visible             #No
          ConfigurationKey    #SysDeletedObjects40
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #AddressCountryRegionId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #numberSequenceGroup
        Id 62
        STRING
        PROPERTIES
          Name                #numberSequenceGroup
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #NumberSequenceGroupId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #LanguageId
        Id 63
        STRING
        PROPERTIES
          Name                #LanguageId
          HelpText            #@SYS9756
          Mandatory           #Yes
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendLanguageId
              #
            ENDARRAY
          StringSize          #5
        ENDPROPERTIES
        
      FIELD #PaymDayId
        Id 64
        STRING
        PROPERTIES
          Name                #PaymDayId
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendPaymDayId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #DestinationCodeId
        Id 65
        STRING
        PROPERTIES
          Name                #DestinationCodeId
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendDestinationCodeId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #LineOfBusinessId
        Id 66
        STRING
        PROPERTIES
          Name                #LineOfBusinessId
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendLineOfBusinessId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #SuppItemGroupId
        Id 67
        STRING
        PROPERTIES
          Name                #SuppItemGroupId
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendSuppItemGroupId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #BankCentralBankPurposeText
        Id 68
        STRING
        PROPERTIES
          Name                #BankCentralBankPurposeText
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #BankCentralBankPurposeText
              #
            ENDARRAY
          StringSize          #400
        ENDPROPERTIES
        
      FIELD #BankCentralBankPurposeCode
        Id 69
        STRING
        PROPERTIES
          Name                #BankCentralBankPurposeCode
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #BankCentralBankPurposeCode
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #PrintModuleType
        Id 70
        ENUM
        PROPERTIES
          Name                #PrintModuleType
          Label               #@SYS54502
          Visible             #No
          Table               #VendTable
          EnumType            #ModuleVendPurchParameters
        ENDPROPERTIES
        
      FIELD #City
        Id 71
        STRING
        PROPERTIES
          Name                #City
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #AddressCity
              #
            ENDARRAY
          StringSize          #140
        ENDPROPERTIES
        
      FIELD #Street
        Id 72
        STRING
        PROPERTIES
          Name                #Street
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #AddressStreet
              #
            ENDARRAY
          StringSize          #250
        ENDPROPERTIES
        
      FIELD #OffsetAccount
        Id 73
        STRING
        PROPERTIES
          Name                #OffsetAccount
          Label               #@SYS11162
          HelpText            #@SYS11446
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #LedgerJournalAC
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #OffsetAccountType
        Id 74
        ENUM
        PROPERTIES
          Name                #OffsetAccountType
          HelpText            #@SYS23950
          Table               #VendTable
          EnumType            #LedgerJournalACType
        ENDPROPERTIES
        
      FIELD #PurchCalendarId
        Id 75
        STRING
        PROPERTIES
          Name                #PurchCalendarId
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #PurchCalendarId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Pager
        Id 76
        STRING
        PROPERTIES
          Name                #Pager
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #Pager
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #SMS
        Id 77
        STRING
        PROPERTIES
          Name                #SMS
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #SMS
              #
            ENDARRAY
          StringSize          #80
        ENDPROPERTIES
        
      FIELD #OrganizationNumber
        Id 78
        STRING
        PROPERTIES
          Name                #OrganizationNumber
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #OrganizationNumber
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #DEL_RefZipCode
        Id 79
        INT64
        PROPERTIES
          Name                #DEL_RefZipCode
          AllowEditOnCreate   #No
          AllowEdit           #No
          ConfigurationKey    #SysDeletedObjects40
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #RefRecId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #FiscalCode
        Id 80
        STRING
        PROPERTIES
          Name                #FiscalCode
          HelpText            #@SYS79239
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #FiscalCode
              #
            ENDARRAY
          StringSize          #16
        ENDPROPERTIES
        
      FIELD #TaxWithholdCalculate
        Id 82
        ENUM
        PROPERTIES
          Name                #TaxWithholdCalculate
          Label               #@SYS81757
          HelpText            #@SYS81758
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #NoYesId
              #
            ENDARRAY
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #TaxWithholdGroup
        Id 83
        STRING
        PROPERTIES
          Name                #TaxWithholdGroup
          HelpText            #@SYS81759
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #TaxWithholdGroup
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #BirthDate
        Id 84
        DATE
        PROPERTIES
          Name                #BirthDate
          Label               #@SYS78855
          HelpText            #@SYS81760
          ConfigurationKey    #CRSEItaly
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #TransDate
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #BirthPlace
        Id 85
        STRING
        PROPERTIES
          Name                #BirthPlace
          Label               #@SYS81761
          HelpText            #@SYS81762
          ConfigurationKey    #CRSEItaly
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #AddressCity
              #
            ENDARRAY
          StringSize          #140
        ENDPROPERTIES
        
      FIELD #ResidenceForeignCountryRegionId
        Id 86
        STRING
        PROPERTIES
          Name                #ResidenceForeignCountryRegionId
          Label               #@SYS81763
          HelpText            #@SYS81764
          ConfigurationKey    #CRSEItaly
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #AddressCountryRegionId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #NameControl
        Id 87
        STRING
        PROPERTIES
          Name                #NameControl
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #NameControl
              #
            ENDARRAY
          StringSize          #4
        ENDPROPERTIES
        
      FIELD #ForeignEntityIndicator
        Id 88
        ENUM
        PROPERTIES
          Name                #ForeignEntityIndicator
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #Tax1099ForeignEntityIndicator
              #
            ENDARRAY
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #TaxIDType
        Id 89
        ENUM
        PROPERTIES
          Name                #TaxIDType
          Table               #VendTable
          EnumType            #TaxIDType
        ENDPROPERTIES
        
      FIELD #DBA
        Id 90
        STRING
        PROPERTIES
          Name                #DBA
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #DBA
              #
            ENDARRAY
          StringSize          #140
        ENDPROPERTIES
        
      FIELD #Tax1099NameChoice
        Id 91
        ENUM
        PROPERTIES
          Name                #Tax1099NameChoice
          Table               #VendTable
          EnumType            #Tax1099NameChoice
        ENDPROPERTIES
        
      FIELD #SecondTIN
        Id 92
        ENUM
        PROPERTIES
          Name                #SecondTIN
          Label               #@SYS84761
          HelpText            #@SYS84762
          ConfigurationKey    #CRSEUnitedStates
          Table               #VendTable
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #INN_RU
        Id 16001
        STRING
        PROPERTIES
          Name                #INN_RU
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #INN_RU
              #
            ENDARRAY
          StringSize          #12
        ENDPROPERTIES
        
      FIELD #OKPO_RU
        Id 16002
        STRING
        PROPERTIES
          Name                #OKPO_RU
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #OKPO_RU
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #OKDP_RU
        Id 16003
        STRING
        PROPERTIES
          Name                #OKDP_RU
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #OKDP_RU
              #
            ENDARRAY
          StringSize          #7
        ENDPROPERTIES
        
      FIELD #StructDepartment_RU
        Id 16004
        STRING
        PROPERTIES
          Name                #StructDepartment_RU
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #StructDepartment_RU
              #
            ENDARRAY
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #BankCentralBankTransTypeCur_RU
        Id 16006
        STRING
        PROPERTIES
          Name                #BankCentralBankTransTypeCur_RU
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #BankCentralBankTransTypeCur_RU
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #BankOrderOfPayment_RU
        Id 16007
        STRING
        PROPERTIES
          Name                #BankOrderOfPayment_RU
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #BankOrderOfPayment_RU
              #
            ENDARRAY
          StringSize          #2
        ENDPROPERTIES
        
      FIELD #KPP_RU
        Id 16008
        STRING
        PROPERTIES
          Name                #KPP_RU
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #KPPU_RU
              #
            ENDARRAY
          StringSize          #9
        ENDPROPERTIES
        
      FIELD #OKATO_RU
        Id 16009
        STRING
        PROPERTIES
          Name                #OKATO_RU
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #OKATO_RU
              #
            ENDARRAY
          StringSize          #11
        ENDPROPERTIES
        
      FIELD #TownId_RU
        Id 16010
        STRING
        PROPERTIES
          Name                #TownId_RU
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #AddressTownId_RU
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #SettlementId_RU
        Id 16011
        STRING
        PROPERTIES
          Name                #SettlementId_RU
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #AddressSettlementId_RU
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #StreetId_RU
        Id 16012
        STRING
        PROPERTIES
          Name                #StreetId_RU
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #AddressStreetId_RU
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Flat_RU
        Id 16013
        STRING
        PROPERTIES
          Name                #Flat_RU
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #AddressFlat_RU
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Building_RU
        Id 16014
        STRING
        PROPERTIES
          Name                #Building_RU
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #AddressBuilding_RU
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Estate_RU
        Id 16015
        STRING
        PROPERTIES
          Name                #Estate_RU
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #AddressEstate_RU
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #FMICode_LT
        Id 16016
        STRING
        PROPERTIES
          Name                #FMICode_LT
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #LtFMICode
              #
            ENDARRAY
          StringSize          #3
        ENDPROPERTIES
        
      FIELD #EnterpriseCode_LT
        Id 16017
        STRING
        PROPERTIES
          Name                #EnterpriseCode_LT
          Label               #@SYS16939
          HelpText            #@GEE16252
          ConfigurationKey    #CRSELithuania
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #Num
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #RegNum_W
        Id 16018
        STRING
        PROPERTIES
          Name                #RegNum_W
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #CompanyRegNum
              #
            ENDARRAY
          StringSize          #15
        ENDPROPERTIES
        
      FIELD #CompanySection_CZ
        Id 16019
        STRING
        PROPERTIES
          Name                #CompanySection_CZ
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #CzCompanySection
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #CompanyInsetNo_CZ
        Id 16020
        STRING
        PROPERTIES
          Name                #CompanyInsetNo_CZ
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #CzCompanyInsetNo
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #CompanyCommRegister_CZ
        Id 16021
        STRING
        PROPERTIES
          Name                #CompanyCommRegister_CZ
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #CzCompanyCommRegister
              #
            ENDARRAY
          StringSize          #40
        ENDPROPERTIES
        
      FIELD #CoRegNum_CZ
        Id 16022
        STRING
        PROPERTIES
          Name                #CoRegNum_CZ
          ConfigurationKey    #CRSECzech
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #CompanyCoRegNum
              #
            ENDARRAY
          StringSize          #15
        ENDPROPERTIES
        
      FIELD #IsResident_LV
        Id 16023
        ENUM
        PROPERTIES
          Name                #IsResident_LV
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #LvResident
              #
            ENDARRAY
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #IntBank_LV
        Id 16024
        STRING
        PROPERTIES
          Name                #IntBank_LV
          Label               #@GEE17350
          ConfigurationKey    #CRSELatvia
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendBankAccountId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #DEL_CustVendRegNum_EE
        Id 16026
        STRING
        PROPERTIES
          Name                #DEL_CustVendRegNum_EE
          ConfigurationKey    #SysDeletedObjects40
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #CompanyRegNum
              #
            ENDARRAY
          StringSize          #15
        ENDPROPERTIES
        
      FIELD #DEL_VATRegNum_PL
        Id 16028
        STRING
        PROPERTIES
          Name                #DEL_VATRegNum_PL
          ConfigurationKey    #SysDeletedObjects40
          Table               #VendTable
          StringSize          #13
        ENDPROPERTIES
        
      FIELD #TaxPeriodPaymentCode_PL
        Id 16029
        STRING
        PROPERTIES
          Name                #TaxPeriodPaymentCode_PL
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #PlTaxPeriodPaymentCode
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #MandatoryVatDate_PL
        Id 16030
        ENUM
        PROPERTIES
          Name                #MandatoryVatDate_PL
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #PlMandatoryVatDate
              #
            ENDARRAY
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #PriceCurrency
        Id 20001
        STRING
        PROPERTIES
          Name                #PriceCurrency
          Label               #@RTL215
          ConfigurationKey    #VendAssortiment
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #CurrencyCode
              #
            ENDARRAY
          StringSize          #3
        ENDPROPERTIES
        
      FIELD #Closed
        Id 20002
        ENUM
        PROPERTIES
          Name                #Closed
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendorClosed
              #
            ENDARRAY
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #FinanceManagerBlocked
        Id 20003
        ENUM
        PROPERTIES
          Name                #FinanceManagerBlocked
          Label               #@RTL614
          ConfigurationKey    #WarehouseManagement
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #NoYesId
              #
            ENDARRAY
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #PurchPriceCheckLevel_Rcontract
        Id 20004
        ENUM
        PROPERTIES
          Name                #PurchPriceCheckLevel_Rcontract
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #PurchPriceCheckLevel
              #
            ENDARRAY
          EnumType            #NoneWarningBlocked
        ENDPROPERTIES
        
      FIELD #PurchPriceCheckLevel
        Id 20005
        ENUM
        PROPERTIES
          Name                #PurchPriceCheckLevel
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #PurchPriceCheckLevel
              #
            ENDARRAY
          EnumType            #NoneWarningBlocked
        ENDPROPERTIES
        
      FIELD #PurchPriceDifferencePercent
        Id 20006
        REAL
        PROPERTIES
          Name                #PurchPriceDifferencePercent
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #PurchPriceDifferencePercent
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #PurchPriceDiffPercent_RContract
        Id 20007
        REAL
        PROPERTIES
          Name                #PurchPriceDiffPercent_RContract
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #PurchPriceDifferencePercent
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #InventCertifCheck
        Id 20008
        ENUM
        PROPERTIES
          Name                #InventCertifCheck
          Table               #VendTable
          EnumType            #InventCertifCheck
        ENDPROPERTIES
        
      FIELD #JuridicalPersonId
        Id 20009
        STRING
        PROPERTIES
          Name                #JuridicalPersonId
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #JuridicalPersonId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #JuridicalPersonBankAccountId
        Id 20010
        STRING
        PROPERTIES
          Name                #JuridicalPersonBankAccountId
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #JuridicalPersonBankAccountId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #EDIAccountIln
        Id 20011
        STRING
        PROPERTIES
          Name                #EDIAccountIln
          Label               #GLN партнера
          HelpText            #GLN партнера
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #EDIAccountIln
              #
            ENDARRAY
          StringSize          #15
        ENDPROPERTIES
        
      FIELD #isEDI
        Id 20012
        ENUM
        PROPERTIES
          Name                #isEDI
          Label               #Обмениваться EDI документами
          HelpText            #Обмениваться EDI документами
          Table               #VendTable
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #UNBId
        Id 20013
        STRING
        PROPERTIES
          Name                #UNBId
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #EDIUNBId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #PaymPriorityType
        Id 40001
        ENUM
        PROPERTIES
          Name                #PaymPriorityType
          Mandatory           #Yes
          Table               #VendTable
          EnumType            #VendPaymPriorityType
        ENDPROPERTIES
        
      FIELD #Netting
        Id 40002
        ENUM
        PROPERTIES
          Name                #Netting
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendNetting
              #
            ENDARRAY
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #Branch
        Id 40003
        ENUM
        PROPERTIES
          Name                #Branch
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #CustVendBranch
              #
            ENDARRAY
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #BranchAccount
        Id 40004
        STRING
        PROPERTIES
          Name                #BranchAccount
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendBranchAccount
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #VendAccountFactoring
        Id 40005
        STRING
        PROPERTIES
          Name                #VendAccountFactoring
          Label               #Факторинг
          HelpText            #Счет поставщика для факторинга
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendAccount
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #IndependentRetailer
        Id 40006
        ENUM
        PROPERTIES
          Name                #IndependentRetailer
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #CustVendIndependentRetailer
              #
            ENDARRAY
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #IsTaxAuthority
        Id 40007
        ENUM
        PROPERTIES
          Name                #IsTaxAuthority
          Label               #Налоговый орган
          HelpText            #Налоговый орган
          Table               #VendTable
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #ProformaPriceDiffType
        Id 40008
        ENUM
        PROPERTIES
          Name                #ProformaPriceDiffType
          Table               #VendTable
          EnumType            #PurchProformaPriceDiffType
        ENDPROPERTIES
        
      FIELD #IsAlcoAccount
        Id 40009
        ENUM
        PROPERTIES
          Name                #IsAlcoAccount
          Label               #Поставщик алк. продукции моск. поставщиков
          HelpText            #Поставщик алк. продукции моск. поставщиков
          Table               #VendTable
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #PercentAlcoMarkup
        Id 40010
        REAL
        PROPERTIES
          Name                #PercentAlcoMarkup
          Label               #Наценка на алкоголь
          HelpText            #Наценка на алкоголь в процентах
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #Percent
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #RequestIssueDimension
        Id 40011
        STRING
        PROPERTIES
          Name                #RequestIssueDimension
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #Dimension
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #ActAdjustFreq
        Id 40012
        ENUM
        PROPERTIES
          Name                #ActAdjustFreq
          Table               #VendTable
          EnumType            #ActAdjustFreq
        ENDPROPERTIES
        
      FIELD #EmailActAdjust
        Id 40013
        STRING
        PROPERTIES
          Name                #EmailActAdjust
          Label               #Адрес для сверки
          HelpText            #Адрес електронной почты, для высылка акта сверки
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #Email
              #
            ENDARRAY
          StringSize          #80
        ENDPROPERTIES
        
      FIELD #VendContractPriceRejectDaysBack
        Id 40014
        INT
        PROPERTIES
          Name                #VendContractPriceRejectDaysBack
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendContractPriceRejectDaysBack
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #PaymentBlock
        Id 40015
        ENUM
        PROPERTIES
          Name                #PaymentBlock
          Label               #Блокировать оплаты
          HelpText            #Блокировать оплаты
          Table               #VendTable
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #DoubleINN
        Id 40016
        ENUM
        PROPERTIES
          Name                #DoubleINN
          Label               #Разрешение на 2ой ИНН
          HelpText            #Разрешение на 2ой ИНН
          Table               #VendTable
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #PurchBlock
        Id 40017
        ENUM
        PROPERTIES
          Name                #PurchBlock
          Label               #Блокировать создание заказа
          HelpText            #Блокировать создание заказа
          Table               #VendTable
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #DontAddItem2VendItem
        Id 40018
        ENUM
        PROPERTIES
          Name                #DontAddItem2VendItem
          Label               #Не добавлять номеклатуры в ассортимент
          HelpText            #Не добавлять номеклатуры в ассортимент
          Table               #VendTable
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #SalesActReturnsTypes
        Id 40019
        ENUM
        PROPERTIES
          Name                #SalesActReturnsTypes
          Table               #VendTable
          EnumType            #SalesActReturnsTypes
        ENDPROPERTIES
        
      FIELD #LicenseCardSeries_RU
        Id 40020
        STRING
        PROPERTIES
          Name                #LicenseCardSeries_RU
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #LicenseCardSeries_RU
              #
            ENDARRAY
          StringSize          #20
          Adjustment          #Right
        ENDPROPERTIES
        
      FIELD #LicenseCardNum_RU
        Id 40021
        STRING
        PROPERTIES
          Name                #LicenseCardNum_RU
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #LicenseCardNum_RU
              #
            ENDARRAY
          StringSize          #20
          Adjustment          #Right
        ENDPROPERTIES
        
      FIELD #LicenseCardStartDate_RU
        Id 40022
        DATE
        PROPERTIES
          Name                #LicenseCardStartDate_RU
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #LicenseCardStartDate_RU
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #LicenseCardFinishDate_RU
        Id 40023
        DATE
        PROPERTIES
          Name                #LicenseCardFinishDate_RU
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #LicenseCardFinishDate_RU
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #LicenseCardIssuedBy_RU
        Id 40024
        STRING
        PROPERTIES
          Name                #LicenseCardIssuedBy_RU
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #LicenseCardIssuedBy_RU
              #
            ENDARRAY
          StringSize          #200
          Adjustment          #Right
        ENDPROPERTIES
        
      FIELD #VendProducer
        Id 40025
        ENUM
        PROPERTIES
          Name                #VendProducer
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendProducer
              #
            ENDARRAY
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #VendId
        Id 40026
        INT
        PROPERTIES
          Name                #VendId
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #VendId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #LicenseId
        Id 40027
        INT
        PROPERTIES
          Name                #LicenseId
          Table               #VendTable
          ExtendedDataType    
            ARRAY 
              #LicenseId
              #
            ENDARRAY
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #AccountNum
          #Name
          #Address
          #Phone
          #Currency
          #VendGroup
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AutoLookup
        PROPERTIES
          Name                #AutoLookup
        ENDPROPERTIES
        
        GROUPFIELDS
          #INN_RU
          #AccountNum
          #NameAlias
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ActAdjust
        PROPERTIES
          Name                #ActAdjust
          Label               #Сверка
        ENDPROPERTIES
        
        GROUPFIELDS
          #ActAdjustFreq
          #EmailActAdjust
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Address
        PROPERTIES
          Name                #Address
          Label               #@SYS9362
        ENDPROPERTIES
        
        GROUPFIELDS
          #Street
          #ZipCode
          #City
          #County
          #State
          #CountryRegionId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Address_RU
        PROPERTIES
          Name                #Address_RU
          Label               #@SYS9362
        ENDPROPERTIES
        
        GROUPFIELDS
          #ZipCode
          #CountryRegionId
          #State
          #County
          #TownId_RU
          #SettlementId_RU
          #StreetId_RU
          #Estate_RU
          #Building_RU
          #Flat_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AddressDisplay
        PROPERTIES
          Name                #AddressDisplay
          Label               #@SYS9362
        ENDPROPERTIES
        
        GROUPFIELDS
          #Address
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AddressLookup
        PROPERTIES
          Name                #AddressLookup
          Label               #@SYS88672
        ENDPROPERTIES
        
        GROUPFIELDS
          #AccountNum
          #Name
          #NameAlias
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Administration
        PROPERTIES
          Name                #Administration
          Label               #@SYS9853
        ENDPROPERTIES
        
        GROUPFIELDS
          #Blocked
          #OneTimeVendor
          #ItemBuyerGroupId
          #PurchBlock
          #FinanceManagerBlocked
          #InventCertifCheck
          #IndependentRetailer
          #IsTaxAuthority
          #DoubleINN
          #IsAlcoAccount
          #PercentAlcoMarkup
          #VendContractPriceRejectDaysBack
          #PaymentBlock
          #DontAddItem2VendItem
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Branch
        PROPERTIES
          Name                #Branch
          Label               #Филиал
        ENDPROPERTIES
        
        GROUPFIELDS
          #Branch
          #BranchAccount
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Budget
        PROPERTIES
          Name                #Budget
          Label               #@SYS15436
        ENDPROPERTIES
        
        GROUPFIELDS
          #ClearingPeriod
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #CheckFinance
        PROPERTIES
          Name                #CheckFinance
          Label               #@RTL841
        ENDPROPERTIES
        
        GROUPFIELDS
          #KPP_RU
          #INN_RU
          #TaxGroup
          #BankAccount
          #OKDP_RU
          #OKPO_RU
          #OKATO_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ContactInfo
        PROPERTIES
          Name                #ContactInfo
          Label               #@SYS21663
        ENDPROPERTIES
        
        GROUPFIELDS
          #Phone
          #PhoneLocal
          #CellularPhone
          #Pager
          #TeleFax
          #Email
          #SMS
          #URL
          #Telex
          #ContactPersonId
          #editContactPersonName
          #LineOfBusinessId
          #BirthDate
          #BirthPlace
          #ResidenceForeignCountryRegionId
          #CompanyIdSiret
          #CompanyIdNAF
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Credit
        PROPERTIES
          Name                #Credit
          Label               #@SYS7084
        ENDPROPERTIES
        
        GROUPFIELDS
          #CreditRating
          #CreditMax
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Currency
        PROPERTIES
          Name                #Currency
          Label               #@SYS7572
        ENDPROPERTIES
        
        GROUPFIELDS
          #Currency
          #PriceCurrency
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Customer
        PROPERTIES
          Name                #Customer
          Label               #@SYS302
        ENDPROPERTIES
        
        GROUPFIELDS
          #CustAccount
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Delivery
        PROPERTIES
          Name                #Delivery
          Label               #@SYS4508
        ENDPROPERTIES
        
        GROUPFIELDS
          #FreightZone
          #DlvTerm
          #DlvMode
          #DestinationCodeId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Description
        PROPERTIES
          Name                #Description
          Label               #@SYS7576
        ENDPROPERTIES
        
        GROUPFIELDS
          #Name
          #NameAlias
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Dimension
        PROPERTIES
          Name                #Dimension
          Label               #@SYS5951
        ENDPROPERTIES
        
        GROUPFIELDS
          #Dimension
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Identification
        PROPERTIES
          Name                #Identification
          Label               #@SYS5711
        ENDPROPERTIES
        
        GROUPFIELDS
          #AccountNum
          #INN_RU
          #OKDP_RU
          #OKPO_RU
          #OKATO_RU
          #KPP_RU
          #RegNum_W
          #CoRegNum_CZ
          #CompanySection_CZ
          #CompanyInsetNo_CZ
          #CompanyCommRegister_CZ
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Invoice
        PROPERTIES
          Name                #Invoice
          Label               #@SYS12128
        ENDPROPERTIES
        
        GROUPFIELDS
          #InvoiceAccount
          #VendAccountFactoring
          #numberSequenceGroup
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #InvoicePriceCheck_PurchOrder
        PROPERTIES
          Name                #InvoicePriceCheck_PurchOrder
          Label               #@RTL2020
        ENDPROPERTIES
        
        GROUPFIELDS
          #PurchPriceCheckLevel
          #PurchPriceDifferencePercent
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #InvoicePriceCheck_RContract
        PROPERTIES
          Name                #InvoicePriceCheck_RContract
          Label               #@RTL2021
        ENDPROPERTIES
        
        GROUPFIELDS
          #PurchPriceCheckLevel_Rcontract
          #PurchPriceDiffPercent_RContract
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #InvoiceReport_RU
        PROPERTIES
          Name                #InvoiceReport_RU
          Label               #@GEE7008
        ENDPROPERTIES
        
        GROUPFIELDS
          #StructDepartment_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #JuridicalPerson
        PROPERTIES
          Name                #JuridicalPerson
          Label               #@RTL679
        ENDPROPERTIES
        
        GROUPFIELDS
          #JuridicalPersonId
          #JuridicalPersonBankAccountId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #LicenseCard_RU
        PROPERTIES
          Name                #LicenseCard_RU
          Label               #Лицензия
        ENDPROPERTIES
        
        GROUPFIELDS
          #LicenseCardSeries_RU
          #LicenseCardNum_RU
          #LicenseCardIssuedBy_RU
          #LicenseCardStartDate_RU
          #LicenseCardFinishDate_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #NotificationToTheCentralBank
        PROPERTIES
          Name                #NotificationToTheCentralBank
          Label               #@SYS67156
        ENDPROPERTIES
        
        GROUPFIELDS
          #BankCentralBankPurposeCode
          #BankCentralBankTransTypeCur_RU
          #BankCentralBankPurposeText
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #OffsetAccount
        PROPERTIES
          Name                #OffsetAccount
          Label               #@SYS11162
        ENDPROPERTIES
        
        GROUPFIELDS
          #OffsetAccountType
          #OffsetAccount
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Payment
        PROPERTIES
          Name                #Payment
          Label               #@SYS828
        ENDPROPERTIES
        
        GROUPFIELDS
          #PaymTermId
          #PaymMode
          #PaymSpec
          #PaymSched
          #CashDisc
          #BankAccount
          #PaymId
          #PaymDayId
          #BankOrderOfPayment_RU
          #FMICode_LT
          #IntBank_LV
          #PaymPriorityType
          #Netting
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Posting
        PROPERTIES
          Name                #Posting
          Label               #@SYS12919
        ENDPROPERTIES
        
        GROUPFIELDS
          #VendGroup
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Producer
        PROPERTIES
          Name                #Producer
          Label               #Производитель
        ENDPROPERTIES
        
        GROUPFIELDS
          #VendProducer
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PurchaseDiscount
        PROPERTIES
          Name                #PurchaseDiscount
          Label               #@SYS13267
        ENDPROPERTIES
        
        GROUPFIELDS
          #MultiLineDisc
          #EndDisc
          #PriceGroup
          #LineDisc
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PurchaseOrder
        PROPERTIES
          Name                #PurchaseOrder
          Label               #@SYS15812
        ENDPROPERTIES
        
        GROUPFIELDS
          #MarkupGroup
          #InventLocation
          #VendItemGroupId
          #PurchPoolId
          #YourAccountNum
          #balanceAllCurrency
          #PurchAmountPurchaseOrder
          #PurchCalendarId
          #SalesActReturnsTypes
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PurchProforma
        PROPERTIES
          Name                #PurchProforma
          Label               #Импорт подтверждения поставщика
        ENDPROPERTIES
        
        GROUPFIELDS
          #ProformaPriceDiffType
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #RequestIssue
        PROPERTIES
          Name                #RequestIssue
          Label               #Банковская выписка
        ENDPROPERTIES
        
        GROUPFIELDS
          #RequestIssueDimension
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #SalesTax
        PROPERTIES
          Name                #SalesTax
          Label               #@SYS5878
        ENDPROPERTIES
        
        GROUPFIELDS
          #TaxGroup
          #InclTax
          #VATNum
          #EnterpriseNumber
          #FiscalCode
          #OrganizationNumber
          #TaxPeriodPaymentCode_PL
          #MandatoryVatDate_PL
          #EnterpriseCode_LT
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #SupplementaryItem
        PROPERTIES
          Name                #SupplementaryItem
          Label               #@SYS58240
        ENDPROPERTIES
        
        GROUPFIELDS
          #SuppItemGroupId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Tax1099
        PROPERTIES
          Name                #Tax1099
          Label               #@SYS84747
        ENDPROPERTIES
        
        GROUPFIELDS
          #Tax1099Reports
          #Tax1099RegNum
          #TaxIDType
          #Tax1099Box
          #ForeignEntityIndicator
          #SecondTIN
          #Tax1099NameChoice
          #DBA
          #NameControl
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Vendor
        PROPERTIES
          Name                #Vendor
          Label               #@SYS9455
        ENDPROPERTIES
        
        GROUPFIELDS
          #AccountNum
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #VendorTable
        PROPERTIES
          Name                #VendorTable
          Label               #@SYS13709
        ENDPROPERTIES
        
        GROUPFIELDS
          #LanguageId
          #FemaleOwned
          #MinorityOwned
          #IsResident_LV
          #Closed
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #WebCategoryBrowsing
        PROPERTIES
          Name                #WebCategoryBrowsing
          Label               #@SYS74258
        ENDPROPERTIES
        
        GROUPFIELDS
          #VendGroup
          #Currency
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #WithholdingTax
        PROPERTIES
          Name                #WithholdingTax
          Label               #@SYS7372
        ENDPROPERTIES
        
        GROUPFIELDS
          #TaxWithholdCalculate
          #TaxWithholdGroup
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #AccountIdx
      Id 1
      PROPERTIES
        Name                #AccountIdx
        AllowDuplicates     #No
      ENDPROPERTIES
      
      INDEXFIELDS
        #AccountNum
      ENDINDEXFIELDS
      
      #NameAliasIDx
      Id 4
      PROPERTIES
        Name                #NameAliasIDx
      ENDPROPERTIES
      
      INDEXFIELDS
        #NameAlias
      ENDINDEXFIELDS
      
      #YourAccountNumIdx
      Id 5
      PROPERTIES
        Name                #YourAccountNumIdx
      ENDPROPERTIES
      
      INDEXFIELDS
        #YourAccountNum
      ENDINDEXFIELDS
      
      #PhoneIdx
      Id 8002
      PROPERTIES
        Name                #PhoneIdx
      ENDPROPERTIES
      
      INDEXFIELDS
        #Phone
        #CellularPhone
      ENDINDEXFIELDS
      
      #LicenseCard_RUIdx
      Id 40001
      PROPERTIES
        Name                #LicenseCard_RUIdx
      ENDPROPERTIES
      
      INDEXFIELDS
        #LicenseCardNum_RU
        #LicenseCardSeries_RU
      ENDINDEXFIELDS
      
    ENDINDICES
    REFERENCES
      REFERENCE #County
        PROPERTIES
          Name                #County
          Table               #AddressCounty
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #CountryRegionId
            Table               #AddressCounty
            RelatedField        #CountryRegionId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #State
            Table               #AddressCounty
            RelatedField        #StateId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #County
            Table               #AddressCounty
            RelatedField        #CountyId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #State
        PROPERTIES
          Name                #State
          Table               #AddressState
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #CountryRegionId
            Table               #AddressState
            RelatedField        #CountryRegionId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #State
            Table               #AddressState
            RelatedField        #StateId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #Tax1099Summary
        PROPERTIES
          Name                #Tax1099Summary
          Table               #Tax1099Summary
          Validate            #No
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #AccountNum
            Table               #Tax1099Summary
            RelatedField        #VendAccount
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #VATNum
        PROPERTIES
          Name                #VATNum
          Table               #TaxVATNumTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #VATNum
            Table               #TaxVATNumTable
            RelatedField        #VATNum
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #VendBankAccount
        PROPERTIES
          Name                #VendBankAccount
          Table               #VendBankAccount
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #AccountNum
            Table               #VendBankAccount
            RelatedField        #VendAccount
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #BankAccount
            Table               #VendBankAccount
            RelatedField        #AccountID
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #VendBankAccountInt
        PROPERTIES
          Name                #VendBankAccountInt
          Table               #VendBankAccount
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #AccountNum
            Table               #VendBankAccount
            RelatedField        #VendAccount
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #IntBank_LV
            Table               #VendBankAccount
            RelatedField        #AccountID
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #VendPaymentModeSpec
        PROPERTIES
          Name                #VendPaymentModeSpec
          Table               #VendPaymModeSpec
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PaymMode
            Table               #VendPaymModeSpec
            RelatedField        #PaymMode
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PaymSpec
            Table               #VendPaymModeSpec
            RelatedField        #Specification
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
    ENDREFERENCES
    
    DELETEACTIONS
      #PurchPlanningReturnRequestSchedule
      PROPERTIES
        Table               #PurchPlanningReturnRequestSchedule
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #VendTableCloseLog
      PROPERTIES
        Table               #VendTableCloseLog
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #VendPaymAmountTable
      PROPERTIES
        Table               #VendPaymAmountTable
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #SysCompanyUserInfo
      PROPERTIES
        Table               #SysCompanyUserInfo
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #smmBusRelTable
      PROPERTIES
        Table               #smmBusRelTable
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #RContractTable
      PROPERTIES
        Table               #RContractTable
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #VendTrans
      PROPERTIES
        Table               #VendTrans
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #PurchTable
      PROPERTIES
        Table               #PurchTable
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #ForecastPurch
      PROPERTIES
        Table               #ForecastPurch
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #WrkCtrTable
      PROPERTIES
        Table               #WrkCtrTable
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #InventTable
      PROPERTIES
        Table               #InventTable
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #TaxAuthorityAddress
      PROPERTIES
        Table               #TaxAuthorityAddress
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #Tax1099Reports
      PROPERTIES
        Table               #Tax1099Reports
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #SuppItemTable
      PROPERTIES
        Table               #SuppItemTable
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #ReqPO
      PROPERTIES
        Table               #ReqPO
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #PurchJournalAutoSummary
      PROPERTIES
        Table               #PurchJournalAutoSummary
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #PriceDiscTable
      PROPERTIES
        Table               #PriceDiscTable
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #PriceDiscAdmTrans
      PROPERTIES
        Table               #PriceDiscAdmTrans
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #MarkupAutoTable
      PROPERTIES
        Table               #MarkupAutoTable
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #CustVendExternalItem
      PROPERTIES
        Table               #CustVendExternalItem
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #ContactPerson
      PROPERTIES
        Table               #ContactPerson
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #BusinessStatisticsData
      PROPERTIES
        Table               #BusinessStatisticsData
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #Address
      PROPERTIES
        Table               #Address
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #VendLedgerAccounts
      PROPERTIES
        Table               #VendLedgerAccounts
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #VendBankAccount
      PROPERTIES
        Table               #VendBankAccount
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #DocuRef
      PROPERTIES
        Table               #DocuRef
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #VendDefaultAccounts
      PROPERTIES
        Table               #VendDefaultAccounts
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #VendStateTaxID
      PROPERTIES
        Table               #VendStateTaxID
        DeleteAction        #Cascade
      ENDPROPERTIES
      
    ENDDELETEACTIONS
    
    METHODS
      Version: 3
      SOURCE #address_delivery_RU
        #// MIL 02.08.2012 CU_00271_2
        #display Addressing address_delivery_RU()
        #{
        #    Address address = Address::find(this.TableId, this.RecId, AddressType::Delivery);
        #
        #    if (address)
        #        return address.Address;
        #
        #    return CompanyInfo::find().Address;
        #}
      ENDSOURCE
      SOURCE #alcoVendAccount
        #// smin 13.10.2009 CU_00177_1 KC
        #VendAccount alcoVendAccount()
        #{
        #    ;
        #    if (this.isInvoiceAccountAlco())
        #        return this.InvoiceAccount;
        #
        #    return this.AccountNum;
        #}
      ENDSOURCE
      SOURCE #balanceAllCurrency
        #//BP Deviation Documented
        #display AmountCur balanceAllCurrency(CustCurrencyCode _currencyCode = this.Currency)
        #{
        #    return this.CustVendTable::balanceAllCurrency(_currencyCode);
        #}
      ENDSOURCE
      SOURCE #balanceCurPerDate
        #server AmountCur balanceCurPerDate(TransDate    _transactionDate    = systemdateget(),
        #                                   CurrencyCode _currencyCode       = CompanyInfo::find().CurrencyCode)
        #{
        #    return this.CustVendTable::balanceCurPerDate(_transactionDate, _currencyCode);
        #}
      ENDSOURCE
      SOURCE #BalanceCurrency
        #AmountCur balanceCurrency(TransDate     _fromDate       = dateNull(),
        #                          TransDate     _toDate         = dateMax(),
        #                          CurrencyCode  _fromCurrency   = '',
        #                          CurrencyCode  _toCurrency     = '')
        #{
        #
        #    return this.CustVendTable::balanceCurrency(_fromDate,
        #                                               _toDate,
        #                                               _fromCurrency,
        #                                               _toCurrency);
        #}
      ENDSOURCE
      SOURCE #BalanceMST
        #//BP Deviation Documented
        #display AmountMST balanceMST(FromDate   _fromDate   = dateNull(),
        #                             ToDate     _toDate     = dateMax())
        #{
        #    return this.CustVendTable::balanceMST(_fromDate, _toDate);
        #}
      ENDSOURCE
      SOURCE #BalancePerDate
        #server AmountMST balancePerDate(TransDate _transactionDate = systemdateget())
        #{
        #    return this.CustVendTable::balancePerDate(_transactionDate);
        #}
      ENDSOURCE
      SOURCE #CashDiscName
        #//BP Deviation Documented
        #display VendCashDiscName cashDiscName()
        #{
        #    return CashDisc::find(this.CashDisc).Description;
        #}
      ENDSOURCE
      SOURCE #CheckAccountBlocked
        #boolean checkAccountBlocked(AmountCur amountCur)
        #{
        #    boolean ret = true;
        #
        #    /*if (this.Blocked    == CustVendorBlocked::All ||
        #       (this.Blocked    == CustVendorBlocked::Invoice && amountCur < 0))
        #    {
        #        ret = checkFailed(strfmt("@SYS1138", this.AccountNum));
        #    }*/
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #CheckBlockedAll
        #boolean  checkBlockedAll()
        #{
        #    boolean ret = true;
        #
        #    if (this.Blocked == CustVendorBlocked::All)
        #    {
        #        ret = checkFailed(strfmt("@SYS22005", this.AccountNum, CustVendorBlocked::All));
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkDoubleINN
        #// Smin 19.02.2009 CU_00078_1 KC
        #boolean checkDoubleINN()
        #{
        #    boolean     ret =   true;
        #    VendTable   vendTable;
        #    ;
        #    if (!this.INN_RU
        #        || this.IndependentRetailer == NoYes::Yes) // Smin 13.04.2009 CU_00112_1 KC
        #        return ret;
        #
        #    if (this.Branch)
        #    {
        #        select firstonly RecId, AccountNum, Name, DoubleINN
        #        from
        #        vendTable
        #            where vendTable.INN_RU      ==  this.INN_RU
        #            && vendTable.AccountNum     !=  this.AccountNum
        #            && vendTable.AccountNum     != this.BranchAccount
        #            && vendTable.BranchAccount  != this.BranchAccount;
        #    }
        #    else
        #    {
        #        select firstonly RecId, AccountNum, Name, DoubleINN
        #        from
        #        VendTable
        #        where vendTable.INN_RU          ==  this.INN_RU
        #           && vendTable.AccountNum      != this.AccountNum
        #           && vendTable.BranchAccount   != this.AccountNum;
        #    }
        #
        #    if (vendTable.DoubleINN == true  &&  this.DoubleINN == true) // Kalistratov 16.11.10 ЦУ Т.Гинкель в иск.случаях нужно повторение ИНН
        #        return ret;
        #
        #    if (vendTable.RecId )
        #        ret =   checkFailed(strfmt('ИНН %1 уже указан у поставщика %2 (%3)', this.INN_RU, vendTable.AccountNum, vendTable.Name ));
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkFinanceManagerBlocked
        #// pel 22.03.2007 R700VM004T KC
        #NoYes checkFinanceManagerBlocked(VendParameters _vendParameters      = VendParameters::find(),
        #                                 container      _financeCheckedField = VendTable::getFinanceCheckedField(_vendParameters))
        #{
        #    NoYes       blocked = NoYes::No;
        #    int         idx;
        #    ;
        #
        #    if (_vendParameters.FinanceManagerBlocked == NoYes::Yes)
        #    {
        #        for (idx = 1; idx <= conlen(_financeCheckedField); idx ++)
        #        {
        #            if (! this.(conpeek(_financeCheckedField, idx)))
        #            {
        #                blocked = NoYes::Yes;
        #                break;
        #            }
        #        }
        #    }
        #
        #    return blocked;
        #}
      ENDSOURCE
      SOURCE #checkInvoice
        #/*
        #    AOSRunMode::Called
        #*/
        #boolean checkInvoice(InvoiceId          invoiceId,
        #                     TransDate          transDate = systemdateget(),
        #                     LedgerJournalId    _ledgerJournalId = '' )
        #{
        #    TransDate           fromDate;
        #    TransDate           toDate;
        #    TransDate           foundDate;
        #    boolean             found;
        #    VendInvoiceJour     vendInvoiceJour;
        #    AmountCur           invoiceAmount;
        #    ;
        #    if (!invoiceId)
        #    {
        #        return true;
        #    }
        #
        #    switch (VendParameters::find().CheckInvoice)
        #    {
        #        case ReuseVoucher::NoDuplicate :
        #            while   select InvoiceDate,InvoiceAmount
        #                    from vendInvoiceJour
        #                    index hint InvoiceIdx
        #                    where vendInvoiceJour.InvoiceAccount      == this.AccountNum    &&
        #                         vendInvoiceJour.InvoiceId            == invoiceId          &&
        #                         vendInvoiceJour.InvoiceAmount        != 0
        #            {
        #                invoiceAmount += vendInvoiceJour.InvoiceAmount;
        #                if (!foundDate)
        #                    foundDate = vendInvoiceJour.InvoiceDate;
        #            }
        #            if (invoiceAmount)
        #            {
        #                found = true;
        #            }
        #            break;
        #
        #        case ReuseVoucher::NoDuplicateInYear :
        #            fromDate =  LedgerPeriod::findOpeningDate(transDate);
        #            toDate   =  LedgerPeriod::closingPeriodEnd(transDate);
        #            while   select InvoiceDate,InvoiceAmount
        #                    from vendInvoiceJour
        #                    index hint InvoiceIdx
        #                    where    vendInvoiceJour.InvoiceAccount     == this.AccountNum    &&
        #                             vendInvoiceJour.InvoiceId          == invoiceId          &&
        #                             vendInvoiceJour.InvoiceAmount      !=0                   &&
        #                             vendInvoiceJour.InvoiceDate        >=  fromDate          &&
        #                             vendInvoiceJour.InvoiceDate        <=  toDate
        #            {
        #                invoiceAmount += vendInvoiceJour.InvoiceAmount;
        #                if (!foundDate)
        #                    foundDate = vendInvoiceJour.InvoiceDate;
        #            }
        #            if (invoiceAmount)
        #            {
        #                found = true;
        #            }
        #            break;
        #
        #        case ReuseVoucher::AcceptDuplicate :
        #            found = false;
        #            break;
        #
        #        case ReuseVoucher::WarnDuplicate :
        #            fromDate =  LedgerPeriod::findOpeningDate(transDate);
        #            toDate   =  LedgerPeriod::closingPeriodEnd(transDate);
        #            select firstonly InvoiceDate,InvoiceAmount
        #                from vendInvoiceJour
        #                index hint InvoiceIdx
        #                where    vendInvoiceJour.InvoiceAccount     == this.AccountNum    &&
        #                         vendInvoiceJour.InvoiceId          == invoiceId          &&
        #                         vendInvoiceJour.InvoiceAmount      != 0                  &&
        #                         vendInvoiceJour.InvoiceDate        >=  fromDate          &&
        #                         vendInvoiceJour.InvoiceDate        <=  toDate;
        #            if (vendInvoiceJour)
        #            {
        #                found = false;
        #                warning(strfmt("@SYS50887",invoiceId, vendInvoiceJour.InvoiceDate));
        #            }
        #            break;
        #    }
        #
        #    if (found)
        #    {
        #        return checkFailed(strfmt("@SYS50887",invoiceId,foundDate));
        #    }
        #
        #    return true;
        #}
        #
      ENDSOURCE
      SOURCE #checkPackingSlip
        #/*
        #    AOSRunMode::Called
        #*/
        #boolean checkPackingSlip(PackingSlipId  packingSlipId,
        #                         TransDate      transDate = systemdateget() )
        #{
        #    VendPackingSlipJour vendPackingSlipJour;
        #    ;
        #    switch (VendParameters::find().CheckPackingSlip)
        #    {
        #        case ReuseVoucher::NoDuplicate :
        #            select firstonly DeliveryDate,Qty
        #                from vendPackingSlipJour
        #                index hint PackingSlipIdx
        #                where vendPackingSlipJour.InvoiceAccount == this.AccountNum       &&
        #                      vendPackingSlipJour.PackingSlipId  == packingSlipId         &&
        #                      vendPackingSlipJour.PurchaseType   != PurchaseType::Journal &&
        #                      vendPackingSlipJour.Qty            != 0;
        #
        #            break;
        #
        #        case ReuseVoucher::NoDuplicateInYear :
        #            select firstonly DeliveryDate,Qty
        #                from vendPackingSlipJour
        #                index hint PackingSlipIdx
        #                where    vendPackingSlipJour.InvoiceAccount == this.AccountNum                           &&
        #                         vendPackingSlipJour.PackingSlipId  == packingSlipId                             &&
        #                         vendPackingSlipJour.PurchaseType   != PurchaseType::Journal                     &&
        #                         vendPackingSlipJour.Qty            != 0                                          &&
        #                         vendPackingSlipJour.DeliveryDate   >=  LedgerPeriod::findOpeningDate(transDate) &&
        #                         vendPackingSlipJour.DeliveryDate   <=  LedgerPeriod::closingPeriodEnd(transDate);
        #            break;
        #
        #        case ReuseVoucher::AcceptDuplicate :
        #            return true;
        #    }
        #
        #    if (vendPackingSlipJour)
        #    {
        #        return checkFailed(strfmt("@SYS50926",packingSlipId,vendPackingSlipJour.DeliveryDate));
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #checkPaymentBlock
        #// smin 24.09.2010 smin_VendTableCloseJournal
        #boolean checkPaymentBlock()
        #{
        #    boolean     ret = true;
        #    ;
        #
        #    if (this.PaymentBlock == NoYes::Yes)
        #    {
        #        ret = checkFailed(strfmt('Поставщик %1 (%2) заблокирован для оплат', this.AccountNum, this.Name));
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkVATNumUsed
        #boolean checkVATNumUsed()
        #{
        #    boolean    ret = true;
        #    VendTable  tmpVendTable;
        #    ;
        #    if (TaxParameters::find().VatBookEnable == NoYes::Yes && this.VATNum)
        #    {
        #        select firstonly  tmpVendTable
        #            where tmpVendTable.RecId  != this.RecId  &&
        #                  tmpVendTable.VATNum == this.VATNum;
        #        if (tmpVendTable.RecId)
        #        {
        #            ret = checkFailed(strfmt("@SYS79301",fieldpname(VendTable, VATNum)));
        #        }
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #ClearingAccount
        #//BP Deviation Documented
        #display LedgerAccount clearingAccount(VendPostingProfile vendPostingProfile =  VendParameters::find().PostingProfile)
        #{
        #    return this.CustVendTable::clearingAccount(vendPostingProfile, this.AccountNum);
        #}
      ENDSOURCE
      SOURCE #ClearingAccountGroup
        #LedgerAccount clearingAccountGroup(VendAccount          _vendAccount,
        #                                   VendPostingProfile   _vendPostingProfile =  VendParameters::find().PostingProfile)
        #{
        #    VendLedgerAccounts  vendLedgerAccounts;
        #
        #    return CustVendLedgerAccounts::clearingAccount(_vendAccount,
        #                                                   _vendPostingProfile,
        #                                                   vendLedgerAccounts,
        #                                                   TableGroupAll::GroupId);
        #}
      ENDSOURCE
      SOURCE #ClearingPeriod
        #VendClearingPeriod clearingPeriod()
        #{
        #    return (this.ClearingPeriod ? this.ClearingPeriod : VendGroup::find(this.VendGroup).clearingPeriod());
        #}
      ENDSOURCE
      SOURCE #convertCurrencyCode
        #server void convertCurrencyCode()
        #{
        #    CurrencyCode    origCurrencyCode;
        #    PurchTable      purchTable;
        #
        #    origCurrencyCode = this.orig().Currency;
        #
        #    ttsbegin;
        #
        #    purchTable  = PurchTable::vendOpenOrders(this.AccountNum,true);
        #
        #    while (purchTable)
        #    {
        #        if (purchTable.CurrencyCode == origCurrencyCode)
        #        {
        #            purchTable.convertCurrencyCode(this.Currency);
        #            purchTable.update();
        #        }
        #        next purchTable;
        #    }
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #countryRegionName
        #//BP Deviation Documented
        #display AddressCountryRegionName countryRegionName()
        #{
        #    return AddressCountryRegion::find(this.CountryRegionId).Name;
        #}
      ENDSOURCE
      SOURCE #countyName
        #//BP Deviation Documented
        #display AddressCountyName countyName()
        #{
        #    return AddressCounty::find(this.CountryRegionId, this.State, this.County).Name;
        #}
      ENDSOURCE
      SOURCE #creditMaxCur
        #//BP Deviation Documented
        #display VendCreditMaxCur creditMaxCur()
        #{
        #    return Currency::curAmount(this.CreditMax, this.Currency);
        #}
        #
      ENDSOURCE
      SOURCE #CurrencyName
        #//BP Deviation Documented
        #display CurrencyName currencyName()
        #{
        #    return Currency::find(this.Currency).Txt;
        #}
      ENDSOURCE
      SOURCE #CustomerAccountName
        #//BP Deviation Documented
        #display CustInvoiceAccountName customerAccountName()
        #{
        #    return CustTable::find(this.CustAccount).Name;
        #}
      ENDSOURCE
      SOURCE #delete
        #public void delete()
        #{
        #    CustTable custTable;
        #    ;
        #
        #    ttsbegin;
        #    InventPosting::deleteFromVend(this.AccountNum);
        #    if(VendParameters::find().PurchCycle)
        #    {
        #        SalesPurchCycle::deleteFromVend(this.AccountNum);
        #    }
        #
        #    if (this.CustAccount)
        #    {
        #        custTable = CustTable::find(this.CustAccount, true);
        #
        #        if (custTable)
        #        {
        #            custTable.VendAccount = '';
        #            custTable.update();
        #        }
        #    }
        #
        #    super();
        #    ttscommit;
        #}
        #
      ENDSOURCE
      SOURCE #DlvModeName
        #//BP Deviation Documented
        #display VendDlvModeName dlvModeName()
        #{
        #    return DlvMode::find(this.DlvMode).Txt;
        #}
      ENDSOURCE
      SOURCE #editContactPersonName
        #//AOSRunMode::Called
        #//BP Deviation Documented
        #public edit ContactPersonName editContactPersonName(boolean _set, ContactPersonName _name)
        #{
        #    return this.CustVendTable::editContactPersonName(_set, _name);
        #}
      ENDSOURCE
      SOURCE #EndDiscName
        #//BP Deviation Documented
        #display EndDiscName endDiscName()
        #{
        #    return PriceDiscGroup::find(ModuleInventCustVend::Vend,
        #                                PriceGroupType::EndDiscGroup,
        #                                this.EndDisc).Name;
        #}
      ENDSOURCE
      SOURCE #exceedMax
        #AmountMST exceedMax(AmountMST   _nowBalance)
        #{
        #    return (this.CreditMax ? -this.CreditMax - _nowBalance : 0);
        #}
        #
      ENDSOURCE
      SOURCE #existOpenOrders
        #boolean existOpenOrders()
        #{
        #    return PurchTable::existVendOpenOrder(this.AccountNum);
        #}
      ENDSOURCE
      SOURCE #firstOpenPayment
        #VendTransOpen firstOpenPayment()
        #{
        #    VendTransOpen   vendTransOpen;
        #    ;
        #
        #    vendTransOpen = this.CustVendTable::firstOpenPayment();
        #
        #    return vendTransOpen;
        #}
      ENDSOURCE
      SOURCE #firstSettledPayment
        #VendSettlement firstSettledPayment()
        #{
        #    VendSettlement  vendSettlement;
        #    ;
        #
        #    vendSettlement = this.CustVendTable::firstSettledPayment();
        #
        #    return vendSettlement;
        #}
      ENDSOURCE
      SOURCE #freeValueCur
        #//BP Deviation Documented
        #display VendCreditFreeValueCur freeValueCur(AmountMST _adjustment = 0)
        #{
        #    return this.CustVendTable::freeValueCur(_adjustment);
        #}
      ENDSOURCE
      SOURCE #freeValueMST
        #//BP Deviation Documented
        #display VendCreditFreeValueMST freeValueMST(AmountMST _adjustment = 0)
        #{
        #    return this.CustVendTable::freeValueMST(_adjustment);
        #}
      ENDSOURCE
      SOURCE #getSettleDate
        #public TransDate getSettleDate(SettleDatePrinc    _saveDatePrinciple      = SettleDatePrinc::DateOfPayment,
        #                               TransDate          _saveDate               = dateNull())
        #{
        #    return this.CustVendTable::getSettleDate(_saveDatePrinciple, _saveDate);
        #}
      ENDSOURCE
      SOURCE #getStructDepartment_RU
        #public StructDepartment_RU getStructDepartment_RU()
        #{
        #    return this.StructDepartment_RU;
        #}
      ENDSOURCE
      SOURCE #GraphicsByAgeAllocate
        #client void graphicsByAgeAllocate(Graphics_ByAgeAllocation _graph)
        #{
        #    this.CustVendTable::graphicsByAgeAllocate(_graph, NoYes::Yes);
        #}
      ENDSOURCE
      SOURCE #HasForecastPurch
        #//BP Deviation Documented
        #display ForecastHasPurch hasForecastPurch()
        #{
        #    return (select forecastPurch
        #                where forecastPurch.VendAccountId == this.AccountNum).RecId != 0;
        #}
      ENDSOURCE
      SOURCE #initFromContactInfo
        #void initFromContactInfo()
        #{
        #    this.CustVendTable::initFromContactInfo();
        #}
        #
      ENDSOURCE
      SOURCE #initFromJuridicalPerson
        #// jk 25.04.2007 RDEV_281 KC
        #void initFromJuridicalPerson(JuridicalPerson              _juridicalPerson              = JuridicalPerson::find(this.JuridicalPersonID),
        #                             JuridicalPersonBankAccountId _juridicalPersonBankAccountId = _juridicalPerson.DefaultBankAccountId)
        #{
        #    ;
        #
        #    this.JuridicalPersonID            = _juridicalPerson.JuridicalPersonID;
        #    this.JuridicalPersonBankAccountId =_juridicalPersonBankAccountId;
        #}
      ENDSOURCE
      SOURCE #InitFromPurchTable
        #void initFromPurchTable(PurchTable  _purchTable)
        #{
        #//    this.name           = purchTable.deliveryName;
        #//    this.address        = purchTable.deliveryAddress;
        #
        #//    this.country        = purchTable.dlvCountry;
        #//    this.state          = purchTable.dlvState;
        #//    this.county         = purchTable.dlvCounty;
        #    this.OneTimeVendor  = _purchTable.OneTimeVendor;
        #}
      ENDSOURCE
      SOURCE #initFromVendAdvanceInvoiceTable_CZ
        #private void initFromVendAdvanceInvoiceTable_CZ(CzVendAdvanceInvoiceTable _table)
        #{
        #    this.Name            = _table.Name;
        #    this.Address         = _table.Address;
        #    this.CountryRegionId = _table.CountryRegionId;
        #    this.State           = _table.State;
        #    this.County          = _table.County;
        #    this.Street          = _table.Street;
        #    this.City            = _table.City;
        #    this.ZipCode         = _table.ZipCode;
        #    this.OneTimeVendor   = _table.OneTimeVendor;
        #
        #    this.TownId_RU       = _table.TownId_RU;
        #    this.SettlementId_RU = _table.SettlementId_RU;
        #    this.StreetId_RU     = _table.StreetId_RU;
        #    this.Estate_RU       = _table.Estate_RU;
        #    this.Building_RU     = _table.Building_RU;
        #    this.Flat_RU         = _table.Flat_RU;
        #}
      ENDSOURCE
      SOURCE #InitFromVendGroup
        #void initFromVendGroup(VendGroup _vendGroup)
        #{
        #    VendDefaultAccounts     vendDefaultAccounts;
        #    ;
        #    this.PaymTermId = _vendGroup.PaymTermId;
        #    this.PaymSched  = PaymTerm::find(this.PaymTermId).PaymSched;
        #
        #    vendDefaultAccounts = VendDefaultAccounts::findDefault(this.AccountNum, curext(), _vendGroup.VendGroup);
        #
        #    if (vendDefaultAccounts)
        #    {
        #        this.OffsetAccountType  = vendDefaultAccounts.LedgerJournalACType;
        #        this.OffsetAccount      = vendDefaultAccounts.AccountNum;
        #    }
        #    else
        #    {
        #        this.OffsetAccount = '';
        #    }
        #
        #    this.TaxPeriodPaymentCode_PL = _vendGroup.TaxPeriodPaymentCode_PL ?
        #                                   _vendGroup.TaxPeriodPaymentCode_PL :
        #                                   VendParameters::find().TaxPeriodPaymentCode_PL;
        #
        #    // Kalistratov 30.09.10
        #    this.Netting    = _vendGroup.Netting;
        #}
      ENDSOURCE
      SOURCE #InitValue
        #void initValue()
        #{
        #    PurchParameters purchParameters = PurchParameters::find(); // jk 27.03.2007 R700VM005T KC
        #    VendParameters  vendParameters  = VendParameters::find();  // jk 27.03.2007 RDEV_342 KC
        #    ;
        #    super();
        #
        #    // Syp Modifications - SP3 [JEPPEOML][SE-896-507-5HZD] - BEGIn
        #    // If the languageId and Currency are empty strings a blank new vendor is created in the table and thus
        #    // the following values should be initialised with default values. If the languageId and Currency are non-empty
        #    // the customer is created from a template and the values should not be touched.
        #    // Added the if-construct.
        #    if(this.LanguageId == "" || this.Currency == "")
        #    {
        #        this.LanguageId                 = CompanyInfo::find().LanguageId;
        #        this.Currency                   = CompanyInfo::find().CurrencyCode;
        #        this.PurchAmountPurchaseOrder   = VendParameters::find().AmountPurchaseOrder;
        #        this.PrintModuleType            = ModuleVendPurchParameters::Parameters;
        #        this.MandatoryVatDate_PL        = true;
        #    }
        #    // Syp Modifications - SP3 [JEPPEOML][SE-896-507-5HZD] - ENd
        #
        #
        #    //+ jk 27.03.2007 R700VM005T KC
        #    this.PurchPriceCheckLevel            = purchParameters.PurchPriceCheckLevel;
        #    this.PurchPriceCheckLevel_RContract  = purchParameters.PurchPriceCheckLevel_RContract;
        #    this.PurchPriceDifferencePercent     = purchParameters.PurchPriceDifferencePercent;
        #    this.PurchPriceDiffPercent_RContract = purchParameters.PurchPriceDiffPercent_RContract;
        #    //- jk 27.03.2007 R700VM005T KC
        #
        #    //+ jk 27.03.2007 RDEV_342 KC
        #    this.PaymMode                        = vendParameters.DefaultVendPaymMode;
        #    //- jk 27.03.2007 RDEV_342 KC
        #
        #    //+ SMin smin_FixBugs_10 25.11.2008 KC
        #    if (vendParameters.TaxGroupDefault)
        #    {
        #        this.TaxGroup                       =   vendParameters.TaxGroupDefault;
        #        this.InclTax                        =   NoYes::Yes;
        #    }
        #    //- SMin smin_FixBugs_10 25.11.2008 KC
        #
        #    //TODO константы плохо использовать в коде
        #    this.BankOrderOfPayment_RU     = '6';       // Kalistratov 29.12.09 Bynom CU_00159_4
        #
        #    this.SalesActReturnsTypes   = SalesActReturnsTypes::Element3; // Kalistratov 02.06.11
        #
        #    this.VendContractPriceRejectDaysBack    =   vendParameters.VendContractPriceRejectDaysBack;// smin 28.06.2010 smin_AutoSelectPurchPrice
        #    this.DlvMode                            =   DlvMode::find( 'ТСД' ).Code; // Kalistratov 27.07.10 Планирую запретить операторам нажимать кнопку "Факт Кол-во" -> "Утв.Кол-во"
        #}
        #
      ENDSOURCE
      SOURCE #insert
        #void insert(  boolean _updateCRM = true
        #            , boolean _synhronizeCust = true)// jk 29.03.2007 R700VM008T KC
        #{
        #    VendTable this_Orig = this.orig();
        #    ;
        #
        #    ttsbegin;
        #
        #    this.setNameAlias();
        #    this.Tax1099RegNum = Tax1099ElectronicCheck::formatTIN(this.Tax1099RegNum, this.TaxIDType);
        #
        #    //+ pel 22.03.2007 R700VM004T KC
        #    if (this.FinanceManagerBlocked == NoYes::No)
        #        this.FinanceManagerBlocked = this.checkFinanceManagerBlocked();
        #
        #    if (this.FinanceManagerBlocked == NoYes::Yes)
        #        this.Blocked               = CustVendorBlocked::All;
        #    //- pel 22.03.2007 R700VM004T KC
        #
        #    super();
        #
        #    if (_updateCRM)
        #    {
        #        smmBusRelTable::updateFromVendTableSFA2(this);
        #    }
        #
        #    smmTransLog::initTrans(this, smmLogAction::insert);
        #
        #    //+ jk 29.03.2007 R700VM008T KC
        #    if(_synhronizeCust)
        #    {
        #        this.setAccountOnCust(this_Orig);
        #    }
        #    //- jk 29.03.2007 R700VM008T KC
        #
        #    PurchJournalAutoSummary::initAllFromVendTable(this);
        #
        #    ttscommit;
        #
        #    //+ jk 29.03.2007 R700VM008T KC
        #    if(_synhronizeCust) // Kalistratov 13.01.2011 CU_00096_1 перенес проверку в метод синхронизации
        #    //if(_synhronizeCust && VendGroup::find(this.VendGroup).DoSync)// Smin 27.03.2009 CU_00096_1 KC
        #    ////if(_synhronizeCust)
        #    {
        #        this.synhronizeCust();
        #    }
        #    //- jk 29.03.2007 R700VM008T KC
        #}
      ENDSOURCE
      SOURCE #interCompanyAccount
        #//BP Deviation Documented
        #display InterCompanyCustomer interCompanyAccount()
        #{
        #    AifEndpoint     aifEndpoint;
        #    boolean         interCompanyOrg;
        #    ;
        #    aifEndpoint = AifEndpoint::findInterCompanyEnabled(this.interCompanyEndpointId());
        #    if (aifEndpoint.InterCompanyOrg)
        #    {
        #        changecompany(aifEndpoint.InterCompanyCompanyId)
        #        {
        #            interCompanyOrg = AifEndpoint::findInterCompany(aifEndpoint.DataAreaId).InterCompanyOrg;
        #        }
        #    }
        #    return interCompanyOrg;
        #}
      ENDSOURCE
      SOURCE #interCompanyAccountExist
        #boolean  interCompanyAccountExist()
        #{;
        #    return (this.interCompanyAccount());
        #}
      ENDSOURCE
      SOURCE #interCompanyCompanyId
        #//BP Deviation Documented
        #display InterCompanyCompanyId  interCompanyCompanyId()
        #{
        #    InterCompanyCompanyId   interCompanyCompanyId;
        #    ;
        #
        #    if (this.interCompanyAccountExist())
        #    {
        #        interCompanyCompanyId = AifEndpoint::findInterCompanyEnabled(this.interCompanyEndpointId()).InterCompanyCompanyId;
        #    }
        #
        #    return interCompanyCompanyId;
        #}
      ENDSOURCE
      SOURCE #IntercompanyEndpointId
        #AifEndpointId interCompanyEndpointId()
        #{
        #    return AifEndpointConstraint::findInterCompanyEndpointId(this);
        #}
      ENDSOURCE
      SOURCE #InvoiceAccountName
        #//BP Deviation Documented
        #display VendInvoiceAccountName invoiceAccountName()
        #{
        #    return VendTable::find(this.InvoiceAccount).Name;
        #}
      ENDSOURCE
      SOURCE #invoiceAddress
        #Address invoiceAddress()
        #{
        #    Address     address = Address::find(this.TableId, this.RecId, AddressType::Invoice);
        #    ;
        #    if (!address)
        #    {
        #        address.clear();
        #        address.CountryRegionId = this.CountryRegionId;
        #        address.County          = this.County;
        #        address.Email           = this.Email;
        #        address.SMS             = this.SMS;
        #        address.Name            = this.Name;
        #        address.Phone           = this.Phone;
        #        address.PhoneLocal      = this.PhoneLocal;
        #        address.CellularPhone   = this.CellularPhone;
        #        address.Pager           = this.Pager;
        #        address.State           = this.State;
        #        address.TeleFax         = this.TeleFax;
        #        address.Telex           = this.Telex;
        #        address.URL             = this.URL;
        #        address.ZipCode         = this.ZipCode;
        #        address.Street          = this.Street;
        #        address.City            = this.City;
        #        address.Address         = this.Address;
        #
        #        address.TownId_RU       = this.TownId_RU;
        #        address.SettlementId_RU = this.SettlementId_RU;
        #        address.StreetId_RU     = this.StreetId_RU;
        #        address.Flat_RU         = this.Flat_RU;
        #        address.Building_RU     = this.Building_RU;
        #        address.Estate_RU       = this.Estate_RU;
        #    }
        #
        #    return address;
        #}
      ENDSOURCE
      SOURCE #isInvoiceAccountAlco
        #// smin 18.09.2009 CU_00173_1 KC
        #boolean isInvoiceAccountAlco()
        #{
        #    VendTable       vendTableInvoice    =   vendTable::find(this.InvoiceAccount);
        #    boolean         ret =   false;
        #    ;
        #    if (this.InvoiceAccount && this.AccountNum !=   this.InvoiceAccount)
        #    {
        #        ret = vendTable::find(this.InvoiceAccount).IsAlcoAccount == NoYes::Yes;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #LastInvoice
        #VendInvoiceJour lastInvoice(NoYes _invoiceCustomer = NoYes::Yes)
        #{
        #    VendInvoiceJour vendInvoiceJour;
        #    ;
        #    return this.CustVendTable::lastInvoice(vendInvoiceJour,
        #                                           _invoiceCustomer);
        #
        #}
      ENDSOURCE
      SOURCE #LastInvoiceDate
        #//BP Deviation Documented
        #display InvoiceDate lastInvoiceDate()
        #{
        #    VendInvoiceJour vendInvoiceJour;
        #    ;
        #    select firstonly InvoiceDate from vendInvoiceJour
        #        order by InvoiceDate desc , InvoiceId desc
        #        where vendInvoiceJour.InvoiceAccount   == this.AccountNum   &&
        #              vendInvoiceJour.InvoiceId;
        #
        #    return vendInvoiceJour.InvoiceDate;
        #}
      ENDSOURCE
      SOURCE #LastPayment
        #VendTrans lastPayment()
        #{
        #    VendTrans  vendTrans;
        #
        #    select firstonly vendTrans
        #        index hint AccountDateIdx
        #        order by TransDate desc, Voucher desc
        #        where vendTrans.AccountNum  == this.AccountNum  &&
        #              vendTrans.Invoice     == '';
        #
        #    return vendTrans;
        #}
      ENDSOURCE
      SOURCE #LastPaymentDate
        #//BP Deviation Documented
        #display TransDate lastPaymentDate()
        #{
        #    return this.lastPayment().TransDate;
        #}
      ENDSOURCE
      SOURCE #LineDiscName
        #//BP Deviation Documented
        #display LineDiscName lineDiscName()
        #{
        #    return PriceDiscGroup::find(ModuleInventCustVend::Vend,
        #                                PriceGroupType::LineDiscGroup,
        #                                this.LineDisc).Name;
        #}
      ENDSOURCE
      SOURCE #modifiedField
        #public void modifiedField(fieldId _fieldId)
        #{
        #    super(_fieldId);
        #    switch(_fieldId)
        #    {
        #        case fieldnum(VendTable, Name):
        #            this.setNameAlias();
        #            break;
        #        case fieldnum(VendTable, VendGroup):
        #            this.initFromVendGroup(VendGroup::find(this.VendGroup));
        #            break;
        #        case fieldnum(VendTable, PaymTermId):
        #            this.PaymSched = PaymTerm::find(this.PaymTermId).PaymSched;
        #            break;
        #        case fieldnum(VendTable, PaymMode):
        #            this.CustVendTable::paymModeModified();
        #            break;
        #        case fieldnum(VendTable, ContactPersonId) :
        #            this.initFromContactInfo();
        #            break;
        #        case fieldnum(VendTable, BankCentralBankPurposeCode) :
        #            this.CustVendTable::modifiedBankCentralBankPurposeCode();
        #            break;
        #        // + pel 22.03.2007 R700VM004T KC
        #        case fieldNum(VendTable, Closed):
        #            if (this.Closed == NoYes::Yes && this.Blocked == CustVendorBlocked::No)
        #            {
        #                this.Blocked = CustVendorBlocked::Invoice;
        #                info("@RTL2039");
        #            }
        #            break;
        #        // - pel 22.03.2007 R700VM004T KC
        #
        #        //+ jk 25.04.2007 RDEV_281 KC
        #        case fieldNum(VendTable, JuridicalPersonId):
        #            this.JuridicalPersonBankAccountId = "";
        #            this.initFromJuridicalPerson();
        #            break;
        #        //- jk 25.04.2007 RDEV_281 KC
        #        //+ Smin 27.11.2008 smin_FixBugs_15 KC
        #        case fieldNum(VendTable, INN_RU):
        #        case fieldNum(VendTable, KPP_RU):
        #        case fieldNum(VendTable, Blocked):
        #        case fieldNum(VendTable, TaxGroup):
        #        case fieldNum(VendTable, CustAccount):
        #        case fieldNum(VendTable, BankAccount): // Smin 17.04.2009 CU_00092_1 KC
        #            this.updateCustTable();
        #            break;
        #        //- Smin 27.11.2008 smin_FixBugs_15 KC
        #        //+ Smin 20.03.2009 CU_00092_1 KC
        #        case fieldNum(VendTable, Branch) :
        #            if (!this.Branch)
        #                this.BranchAccount  =   defaultValue_RU(Types::String);
        #            break;
        #        case fieldNum(VendTable, BranchAccount) :
        #            this.INN_RU =   VendTable::find(this.BranchAccount).INN_RU;
        #            break;
        #        //- Smin 20.03.2009 CU_00092_1 KC
        #    }
        #
        #    this.AddressMap::modifiedField(_fieldId);
        #}
        #
      ENDSOURCE
      SOURCE #moduleCustVend
        #public ModuleCustVend moduleCustVend()
        #{
        #    ;
        #    return ModuleCustVend::Vend;
        #}
      ENDSOURCE
      SOURCE #MultiLineDiscName
        #//BP Deviation Documented
        #display MultiLineDiscName multiLineDiscName()
        #{
        #    return PriceDiscGroup::find(ModuleInventCustVend::Vend,
        #                                PriceGroupType::MultiLineDiscGroup,
        #                                this.MultiLineDisc).Name;
        #}
      ENDSOURCE
      SOURCE #NumberOfOriginalsAndCopies
        #container numberOfOriginalsAndCopies(DocumentStatus _documentStatus)
        #{
        #    switch(this.PrintModuleType)
        #    {
        #        case ModuleVendPurchParameters::Vend :
        #            return PurchPrintCopies::numberOfOriginalsAndCopies(    _documentStatus,
        #                                                                    ModuleVendPurchParameters::Vend,
        #                                                                    this.AccountNum,
        #                                                                    '');
        #
        #        case ModuleVendPurchParameters::Parameters :
        #            return PurchPrintCopies::numberOfOriginalsAndCopies(    _documentStatus,
        #                                                                    ModuleVendPurchParameters::Parameters,
        #                                                                    '',
        #                                                                    '');
        #
        #        default:
        #            return [1,0];
        #    }
        #
        #    return [1,0];
        #}
      ENDSOURCE
      SOURCE #openBalanceCur
        #public AmountCur openBalanceCur(TransDate      _fromDate       = dateNull(),
        #                                TransDate      _toDate         = dateMax(),
        #                                TransDate      _assessmentDate = dateNull(),
        #                                CurrencyCode   _currency       = CompanyInfo::standardCurrency())
        #{
        #    ;
        #    return this.CustVendTable::openBalanceCur(_fromDate, _toDate, _assessmentDate, _currency);
        #}
      ENDSOURCE
      SOURCE #OpenBalanceMST
        #AmountMST openBalanceMST(FromDate   _fromDate       = dateNull(),
        #                         ToDate     _toDate         = dateMax(),
        #                         TransDate  _assessmentDate = dateNull())
        #{
        #
        #    return this.CustVendTable::openBalanceMST(_fromDate, _toDate, _assessmentDate);
        #}
      ENDSOURCE
      SOURCE #openBalanceMSTDoc
        #AmountMST openBalanceMSTDoc(TransDate   _transDate  = dateNull(),
        #                            FromDate    _fromDate   = dateNull(),
        #                            ToDate      _toDate     = dateMax())
        #{
        #    return this.CustVendTable::openBalanceMSTDoc(_transDate, _fromDate, _toDate);
        #}
        #
      ENDSOURCE
      SOURCE #OpenBalanceMSTDue
        #AmountMST openBalanceMSTDue(TransDate   _transDate  = dateNull(),
        #                            FromDate    _fromDate   = dateNull(),
        #                            ToDate      _toDate     = dateMax())
        #{
        #    return this.CustVendTable::openBalanceMSTDue(_transDate, _fromDate, _toDate);
        #}
      ENDSOURCE
      SOURCE #openInvoiceBalanceMST
        #AmountMST openInvoiceBalanceMST(FromDate   _fromDate       = dateNull(),
        #                                ToDate     _toDate         = dateMax(),
        #                                TransDate  _assessmentDate = dateNull())
        #{
        #    VendTrans       vendTrans;
        #    VendTransOpen   vendTransOpen;
        #    VendSettlement  vendSettlement;
        #    AmountMST       openBalanceMST = 0;
        #
        #    if (_assessmentDate)
        #    {
        #        select sum(SettleAmountMST),sum(ExchAdjustment) from vendSettlement
        #            group by AccountNum
        #            where vendSettlement.AccountNum == this.AccountNum
        #               && vendSettlement.TransDate  >  _assessmentDate
        #        join vendTrans
        #            where vendTrans.RecId       == vendSettlement.TransRecId
        #               && vendTrans.TransDate   >= _fromDate
        #               && vendTrans.TransDate   <= _toDate
        #               && (vendTrans.Invoice    != ''
        #               || (vendTrans.Invoice    == '' && vendTrans.AmountMST    < 0));
        #
        #        openBalanceMST  = vendSettlement.SettleAmountMST + vendSettlement.ExchAdjustment;
        #        openBalanceMST += this.openBalanceMST(_fromDate, _toDate);
        #    }
        #    else
        #    {
        #        vendTrans       = this.transBuffer();
        #        vendTransOpen   = this.transOpenBuffer();
        #
        #        while select sum(AmountMST) from vendTransOpen
        #        group by RefRecId
        #            where vendTransOpen.AccountNum  == this.AccountNum
        #               && vendTransOpen.TransDate   >= _fromDate
        #               && vendTransOpen.TransDate   <= _toDate
        #            join  vendTrans
        #                where vendTrans.RecId       == vendTransOpen.RefRecId
        #                   && (vendTrans.Invoice    != ''
        #                   || (vendTrans.Invoice    == '' && vendTrans.AmountMST    < 0))
        #        {
        #            openBalanceMST += vendTransOpen.AmountMST;
        #        }
        #    }
        #
        #    return openBalanceMST;
        #}
      ENDSOURCE
      SOURCE #openInvoiceBalanceMSTDoc
        #AmountMST openInvoiceBalanceMSTDoc(TransDate   _transDate  = dateNull(),
        #                                   FromDate    _fromDate   = dateNull(),
        #                                   ToDate      _toDate     = dateMax())
        #{
        #    VendTrans       vendTrans;
        #    VendTransOpen   vendTransOpen;
        #    AmountMST       amountMST = 0;
        #
        #    while select sum(AmountMST) from vendTransOpen
        #        order by RefRecId
        #        where vendTransOpen.AccountNum  == this.AccountNum
        #           && vendTransOpen.TransDate   <= _transDate
        #    exists join vendTrans
        #        where vendTrans.RecId           == vendTransOpen.RefRecId
        #           && ((vendTrans.DocumentDate
        #           &&   vendTrans.DocumentDate  >= _fromDate
        #           &&   vendTrans.DocumentDate  <= _toDate)
        #           ||  (!vendTrans.DocumentDate
        #           &&    vendTrans.TransDate    >= _fromDate
        #           &&    vendTrans.TransDate    <= _toDate))
        #           &&  (vendTrans.Invoice     != ''
        #           ||  (vendTrans.Invoice     == '' && vendTrans.AmountMST        < 0))
        #    {
        #        amountMST += vendTransOpen.AmountMST;
        #    }
        #    return amountMST;
        #}
        #
      ENDSOURCE
      SOURCE #openInvoiceBalanceMSTDue
        #AmountMST openInvoiceBalanceMSTDue(TransDate   _transDate  = dateNull(),
        #                                   FromDate    _fromDate   = dateNull(),
        #                                   ToDate      _toDate     = dateMax())
        #{
        #    VendTransOpen   vendTransOpen;
        #    VendTrans       vendTrans;
        #    AmountMST       amountMST = 0;
        #
        #    while select sum(AmountMST) from vendTransOpen
        #    group by RefRecId
        #        where vendTransOpen.AccountNum  == this.AccountNum
        #           && vendTransOpen.TransDate   <= _transDate
        #           && vendTransOpen.DueDate     >= _fromDate
        #           && vendTransOpen.DueDate     <= _toDate
        #        join vendTrans
        #            where vendTrans.RecId       == vendTransOpen.RefRecId
        #               && (vendTrans.Invoice    != ''
        #               || (vendTrans.Invoice    == '' && vendTrans.AmountMST < 0))
        #    {
        #        amountMST += vendTransOpen.AmountMST;
        #    }
        #    return amountMST;
        #}
      ENDSOURCE
      SOURCE #openPaymentBalanceMST
        #AmountMST openPaymentBalanceMST(FromDate   _fromDate       = dateNull(),
        #                                ToDate     _toDate         = dateMax(),
        #                                TransDate  _assessmentDate = dateNull())
        #{
        #    VendTrans       vendTrans;
        #    VendTransOpen   vendTransOpen;
        #    VendSettlement  vendSettlement;
        #    AmountMST       openBalanceMST;
        #    ;
        #
        #    if (_assessmentDate)
        #    {
        #        select sum(SettleAmountMST),sum(ExchAdjustment) from vendSettlement
        #            group by AccountNum
        #            where vendSettlement.AccountNum == this.AccountNum
        #               && vendSettlement.TransDate  >  _assessmentDate
        #        join vendTrans
        #            where vendTrans.RecId       == vendSettlement.TransRecId
        #               && vendTrans.TransDate   >= _fromDate
        #               && vendTrans.TransDate   <= _toDate
        #               && vendTrans.AmountMST    > 0
        #               && vendTrans.Invoice     == '';
        #        {
        #            openBalanceMST  = vendSettlement.SettleAmountMST + vendSettlement.ExchAdjustment;
        #            openBalanceMST += this.openBalanceMST(_fromDate, _toDate);
        #        }
        #    }
        #    else
        #    {
        #        vendTrans       = this.transBuffer();
        #        vendTransOpen   = this.transOpenBuffer();
        #
        #        while select sum(AmountMST) from vendTransOpen
        #        group by RefRecId
        #            where vendTransOpen.AccountNum  == this.AccountNum
        #              &&  vendTransOpen.TransDate   >= _fromDate
        #              &&  vendTransOpen.TransDate   <= _toDate
        #            join  vendTrans
        #                where vendTrans.RecId       == vendTransOpen.RefRecId
        #                   && vendTrans.AmountMST    > 0
        #                   && vendTrans.Invoice     == ''
        #        {
        #            openBalanceMST += vendTransOpen.AmountMST;
        #        }
        #    }
        #
        #    return openBalanceMST;
        #}
      ENDSOURCE
      SOURCE #openPaymentBalanceMSTDoc
        #AmountMST openPaymentBalanceMSTDoc(TransDate   _transDate  = dateNull(),
        #                                   FromDate    _fromDate   = dateNull(),
        #                                   ToDate      _toDate     = dateMax())
        #{
        #    VendTrans       vendTrans;
        #    VendTransOpen   vendTransOpen;
        #    AmountMST       amountMST = 0;
        #
        #    while select sum(AmountMST) from vendTransOpen
        #        order by RefRecId
        #        where vendTransOpen.AccountNum  == this.AccountNum  &&
        #              vendTransOpen.TransDate   <= _transDate
        #     exists join vendTrans
        #        where vendTrans.RecId            == vendTransOpen.RefRecId  &&
        #            ((vendTrans.DocumentDate                                &&
        #              vendTrans.DocumentDate     >= _fromDate               &&
        #              vendTrans.DocumentDate     <= _toDate)                &&
        #             (!vendTrans.DocumentDate                               &&
        #              vendTrans.DocumentDate     >= _fromDate               &&
        #              vendTrans.DocumentDate     <= _toDate))               &&
        #              vendTrans.AmountMST         > 0                       &&
        #              vendTrans.Invoice          == ''
        #    {
        #        amountMST += vendTransOpen.AmountMST;
        #    }
        #    return amountMST;
        #}
        #
        #
      ENDSOURCE
      SOURCE #openPaymentBalanceMSTDue
        #AmountMST openPaymentBalanceMSTDue(TransDate   _transDate  = dateNull(),
        #                                   FromDate    _fromDate   = dateNull(),
        #                                   ToDate      _toDate     = dateMax())
        #{
        #    VendTransOpen   vendTransOpen;
        #    VendTrans       vendTrans;
        #    AmountMST       amountMST = 0;
        #
        #    while select sum(AmountMST) from vendTransOpen
        #    group by RefRecId
        #        where vendTransOpen.AccountNum  == this.AccountNum
        #           && vendTransOpen.TransDate   <= _transDate
        #           && vendTransOpen.DueDate     >= _fromDate
        #           && vendTransOpen.DueDate     <= _toDate
        #        join vendTrans
        #            where vendTrans.RecId  == vendTransOpen.RefRecId
        #               && vendTrans.AmountMST    > 0
        #               && vendTrans.Invoice     == ' '
        #    {
        #        amountMST += vendTransOpen.AmountMST;
        #    }
        #    return amountMST;
        #}
      ENDSOURCE
      SOURCE #originalsCopiesFooterText
        #container originalsCopiesFooterText(DocumentStatus _documentStatus)
        #{
        #    switch(this.PrintModuleType)
        #    {
        #        case ModuleVendPurchParameters::Vend :
        #            return PurchPrintCopies::originalsCopiesFooterText( _documentStatus,
        #                                                                ModuleVendPurchParameters::Vend,
        #                                                                this.AccountNum,
        #                                                                '');
        #
        #        case ModuleVendPurchParameters::Parameters :
        #            return PurchPrintCopies::originalsCopiesFooterText( _documentStatus,
        #                                                                ModuleVendPurchParameters::Parameters,
        #                                                                '',
        #                                                                '');
        #
        #        default:
        #            return ['',''];
        #    }
        #
        #    return ['',''];
        #}
      ENDSOURCE
      SOURCE #paymName
        #//BP Deviation Documented
        #display Description paymName()
        #{
        #    return this.CustVendTable::paymName();
        #}
      ENDSOURCE
      SOURCE #PriceDiscGroupName
        #//BP Deviation Documented
        #display PriceDiscName priceDiscGroupName()
        #{
        #    return PriceDiscGroup::find(ModuleInventCustVend::Vend,
        #                                PriceGroupType::PriceGroup,
        #                                this.PriceGroup).Name;
        #}
      ENDSOURCE
      SOURCE #PurchLedgerAccount
        #//BP Deviation Documented
        #display LedgerAccount purchLedgerAccount(VendPostingProfile _vendPostingProfile = VendParameters::find().PostingProfile)
        #{
        #
        #    return VendLedgerAccounts::purchLedgerAccount(this.AccountNum, _vendPostingProfile);
        #}
      ENDSOURCE
      SOURCE #PurchLedgerOffsetAccount
        #//BP Deviation Documented
        #display LedgerAccount purchLedgerOffsetAccount(VendPostingProfile _vendPostingProfile = VendParameters::find().PostingProfile)
        #{
        #    return VendLedgerAccounts::purchLedgerOffsetAccount(this.AccountNum, _vendPostingProfile);
        #}
      ENDSOURCE
      SOURCE #SetAccountOnCust
        #// jk 29.03.2007 R700VM008T KC
        #void setAccountOnCust(VendTable _vendTable_Orig)
        #{
        #
        #    CustTable custTable;
        #    ;
        #
        #    ttsbegin;
        #
        #    if(   this.CustAccount  != _vendTable_Orig.CustAccount)
        #    {
        #        if(_vendTable_Orig.CustAccount)
        #        {
        #            custTable = CustTable::find(_vendTable_Orig.CustAccount, true);
        #
        #            if(custTable)
        #            {
        #                custTable.VendAccount = '';
        #                custTable.update();
        #            }
        #        }
        #
        #        if(this.CustAccount)
        #        {
        #            custTable = CustTable::find(this.CustAccount, true);
        #
        #            if(custTable)
        #            {
        #                custTable.VendAccount = this.AccountNum;
        #                custTable.update();
        #            }
        #        }
        #    }
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #SetNameAlias
        #void setNameAlias()
        #{
        #    if (! this.NameAlias)
        #    {
        #        this.NameAlias = this.Name;
        #    }
        #}
      ENDSOURCE
      SOURCE #settlementBuffer
        #VendSettlement settlementBuffer()
        #{
        #    VendSettlement  vendSettlement;
        #    ;
        #
        #    return vendSettlement;
        #}
      ENDSOURCE
      SOURCE #showContactPerson
        #//BP Deviation Documented
        #display ContactPersonName showContactPerson()
        #{;
        #    return ContactPerson::find(this.ContactPersonId).Name;
        #}
      ENDSOURCE
      SOURCE #stateName
        #//BP Deviation Documented
        #display AddressStatename stateName()
        #{
        #    return AddressState::find(this.CountryRegionId, this.State).Name;
        #}
      ENDSOURCE
      SOURCE #SumAccount
        #//BP Deviation Documented
        #display LedgerAccount sumAccount(VendPostingProfile _vendPostingProfile = VendParameters::find().PostingProfile)
        #{
        #    return VendLedgerAccounts::sumAccount(this.AccountNum, _vendPostingProfile);
        #}
      ENDSOURCE
      SOURCE #synhronizeCust
        #// jk 29.03.2007 R700VM008T KC
        #void synhronizeCust()
        #{
        #    CustVendSynhronization_Vend synhronizationVend;
        #    ;
        #    if(VendGroup::find(this.VendGroup).DoSync)// Kalistratov 13.01.2011 CU_00096_1 данный метод вызывается из insert и update
        #    {
        #        synhronizationVend = new CustVendSynhronization_Vend();
        #        synhronizationVend.parmCustVendTable(this);
        #        synhronizationVend.run();
        #    }
        #}
      ENDSOURCE
      SOURCE #TaxGroupName
        #//BP Deviation Documented
        #display TaxGroupName taxGroupName()
        #{
        #    return TaxGroupHeading::find(this.TaxGroup).TaxGroupName;
        #}
      ENDSOURCE
      SOURCE #transBuffer
        #VendTrans transBuffer()
        #{
        #    VendTrans   vendTrans;
        #    ;
        #
        #    return vendTrans;
        #}
      ENDSOURCE
      SOURCE #transOpenBuffer
        #VendTransOpen transOpenBuffer()
        #{
        #    VendTransOpen   vendTransOpen;
        #    ;
        #
        #    return vendTransOpen;
        #}
      ENDSOURCE
      SOURCE #Update
        #void update(  boolean _updateSmmBusRelTable = true
        #            , boolean _synhronizeCust = true        // jk 29.03.2007 R700VM008T KC
        #            , boolean _syncInvoiceBlock = true)     // smin 23.09.2010 smin_VendTableCloseJournal
        #{
        #    VendTable       this_Orig    = this.orig();
        #    ForecastPurch   forecastPurch;
        #    ;
        #
        #    ttsbegin;
        #
        #    this.setNameAlias();
        #
        #    if (this.dataSource())
        #    {
        #        this.Tax1099RegNum = Tax1099ElectronicCheck::formatTIN(this.Tax1099RegNum, this.TaxIDType);
        #    }
        #
        #    //+ pel 22.03.2007 R700VM004T KC
        #    if (this.FinanceManagerBlocked == NoYes::No)
        #        this.FinanceManagerBlocked = this.checkFinanceManagerBlocked();
        #
        #    if (this.FinanceManagerBlocked == NoYes::Yes)
        #        this.Blocked               = CustVendorBlocked::All;
        #
        #    if (this.Closed == NoYes::Yes && this.Blocked == CustVendorBlocked::No)
        #        this.Blocked = CustVendorBlocked::Invoice;
        #    //- pel 22.03.2007 R700VM004T KC
        #
        #    this.updateVendNameFields(); // Smin 21.04.2009 CU_00118_1 KC
        #
        #    super();
        #
        #    if (_updateSmmBusRelTable)
        #    {
        #        smmBusRelTable::updateFromVendTableSFA2(this);
        #    }
        #
        #    smmTransLog::initTrans(this, smmLogAction::update);
        #
        #    if (this_Orig.VendGroup != this.VendGroup)
        #    {
        #        while select forupdate forecastPurch
        #            where forecastPurch.VendAccountId   == this.AccountNum      &&
        #                  forecastPurch.VendGroupId     == this_Orig.VendGroup  &&
        #                  forecastPurch.ExpandId        == 0
        #        {
        #
        #            forecastPurch.VendGroupId = this.VendGroup;
        #            forecastPurch.update();
        #        }
        #
        #    }
        #
        #    //+ jk 29.03.2007 R700VM008T KC
        #    if(_synhronizeCust)
        #    {
        #        this.setAccountOnCust(this_Orig);
        #    }
        #    //- jk 29.03.2007 R700VM008T KC
        #
        #    ttscommit;
        #
        #    //+ jk 29.03.2007 R700VM008T KC
        #    if(   _synhronizeCust )
        #       // Kalistratov 12.07.10 Иначе сущ.справочники синхронизируются, только в случае если была снята блокировка
        #       //&& this.Blocked      == CustVendorBlocked::No
        #       //&& this_Orig.Blocked != CustVendorBlocked::No)
        #    {
        #        this.synhronizeCust();
        #    }
        #    //- jk 29.03.2007 R700VM008T KC
        #
        #}
        #
      ENDSOURCE
      SOURCE #UpdateCustAccount
        #/*
        #    AOSRunMode::Called
        #*/
        #void updateCustAccount(CustAccount _custAccount)
        #{
        #    this.CustAccount  = _custAccount;
        #    this.update();
        #
        #}
      ENDSOURCE
      SOURCE #updateCustTable
        #// Smin 27.11.2008 smin_FixBugs_15 KC
        #void updateCustTable()
        #{
        #    CustTable   custTable;
        #    ;
        #    if (this.CustAccount &&
        #        Box::okCancel(  strfmt('Перенести измененные поля в карточку клиента %1', this.CustAccount),
        #                        DialogButton::Ok,
        #                        'Внимание') ==  DialogButton::Ok)
        #    {
        #        ttsBegin;
        #
        #        custTable   =   CustTable::find(this.CustAccount, true);
        #
        #        if (!custTable)
        #        {
        #            ttsAbort;
        #            return;
        #        }
        #
        #        custTable.INN_RU        =   this.INN_RU;
        #        custTable.KPP_RU        =   this.KPP_RU;
        #        custTable.TaxGroup      =   this.TaxGroup;
        #        custTable.Blocked       =   this.Blocked;
        #        custTable.BankAccount   =   this.BankAccount; // Smin 17.04.2009 CU_00092_1 KC
        #
        #        custTable.doUpdate();
        #
        #        ttsCommit;
        #    }
        #}
      ENDSOURCE
      SOURCE #updateOffsetAccount
        #/*
        #    AOSRunMode::Called
        #*/
        #void updateOffsetAccount()
        #{
        #    Counter             numOfDefaultAccounts;
        #    VendDefaultAccounts vendDefaultAccounts;
        #    ;
        #    ttsbegin;
        #
        #    numOfDefaultAccounts = VendDefaultAccounts::numOfVendAccount(this.AccountNum);
        #
        #    if (numOfDefaultAccounts > 1)
        #    {
        #        select firstonly vendDefaultAccounts
        #            where vendDefaultAccounts.VendAccount == this.AccountNum &&
        #                  vendDefaultAccounts.IsDefault;
        #
        #        if (vendDefaultAccounts)
        #        {
        #            this.OffsetAccountType  = vendDefaultAccounts.LedgerJournalACType;
        #            this.OffsetAccount      = vendDefaultAccounts.AccountNum;
        #        }
        #        else
        #        {
        #            this.OffsetAccountType  = LedgerJournalACType::Ledger;
        #            this.OffsetAccount      = '';
        #        }
        #    }
        #    else
        #    {
        #        if (numOfDefaultAccounts == 1)
        #        {
        #            vendDefaultAccounts     = VendDefaultAccounts::findVend(this.AccountNum);
        #            this.OffsetAccountType  = vendDefaultAccounts.LedgerJournalACType;
        #            this.OffsetAccount      = vendDefaultAccounts.AccountNum;
        #        }
        #        else
        #        {
        #            this.OffsetAccountType  = LedgerJournalACType::Ledger;
        #            this.OffsetAccount      = '';
        #        }
        #    }
        #
        #    this.update();
        #    ttscommit;
        #}
        #
      ENDSOURCE
      SOURCE #updateVendNameFields
        #// Smin 21.04.2009 CU_00118_1 KC
        #void updateVendNameFields()
        #{
        #    InventTable         inventTable;
        #    VendTableCloseLog   vendTableCloseLog; // smin 23.09.2010 smin_VendTableCloseJournal
        #    ;
        #    if (this.Name !=    this.orig().Name)
        #    {
        #    update_recordset inventTable
        #        setting vendName    =   this.Name
        #        where inventTable.PrimaryVendorId   ==  this.AccountNum;
        #
        #    update_recordset vendTableCloseLog
        #        setting VendName = this.Name
        #        where vendTableCloseLog.VendAccount ==  this.AccountNum;
        #}
        #}
        #
      ENDSOURCE
      SOURCE #validateCheckFields
        #// Smin 18.03.2009 smin_FixBugs_10 KC
        #boolean validateCheckFields()
        #{
        #    #AOT
        #    xInfo       info = new xInfo();
        #    TreeNode    node = info.rootNode();
        #    fieldId     field;
        #    TableId     tableId = tablenum(vendTable);
        #    DictField   dict;
        #    Container   checkFields =   VendParameters::find().FinanceCheckedField;
        #    boolean     ret =   true;
        #
        #    node = TreeNode::findNode(#TablesPath + '\\' + identifierStr(vendTable) + '\\Field Groups\\CheckFinance');
        #
        #    if (!node) return ret;
        #
        #    node = node.AOTfirstChild();
        #
        #    while (node)
        #    {
        #        field = fieldname2id(tableId, node.treeNodeName());
        #        if (field)
        #        {
        #            dict = new DictField(tableId, field);
        #
        #            if (!(this.IndependentRetailer && field ==  fieldNum(VendTable, KPP_RU)) // Smin 13.04.2009 CU_00112_1 KC
        #                &&  confind(checkFields, strupr(dict.name()))
        #                &&  !this.(field))
        #                ret =   checkFailed(strfmt('Поле "%1" обязательно для заполнения', dict.label()));
        #        }
        #        node = node.AOTnextSibling();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #validateDelete
        #public boolean validateDelete()
        #{
        #    boolean         ret;
        #    VendTable       vendTable;
        #    smmBusRelTable  smmBusRelTable;
        #
        #    ret = super();
        #
        #    if (this.AccountNum)
        #    {
        #        select count(RecId) from vendTable
        #            where vendTable.InvoiceAccount == this.AccountNum;
        #
        #        if (vendTable.RecId)
        #        {
        #            ret = checkFailed("@SYS67134");
        #        }
        #    }
        #
        #    if (smmLicense::CRM())
        #    {
        #        smmBusRelTable = smmBusRelTable::findVend(this.AccountNum);
        #
        #        if (smmBusRelTable)
        #        {
        #            ret = ret && smmBusRelTable.validateDelete();
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #validateField
        #boolean validateField(fieldId p1)
        #{
        #    boolean ret;
        #    ;
        #    ret = super(p1);
        #
        #    if (ret)
        #    {
        #        switch (p1)
        #        {
        #            case fieldnum(VendTable, VATNum):
        #                ret = TaxVATNumTable::checkVATNum(this.VATNum, this, p1);
        #                if (ret)
        #                {
        #                    ret = this.checkVATNumUsed();
        #                }
        #                break;
        #
        #            case fieldnum(VendTable, CreditMax) :
        #                if (this.CreditMax < 0)
        #                {
        #                    ret = checkFailed("@SYS69970");
        #                }
        #                break;
        #
        #            case fieldnum(VendTable, INN_RU):
        #                ret = CompanyInfo::checkInn_RU(this.INN_RU);
        #                break;
        #
        #            case fieldnum(VendTable, Tax1099RegNum):
        #                if (CompanyInfo::find().Validate1099OnEntry)
        #                {
        #                    ret = Tax1099ElectronicCheck::validateTINIRS(this.Tax1099RegNum, tablepname(VendTable), fieldpname(VendTable, Tax1099RegNum), false, this.AccountNum); // writeToFile
        #                }
        #                break;
        #            case fieldnum(VendTable, EnterpriseNumber) :
        #                ret = ret && TaxEnterpriseBranchNumber_BE::checkEnterPriseNumber(this.EnterpriseNumber, this.VATNum);
        #                break;
        #
        #            case fieldnum(VendTable, URL) :
        #                if (this.URL)
        #                {
        #                    ret = ret && isValidURL(this.URL);
        #                    if (!ret)
        #                    {
        #                        ret = checkFailed("@SYS91305");
        #                    }
        #                }
        #                break;
        #            //+ pel 22.03.2007 R700VM004T KC
        #            case fieldNum(VendTable, Blocked):
        #                if (this.Closed == NoYes::Yes && this.Blocked == CustVendorBlocked::No)
        #                {
        #                    this.Blocked = CustVendorBlocked::Invoice;
        #                    ret = checkFailed(strFmt("@RTL2040",
        #                                      fieldLabel(tableNum(VendTable), fieldNum(VendTable, Blocked)),
        #                                      CustVendorBlocked::No));
        #                }
        #                break;
        #            //- pel 22.03.2007 R700VM004T KC
        #            // + PEL 20.02.2006 RDEV-340 KC
        #            case fieldnum(VendTable, FinanceManagerBlocked) :
        #                if (this.checkFinanceManagerBlocked() == NoYes::Yes)
        #                {
        #                    ret = checkFailed("@RTL3066");
        #                }
        #                break;
        #            // - PEL 20.02.2006 RDEV-340 KC
        #
        #        }
        #    }
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #validateIRSData
        #boolean validateIRSData(boolean writeToFile = false)
        #{
        #    boolean ret;
        #    boolean nameOK;
        #    boolean streetOK;
        #    boolean cityOK;
        #    boolean stateOK;
        #    boolean zipCodeOK;
        #    boolean tax1099RegNumOK;
        #    ;
        #
        #    setprefix(strfmt("@SYS84735", "@SYS84767"));
        #
        #    nameOK = Tax1099ElectronicCheck::validateForIRS(this.Name, tablepname(VendTable), fieldpname(VendTable, Name), writeToFile, this.AccountNum);
        #
        #    streetOK = Tax1099ElectronicCheck::validateForIRS(this.Street, tablepname(VendTable), fieldpname(VendTable, Street), writeToFile, this.AccountNum);
        #
        #    cityOK = Tax1099ElectronicCheck::validateForIRS(this.City, tablepname(VendTable), fieldpname(VendTable, City), writeToFile, this.AccountNum);
        #
        #    stateOK = Tax1099ElectronicCheck::validateForIRS(this.State, tablepname(VendTable), fieldpname(VendTable, State), writeToFile, this.AccountNum);
        #
        #    zipCodeOK = Tax1099ElectronicCheck::validateForIRS(this.ZipCode, tablepname(VendTable), fieldpname(VendTable, ZipCode), writeToFile, this.AccountNum);
        #
        #    tax1099RegNumOK = Tax1099ElectronicCheck::validateTINIRS(this.Tax1099RegNum, tablepname(VendTable), fieldpname(VendTable, Tax1099RegNum), writeToFile, this.AccountNum);
        #
        #    ret = nameOK && streetOK && cityOK && stateOK && zipCodeOK && tax1099RegNumOK;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #ValidateWrite
        #boolean  validateWrite()
        #{
        #    boolean ret;
        #    smmBusRelTable  smmBusRelTable;
        #    ;
        #
        #    ret = super();
        #
        #    //+ jk 25.05.2007 RDEV_243 KC
        #    ret = ret && JuridicalPersonAccount::validateJuridicalPerson(  this.JuridicalPersonId
        #                                                                 , this.JuridicalPersonBankAccountId);
        #    //- jk 25.05.2007 RDEV_243 KC
        #
        #    if (ret)
        #    {
        #        if (this.Tax1099Reports == NoYes::Yes && ! this.Tax1099RegNum)
        #        {
        #            ret = checkFailed(strfmt("@SYS84888", this.AccountNum));
        #        }
        #
        #        if (!this.OneTimeVendor && TaxVATNumTable::isVATNumMandatory(VendParameters::find().MandatoryVATNum, this))
        #        {
        #            ret = checkFailed("@SYS54494");
        #        }
        #
        #        if (this.TaxWithholdCalculate && this.TaxWithholdGroup == '')
        #        {
        #            ret = checkFailed(strfmt("@SYS81766",
        #                                     fieldid2pname(tablenum(VendTable), fieldnum(VendTable, TaxWithholdCalculate)),
        #                                     fieldid2pname(tablenum(VendTable), fieldnum(VendTable, TaxWithholdGroup))));
        #        }
        #    }
        #
        #    if (ret && smmLicense::CRM())
        #    {
        #        smmBusRelTable.BusRelAccount    = smmBusRelTable::findVend(this.AccountNum).BusRelAccount;
        #
        #        if (smmBusRelTable.BusRelAccount || (!this.RecId && smmParametersTable::find().CreateRelationsForVendors))
        #        {
        #            smmBusRelTable.Phone            = this.Phone;
        #            smmBusRelTable.Address          = this.Address;
        #            smmBusRelTable.Name             = this.Name;
        #            ret = !smmBusRelTable.duplicateCheck();
        #        }
        #    }
        #
        #    if (ret)
        #    {
        #        if (CompanyInfo::find().Validate1099OnEntry && this.Tax1099Reports == NoYes::Yes)
        #            ret = this.validateIRSData(false);
        #    }
        #
        #    if (ret)
        #    {
        #        ret = appl.dimensionSetValidation().checkDimension(this, fieldnum(VendTable, Dimension), true);
        #    }
        #
        #    ret =   this.validateCheckFields() && ret; // Smin 18.03.2009 smin_FixBugs_10 KC
        #
        #    //+ Smin 20.03.2009 CU_00092_1 KC
        #    if (this.Branch)
        #    {
        #        if (!this.BranchAccount)
        #            ret =   checkFailed('Поле "Головное подразделение" обязательно для заполнения');
        #        else if (this.INN_RU != VendTable::find(this.BranchAccount).INN_RU)
        #            ret = checkFailed(strfmt('Не совпадает ИНН филиала и главного подразделения'));
        #    }
        #    //- Smin 20.03.2009 CU_00092_1 KC
        #    ret =   this.checkDoubleINN() && ret; // Smin 19.02.2009 CU_00078_1 KC
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #XcheckVendAccount
        #boolean xcheckVendAccount()
        #{
        #    VendTable   vendTable;
        #    ;
        #
        #    select firstonly vendTable where vendTable.CustAccount == this.CustAccount;
        #
        #    if (vendTable)
        #    {
        #        if (Box::yesNo(strfmt("@SYS58252",vendTable.AccountNum),DialogButton::Yes) == DialogButton::Yes)
        #        {
        #            return true;
        #        }
        #        else
        #        {
        #            return false;
        #        }
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #blocked
        #static CustVendorBlocked blocked(VendAccount vendAccount)
        #{
        #    return VendTable::find(vendAccount).Blocked;
        #}
      ENDSOURCE
      SOURCE #blockedForAll
        #static boolean blockedForAll(VendAccount vendAccount)
        #{
        #    VendTable vendTable = VendTable::find(vendAccount);
        #    ;
        #    return vendTable.checkBlockedAll();
        #}
      ENDSOURCE
      SOURCE #blockPurchPlanningRequest
        #// smin 15.02.2011 smin_VendTableCloseJournal KC
        #static void blockPurchPlanningRequest(VendAccount       _vendAccount,
        #                                      RContractCode     _rContractCode = '',
        #                                      RContractAccount  _rContractAccount = '',
        #                                      TransDate         _transDate = systemDateGet())
        #{
        #    PurchPlanningRequestSchedule        purchPlanningRequestSchedule;
        #    PurchPlanningDeliverySchedule       purchPlanningDeliverySchedule;
        #    ;
        #    ttsBegin;
        #
        #    update_recordset purchPlanningRequestSchedule
        #        setting Blocked = NoYes::Yes
        #        where purchPlanningRequestSchedule.VendAccount  ==  _vendAccount
        #           && (!_rContractCode || purchPlanningRequestSchedule.RContractCode        ==  _rContractCode)
        #           && (!_rContractAccount || purchPlanningRequestSchedule.RContractAccount  ==  _rContractAccount);
        #
        #    delete_from purchPlanningDeliverySchedule
        #        where purchPlanningDeliverySchedule.VendAccount ==  _vendAccount
        #           && (!_rContractCode || purchPlanningDeliverySchedule.RContractCode        ==  _rContractCode)
        #           && (!_rContractAccount || purchPlanningDeliverySchedule.RContractAccount  ==  _rContractAccount)
        #           && purchPlanningDeliverySchedule.RequestDate ==  _transDate;
        #
        #    ttsCommit;
        #}
      ENDSOURCE
      SOURCE #canVendorBeUpdated
        #static boolean canVendorBeUpdated(VendAccount           _vendAccount,
        #                                  VendInvoiceAccount    _invoiceAccount,
        #                                  DocumentStatus        _documentStatus = DocumentStatus::None)
        #{
        #    boolean  ok = true;
        #    ;
        #
        #    if (_documentStatus == DocumentStatus::Invoice   ||
        #        _documentStatus == DocumentStatus::Facture_RU)
        #    {
        #        ok = (!(VendTable::blocked(_vendAccount)    != CustVendorBlocked::No    ||
        #                VendTable::blocked(_invoiceAccount) != CustVendorBlocked::No));
        #    }
        #    else
        #    {
        #        ok = (!(VendTable::blocked(_vendAccount) == CustVendorBlocked::All));
        #    }
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #cashDiscAccount
        #static LedgerAccount cashDiscAccount(VendAccount _vendAccount)
        #{
        #    return CashDisc::accountReceived(VendTable::find(_vendAccount).CashDisc);
        #
        #}
      ENDSOURCE
      SOURCE #changeDefaultAccounts
        #client static void changeDefaultAccounts(VendTable          _vendTable,
        #                                         FormStringControl  _ctrl)
        #{
        #    Args                args = new Args();
        #    FormRun             formRun;
        #    ;
        #
        #    args.name(formstr(VendDefaultLedgerListPanel));
        #    args.caller(_ctrl);
        #    args.record(_vendTable);
        #
        #    formRun = classfactory.formRunClass(args);
        #    formRun.init();
        #    if (formRun)
        #    {
        #        formRun.run();
        #        formRun.wait();
        #    }
        #}
      ENDSOURCE
      SOURCE #checkBlockedForAll
        #static boolean checkBlockedForAll(VendAccount _vendAccount)
        #{
        #    return VendTable::find(_vendAccount).checkBlockedAll();
        #
        #}
      ENDSOURCE
      SOURCE #checkCreditLimit
        #server static boolean checkCreditLimit(VendAccount          _vendAccount,
        #                                       TypeOfCreditmaxCheck _check,
        #                                       AmountMST            _amountMST = 0,
        #                                       PurchId              _excludePurchId = '')
        #{
        #    VendTable   vendTable = VendTable::find(_vendAccount);
        #    AmountMST   openBalanceMst;
        #    AmountMST   purchBalanceMst;
        #
        #
        #    if (vendTable.CreditMax > 0)
        #    {
        #        if (_check != TypeOfCreditmaxCheck::None)
        #        {
        #            openBalanceMst = -vendTable.openBalanceMST();
        #        }
        #
        #        switch(_check)
        #        {
        #            case TypeOfCreditmaxCheck::None :
        #                return true;
        #
        #            case TypeOfCreditmaxCheck::Balance :
        #                purchBalanceMst = _amountMST;
        #                if (openBalanceMst + purchBalanceMst > vendTable.CreditMax)
        #                {
        #                    return checkFailed(strfmt("@SYS21487",openBalanceMst,purchBalanceMst,
        #                                                          openBalanceMst+purchBalanceMst,vendTable.CreditMax));
        #                }
        #                return true;
        #
        #            case TypeOfCreditmaxCheck::BalanceAll :
        #                purchBalanceMst = PurchTable::balanceAmountNotInvoiced(_vendAccount, _excludePurchId) + _amountMST;
        #                if (openBalanceMst + purchBalanceMst > vendTable.CreditMax)
        #                {
        #                    return checkFailed(strfmt("@SYS25668",openBalanceMst,purchBalanceMst,
        #                                               openBalanceMst+purchBalanceMst,vendTable.CreditMax,
        #                                               (openBalanceMst+purchBalanceMst)-vendTable.CreditMax));
        #                }
        #                return true;
        #
        #            case TypeOfCreditmaxCheck::BalanceDelivered :
        #                purchBalanceMst = PurchTable::balanceAmountDelivered(_vendAccount, _excludePurchId) + _amountMST;
        #                if (openBalanceMst + purchBalanceMst > vendTable.CreditMax)
        #                {
        #                    return checkFailed(strfmt("@SYS25668",openBalanceMst,purchBalanceMst,
        #                                                          openBalanceMst+purchBalanceMst,vendTable.CreditMax,
        #                                                          (openBalanceMst+purchBalanceMst)-vendTable.CreditMax));
        #                }
        #                return true;
        #
        #            default :
        #                return checkFailed(strfmt("@SYS12580", _check));
        #        }
        #    }
        #    return true;
        #}
      ENDSOURCE
      SOURCE #checkExist
        #static boolean checkExist(VendAccount _vendAccount)
        #{
        #    boolean ret = true;
        #
        #    if (_vendAccount && !VendTable::exist(_vendAccount))
        #    {
        #        ret = checkFailed(strfmt(VendTable::txtNotExist(),_vendAccount));
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkExistAndOpen
        #static boolean checkExistAndOpen(VendAccount        _vendAccount,
        #                                 AmountMST          _amountMST,
        #                                 LedgerTransType    _ledgerTransType)
        #{
        #    boolean     ret = true;
        #    VendTable   vendTable;
        #    ;
        #    vendTable = VendTable::find(_vendAccount);
        #
        #    if (! vendTable)
        #    {
        #        ret = checkFailed(strfmt("@SYS11817", _vendAccount));
        #    }
        #    else
        #    {
        #        if (vendTable.Blocked   == CustVendorBlocked::All       ||
        #           (vendTable.Blocked   == CustVendorBlocked::Invoice   &&
        #            _amountMST           > 0                            &&
        #            _ledgerTransType    != LedgerTransType::Interest))
        #        {
        #            ret = checkFailed(strfmt("@SYS1138", _vendAccount));
        #        }
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #createOneTimeAccount
        #server static VendAccount createOneTimeAccount(PurchTable _purchTable)
        #{
        #    NumberSeq   numberSeq;
        #    VendTable   vendTable;
        #    ;
        #
        #    if (!VendTable::createOneTimeAccountValidate())
        #    {
        #        return '';
        #    }
        #
        #    ttsbegin;
        #
        #    numberSeq   =  NumberSeq::newGetNum(VendParameters::numRefOneTimeSupplierAccount());
        #    vendTable   = VendTable::find(VendParameters::find().DefaultVend);
        #
        #    vendTable.AccountNum = numberSeq.num();
        #    vendTable.initFromPurchTable(_purchTable);
        #
        #    if (! _purchTable)
        #    {
        #        vendTable.OneTimeVendor = true;
        #    }
        #
        #    vendTable.insert();
        #
        #    ttscommit;
        #
        #    return vendTable.AccountNum;
        #}
      ENDSOURCE
      SOURCE #createOneTimeAccountFromCommon_CZ
        #public server static VendAccount createOneTimeAccountFromCommon_CZ(Common _common)
        #{
        #    NumberSeq numberSeq;
        #    VendTable vendTable;
        #
        #    if (! VendTable::createOneTimeAccountValidate())
        #    {
        #        return '';
        #    }
        #
        #    switch (_common.TableId)
        #    {
        #        case tablenum(CzVendAdvanceInvoiceTable) :
        #            ttsbegin;
        #
        #            numberSeq = NumberSeq::newGetNum(VendParameters::numRefOneTimeSupplierAccount());
        #            vendTable = VendTable::find(VendParameters::find().DefaultVend);
        #
        #            vendTable.AccountNum = numberSeq.num();
        #            vendTable.initFromVendAdvanceInvoiceTable_CZ(_common);
        #            vendTable.insert();
        #
        #            ttscommit;
        #
        #            break;
        #        default :
        #            throw error(strfmt("@SYS18917", tableid2name(_common.TableId)));
        #    }
        #
        #    return vendTable.AccountNum;
        #}
      ENDSOURCE
      SOURCE #createOneTimeAccountValidate
        #static boolean createOneTimeAccountValidate()
        #{
        #    boolean ok = true;
        #
        #    if (!VendTable::find(VendParameters::find().DefaultVend))
        #    {
        #        ok = checkFailed("@SYS57595");
        #    }
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #exist
        #static boolean exist(VendAccount _vendAccount)
        #{
        #    return _vendAccount && (select firstonly RecId from vendTable
        #                                index hint AccountIdx
        #                                where vendTable.AccountNum == _vendAccount).RecId != 0;
        #}
      ENDSOURCE
      SOURCE #find
        #static VendTable find(VendAccount   _vendAccount,
        #                      boolean       _forUpdate = false)
        #{
        #    VendTable vendTable;
        #    ;
        #
        #    if (_vendAccount)
        #    {
        #        vendTable.selectForUpdate(_forUpdate);
        #
        #        select firstonly vendTable
        #            index hint AccountIdx
        #            where vendTable.AccountNum == _vendAccount;
        #    }
        #    return vendTable;
        #}
      ENDSOURCE
      SOURCE #findByEDIAccountIln
        #// PEL 21.03.2008 PEL_EDIIntegration KC
        #static VendTable findByEDIAccountIln(EDIAccountIln     _EDIAccountIln, boolean  _forUpdate = false)
        #{
        #    VendTable       vendTable;
        #    ;
        #    if(_EDIAccountIln)
        #    {
        #        vendTable.selectLocked(_forUpdate);
        #        vendTable.selectForUpdate(_forUpdate);
        #
        #        select vendTable
        #            where vendTable.EDIAccountIln == _EDIAccountIln;
        #    }
        #
        #    return vendTable;
        #}
      ENDSOURCE
      SOURCE #findByVendId
        #// MIL 16.05.2012 CU_00236_1
        #static VendTable findByVendId(VendId _vendId, boolean _forUpdate = false)
        #{
        #    VendTable vendTable;
        #    ;
        #
        #    if (_vendId)
        #    {
        #        vendTable.selectForUpdate(_forUpdate);
        #
        #        select firstonly vendTable
        #            index hint AccountIdx
        #            where vendTable.VendId == _vendId;
        #    }
        #
        #    return vendTable;
        #}
      ENDSOURCE
      SOURCE #findRecId
        #static VendTable findRecId(recId    _recId,
        #                           boolean  _forUpdate = false)
        #{
        #    VendTable vendTable;
        #    ;
        #
        #    if (_recId)
        #    {
        #        vendTable.selectForUpdate(_forUpdate);
        #
        #        select firstonly vendTable
        #            where vendTable.RecId == _recId;
        #    }
        #    return vendTable;
        #}
      ENDSOURCE
      SOURCE #getFinanceCheckedField
        #// pel 22.03.2007 R700VM004T KC
        #static server container getFinanceCheckedField(VendParameters _vendParameters = VendParameters::find())
        #{
        #    #AOT
        #    int         idx;
        #    container   c;
        #
        #    container   checkingFields;
        #
        #    str         fieldName;
        #    fieldId     fieldId;
        #    TreeNode    node = TreeNode::findNode(#TablesPath + '\\' + identifierStr(VendTable) + '\\Field Groups\\CheckFinance');
        #
        #    c = _vendParameters.FinanceCheckedField;
        #
        #    for (idx = conlen(c); idx > 0; idx--)
        #    {
        #        fieldName = conpeek(c, idx);
        #        fieldId   = fieldname2id(tablenum(VendTable), fieldName);
        #
        #        if (fieldId && node.AOTfindChild(fieldName))
        #            checkingFields += [fieldId];
        #    }
        #
        #    return checkingFields;
        #}
      ENDSOURCE
      SOURCE #getMaxLicenseId
        #// MIL 16.05.2012 CU_00236_1
        #static LicenseId getMaxLicenseId()
        #{
        #    VendTable   vendTable;
        #    ;
        #
        #//+ MIL 22.08.2012 CU_00236_2
        #//    select maxof(LicenseId) from vendTable;
        #//
        #//    return vendTable.LicenseId;
        #    return 0;
        #//- MIL 22.08.2012 CU_00236_2
        #}
      ENDSOURCE
      SOURCE #getMaxVendId
        #// MIL 16.05.2012 CU_00236_1
        #static VendId getMaxVendId()
        #{
        #    VendTable   vendTable;
        #    ;
        #
        #    select maxof(VendId) from vendTable;
        #
        #    return vendTable.VendId;
        #}
      ENDSOURCE
      SOURCE #groupId
        #static VendGroupId groupId(VendAccount _vendAccount)
        #{
        #    return VendTable::find(_vendAccount).CustVendTable::groupId();
        #}
      ENDSOURCE
      SOURCE #isNumberSeqManual
        #server static boolean isNumberSeqManual()
        #{
        #    NumberSequenceCode  numberSequenceCode = VendTable::numberSequenceCode();
        #
        #    return (numberSequenceCode ? NumberSequenceTable::find(numberSequenceCode).Manual : true);
        #}
      ENDSOURCE
      SOURCE #lookupDefaultAccountNum
        #client static boolean lookupDefaultAccountNum(FormStringControl _ctrl,
        #                                              LedgerPostingType _posting = LedgerPostingType::None,
        #                                              CompanyId         _company = curext(),
        #                                              VendAccount       _vendAccount = '',
        #                                              LedgerJournalType _ledgerJournalType = LedgerJournalType::Daily)
        #
        #{
        #    LedgerAccountLookup accountLookup;
        #    Args                args;
        #    FormRun             formRun;
        #    CompanyId           companyId;
        #    TmpLedgerTable      tmpLedgerTable;
        #    LedgerTableLookup   ledgerTableLookup;
        #    ;
        #
        #    if (!_company)
        #    {
        #        companyId = curext();
        #    }
        #    else
        #    {
        #        companyId = _company;
        #        if (! xDataArea::exist(companyId))
        #            throw error(strfmt("@SYS10666",companyId));
        #    }
        #
        #    changecompany(companyId)
        #    {
        #        ledgerTableLookup = new LedgerTableLookup(_posting);
        #        tmpLedgerTable    = ledgerTableLookup.createList(companyId);
        #
        #        accountLookup     = new LedgerAccountLookup(_posting,
        #                                                    companyId,
        #                                                    tmpLedgerTable,
        #                                                    true,
        #                                                    _vendAccount);
        #
        #        args = new Args();
        #        if (!VendDefaultAccounts::existDefault(_vendAccount) || _ledgerJournalType == LedgerJournalType::PurchaseLedger) //enum name = InvoiceRegister
        #        {
        #            args.name(formstr(LedgerAccountLookup));
        #        }
        #        else
        #        {
        #            args.name(formstr(VendDefaultLedgerAccountLookup));
        #            args.parmEnum(true);
        #            args.parmEnumType(enumnum(NoYes));
        #        }
        #        args.parmObject(accountLookup);
        #        args.caller(_ctrl);
        #        formRun = classfactory.formRunClass(args);
        #        formRun.init();
        #        _ctrl.performFormLookup(formRun);
        #        return formRun.closedCancel();
        #    }
        #    return true;
        #}
      ENDSOURCE
      SOURCE #lookupNonLedgerDefaultAccountNum
        #client static boolean lookupNonLedgerDefaultAccountNum(FormStringControl    _ctrl,
        #                                                       LedgerJournalACType  _ledgerJournalACType,
        #                                                       CompanyId            _company        = curext(),
        #                                                       VendAccount          _vendAccount    = '')
        #{
        #    VendDefaultNonLedgerTableLookup vendDefaultNonLedgerTableLookup;
        #    Args                            args;
        #    FormRun                         formRun;
        #    CompanyId                       companyId;
        #    ;
        #
        #    if (!_company)
        #    {
        #        companyId = curext();
        #    }
        #    else
        #    {
        #        companyId = _company;
        #        if (! xDataArea::exist(companyId))
        #            throw error(strfmt("@SYS10666",companyId));
        #    }
        #
        #    changecompany(companyId)
        #    {
        #        vendDefaultNonLedgerTableLookup = VendDefaultNonLedgerTableLookup::construct(_vendAccount,
        #                                                                                     _ledgerJournalACType,
        #                                                                                     companyId);
        #        args = new Args();
        #        args.name(formstr(VendDefaultNonLedgerAccountLookup));
        #        args.parmObject(vendDefaultNonLedgerTableLookup);
        #        args.caller(_ctrl);
        #        formRun = classfactory.formRunClass(args);
        #        formRun.init();
        #        _ctrl.performFormLookup(formRun);
        #        return formRun.closedCancel();
        #    }
        #    return true;
        #}
      ENDSOURCE
      SOURCE #lookupOffsetAccount
        #client public static void lookupOffsetAccount(VendTable            _vendTable,
        #                                              LedgerJournalACType  _ledgerJournalACType,
        #                                              FormStringControl    _formStringControl,
        #                                              CompanyId            _companyId = curext())
        #{
        #    ;
        #    switch (_ledgerJournalACType)
        #    {
        #        case LedgerJournalACType::Bank :
        #            BankAccountTable::lookupBankAccount(_formStringControl, _companyId);
        #            break;
        #
        #        case LedgerJournalACType::Cust :
        #            CustTable::lookupCustomer(_formStringControl, _companyId);
        #            break;
        #
        #        case LedgerJournalACType::Ledger :
        #            LedgerTable::lookupAccountNum(_formStringControl);
        #            break;
        #
        #        case LedgerJournalACType::Project :
        #            ProjTable::lookupProjId(_formStringControl, _vendTable);
        #            break;
        #
        #        case LedgerJournalACType::Vend :
        #            VendTable::lookupVendor(_formStringControl, _companyId);
        #            break;
        #
        #        case LedgerJournalACType::FixedAssets :
        #            AssetTable::lookupAccountNum(_formStringControl, _companyId);
        #
        #        default :
        #
        #    }
        #}
      ENDSOURCE
      SOURCE #lookupVendAccountItem
        #client static void lookupVendAccountItem(FormStringControl  _ctrl,
        #                                         ItemId             _itemId,
        #                                         InventDim          _inventDim = null)
        #{
        #    Args    args;
        #    Object  formRun;
        #    ;
        #
        #    args = new Args();
        #    args.caller(_ctrl);
        #    args.name(formstr(VendAccountItemLookup));
        #    formRun = classfactory.formRunClass(args);
        #    formRun.setItemId(_itemId);
        #    formRun.setInventDim(_inventDim);
        #    formRun.init();
        #    _ctrl.performFormLookup(formRun);
        #}
        #
      ENDSOURCE
      SOURCE #lookupVendor
        #client static void lookupVendor(FormStringControl   _ctrl,
        #                                CompanyId           _company = curext())
        #{
        #    Args    args;
        #    FormRun formRun;
        #    CompanyId           companyId;
        #    ;
        #
        #    if (!_company)
        #    {
        #        companyId = curext();
        #    }
        #    else
        #    {
        #        companyId = _company;
        #        if (! xDataArea::exist(companyId))
        #            throw error(strfmt("@SYS10666",companyId));
        #    }
        #
        #    changecompany(companyId)
        #    {
        #        args = new Args();
        #        args.name(formstr(VendTableLookup));
        #        formRun = classfactory.formRunClass(args);
        #        formRun.init();
        #        _ctrl.performFormLookup(formRun);
        #    }
        #}
      ENDSOURCE
      SOURCE #numberSequenceCode
        #server static NumberSequenceCode numberSequenceCode()
        #{
        #    return VendParameters::numRefVendAccount().NumberSequence;
        #}
      ENDSOURCE
      SOURCE #promptAddress
        #static str promptAddress(VendAccount _vendAccount)
        #{
        #    VendTable   vendTable = VendTable::find(_vendAccount);
        #    ;
        #    return (vendTable.Name + '\n' + vendTable.Address);
        #}
      ENDSOURCE
      SOURCE #promptConvertCurrencyCode
        #client static boolean promptConvertCurrencyCode()
        #{;
        #    return (Box::yesNo("@SYS54747", DialogButton::Yes) == DialogButton::Yes);
        #}
      ENDSOURCE
      SOURCE #txtNotExist
        #static TxtNotExist txtNotExist()
        #{
        #    return "@SYS9779";
        #}
      ENDSOURCE
      SOURCE #webLookupVendTable
        #client static void webLookupVendTable()
        #{
        #    webTableLookup          webTableLookup;
        #    Query                   query;
        #    QueryBuildDataSource    queryBuildDataSource;
        #;
        #
        #    webTableLookup = webTableLookup::newParameters(tablenum(VendTable));
        #    webTableLookup.addLookupfield(fieldnum(VendTable, AccountNum),true);
        #    webTableLookup.addLookupfield(fieldnum(VendTable, Name));
        #
        #    query = new Query();
        #    queryBuildDataSource = query.addDataSource(tablenum(VendTable));
        #    webTableLookup.parmQuery(query);
        #
        #    webTableLookup.run();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics Table : ProducerTable unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #ProducerTable
    Id 40180
    PROPERTIES
      Name                #ProducerTable
      Label               #Производители
      FormRef             #ProducerTable
      Table               #ProducerTable
      TitleField1         #AccountNum
      TitleField2         #Name
      ConfigurationKey    #LedgerBasic
      SecurityKey         #ProducerTables
      CacheLookup         #NotInTTS
      CreateRecIdIndex    #Yes
      SaveDataPerCompany  #No
      TableGroup          #Main
      PrimaryIndex        #AccountIdx
      ClusterIndex        #AccountIdx
      AnalysisVisibility  #High
    ENDPROPERTIES
    
    FIELDS
      FIELD #Street
        Id 40001
        STRING
        PROPERTIES
          Name                #Street
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #AddressStreet
              #
            ENDARRAY
          StringSize          #250
        ENDPROPERTIES
        
      FIELD #ZipCode
        Id 40002
        STRING
        PROPERTIES
          Name                #ZipCode
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #AddressZipCodeId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #City
        Id 40003
        STRING
        PROPERTIES
          Name                #City
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #AddressCity
              #
            ENDARRAY
          StringSize          #140
        ENDPROPERTIES
        
      FIELD #CountryRegionId
        Id 40004
        STRING
        PROPERTIES
          Name                #CountryRegionId
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #AddressCountryRegionId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #County
        Id 40005
        STRING
        PROPERTIES
          Name                #County
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #AddressCountyId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #State
        Id 40006
        STRING
        PROPERTIES
          Name                #State
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #AddressStateId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Dimension
        Id 40007
        STRING
        PROPERTIES
          Name                #Dimension
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #Dimension
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #AccountNum
        Id 40008
        STRING
        PROPERTIES
          Name                #AccountNum
          Mandatory           #Yes
          AllowEdit           #No
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #ProducerAccount
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #INN_RU
        Id 40009
        STRING
        PROPERTIES
          Name                #INN_RU
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #INN_RU
              #
            ENDARRAY
          StringSize          #12
        ENDPROPERTIES
        
      FIELD #KPP_RU
        Id 40010
        STRING
        PROPERTIES
          Name                #KPP_RU
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #KPPU_RU
              #
            ENDARRAY
          StringSize          #9
        ENDPROPERTIES
        
      FIELD #TownId_RU
        Id 40011
        STRING
        PROPERTIES
          Name                #TownId_RU
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #AddressTownId_RU
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #SettlementId_RU
        Id 40012
        STRING
        PROPERTIES
          Name                #SettlementId_RU
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #AddressSettlementId_RU
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #StreetId_RU
        Id 40013
        STRING
        PROPERTIES
          Name                #StreetId_RU
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #AddressStreetId_RU
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Estate_RU
        Id 40014
        STRING
        PROPERTIES
          Name                #Estate_RU
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #AddressEstate_RU
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Building_RU
        Id 40015
        STRING
        PROPERTIES
          Name                #Building_RU
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #AddressBuilding_RU
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Flat_RU
        Id 40016
        STRING
        PROPERTIES
          Name                #Flat_RU
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #AddressFlat_RU
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Name
        Id 40017
        STRING
        PROPERTIES
          Name                #Name
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #ProducerName
              #
            ENDARRAY
          StringSize          #140
        ENDPROPERTIES
        
      FIELD #NameAlias
        Id 40018
        STRING
        PROPERTIES
          Name                #NameAlias
          Table               #ProducerTable
          AliasFor            #AccountNum
          ExtendedDataType    
            ARRAY 
              #ProducerTableAlias
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #Phone
        Id 40019
        STRING
        PROPERTIES
          Name                #Phone
          HelpText            #Телефон производителя.
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #Phone
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #PhoneLocal
        Id 40020
        STRING
        PROPERTIES
          Name                #PhoneLocal
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #PhoneLocal
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #CellularPhone
        Id 40021
        STRING
        PROPERTIES
          Name                #CellularPhone
          HelpText            #Номер мобильного телефона производителя.
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #PhoneMobile
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #Pager
        Id 40022
        STRING
        PROPERTIES
          Name                #Pager
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #Pager
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #TeleFax
        Id 40023
        STRING
        PROPERTIES
          Name                #TeleFax
          HelpText            #Факс производителя
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #TeleFax
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #Email
        Id 40024
        STRING
        PROPERTIES
          Name                #Email
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #Email
              #
            ENDARRAY
          StringSize          #80
        ENDPROPERTIES
        
      FIELD #SMS
        Id 40025
        STRING
        PROPERTIES
          Name                #SMS
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #SMS
              #
            ENDARRAY
          StringSize          #80
        ENDPROPERTIES
        
      FIELD #URL
        Id 40026
        STRING
        PROPERTIES
          Name                #URL
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #URL
              #
            ENDARRAY
          StringSize          #255
        ENDPROPERTIES
        
      FIELD #Telex
        Id 40027
        STRING
        PROPERTIES
          Name                #Telex
          HelpText            #Номер телекса производителя
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #Telex
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #ContactPersonId
        Id 40028
        STRING
        PROPERTIES
          Name                #ContactPersonId
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #ContactPersonId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #CompanyIdSiret
        Id 40030
        STRING
        PROPERTIES
          Name                #CompanyIdSiret
          Table               #ProducerTable
          AnalysisVisibility  #Low
          ExtendedDataType    
            ARRAY 
              #CompanyIdSiret
              #
            ENDARRAY
          StringSize          #14
        ENDPROPERTIES
        
      FIELD #CompanyIdNAF
        Id 40031
        STRING
        PROPERTIES
          Name                #CompanyIdNAF
          Table               #ProducerTable
          AnalysisVisibility  #Low
          ExtendedDataType    
            ARRAY 
              #CompanyIdNAF
              #
            ENDARRAY
          StringSize          #4
        ENDPROPERTIES
        
      FIELD #OKPO_RU
        Id 40032
        STRING
        PROPERTIES
          Name                #OKPO_RU
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #OKPO_RU
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #OKDP_RU
        Id 40033
        STRING
        PROPERTIES
          Name                #OKDP_RU
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #OKDP_RU
              #
            ENDARRAY
          StringSize          #7
        ENDPROPERTIES
        
      FIELD #OKATO_RU
        Id 40034
        STRING
        PROPERTIES
          Name                #OKATO_RU
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #OKATO_RU
              #
            ENDARRAY
          StringSize          #11
        ENDPROPERTIES
        
      FIELD #ProducerGroup
        Id 40035
        STRING
        PROPERTIES
          Name                #ProducerGroup
          Label               #@SYS3815
          HelpText            #Группа производителей, к которой присоединен данный производитель.
          AllowEdit           #No
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #ProducerGroupId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #Address
        Id 40036
        STRING
        PROPERTIES
          Name                #Address
          HelpText            #Адрес производителя.
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #Addressing
              #
            ENDARRAY
          StringSize          #250
        ENDPROPERTIES
        
      FIELD #RegNum_W
        Id 40037
        STRING
        PROPERTIES
          Name                #RegNum_W
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #CompanyRegNum
              #
            ENDARRAY
          StringSize          #15
        ENDPROPERTIES
        
      FIELD #JuridicalPersonId
        Id 40038
        STRING
        PROPERTIES
          Name                #JuridicalPersonId
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #JuridicalPersonId
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #ProducerId
        Id 40039
        INT
        PROPERTIES
          Name                #ProducerId
          Table               #ProducerTable
          ExtendedDataType    
            ARRAY 
              #ProducerId
              #
            ENDARRAY
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #AccountNum
          #Name
          #Address
          #Phone
          #ProducerGroup
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AutoLookup
        PROPERTIES
          Name                #AutoLookup
        ENDPROPERTIES
        
        GROUPFIELDS
          #INN_RU
          #AccountNum
          #NameAlias
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Address
        PROPERTIES
          Name                #Address
          Label               #@SYS9362
        ENDPROPERTIES
        
        GROUPFIELDS
          #Street
          #ZipCode
          #City
          #County
          #State
          #CountryRegionId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Address_RU
        PROPERTIES
          Name                #Address_RU
          Label               #@SYS9362
        ENDPROPERTIES
        
        GROUPFIELDS
          #ZipCode
          #CountryRegionId
          #State
          #County
          #TownId_RU
          #SettlementId_RU
          #StreetId_RU
          #Estate_RU
          #Building_RU
          #Flat_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AddressDisplay
        PROPERTIES
          Name                #AddressDisplay
          Label               #@SYS9362
        ENDPROPERTIES
        
        GROUPFIELDS
          #Address
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AddressLookup
        PROPERTIES
          Name                #AddressLookup
          Label               #@SYS88672
        ENDPROPERTIES
        
        GROUPFIELDS
          #AccountNum
          #Name
          #NameAlias
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Administration
        PROPERTIES
          Name                #Administration
          Label               #@SYS9853
        ENDPROPERTIES
        
        GROUPFIELDS
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ContactInfo
        PROPERTIES
          Name                #ContactInfo
          Label               #@SYS21663
        ENDPROPERTIES
        
        GROUPFIELDS
          #Phone
          #PhoneLocal
          #CellularPhone
          #Pager
          #TeleFax
          #Email
          #SMS
          #URL
          #Telex
          #ContactPersonId
          #editContactPersonName
          #CompanyIdSiret
          #CompanyIdNAF
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Description
        PROPERTIES
          Name                #Description
          Label               #@SYS7576
        ENDPROPERTIES
        
        GROUPFIELDS
          #Name
          #NameAlias
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Dimension
        PROPERTIES
          Name                #Dimension
          Label               #@SYS5951
        ENDPROPERTIES
        
        GROUPFIELDS
          #Dimension
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Identification
        PROPERTIES
          Name                #Identification
          Label               #@SYS5711
        ENDPROPERTIES
        
        GROUPFIELDS
          #AccountNum
          #INN_RU
          #KPP_RU
          #OKDP_RU
          #OKPO_RU
          #OKATO_RU
          #RegNum_W
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #JuridicalPerson
        PROPERTIES
          Name                #JuridicalPerson
          Label               #@RTL679
        ENDPROPERTIES
        
        GROUPFIELDS
          #JuridicalPersonId
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #AccountIdx
      Id 40001
      PROPERTIES
        Name                #AccountIdx
        AllowDuplicates     #No
      ENDPROPERTIES
      
      INDEXFIELDS
        #AccountNum
      ENDINDEXFIELDS
      
      #PhoneIdx
      Id 40002
      PROPERTIES
        Name                #PhoneIdx
      ENDPROPERTIES
      
      INDEXFIELDS
        #CellularPhone
        #Phone
      ENDINDEXFIELDS
      
      #NameAliasIDx
      Id 40003
      PROPERTIES
        Name                #NameAliasIDx
      ENDPROPERTIES
      
      INDEXFIELDS
        #NameAlias
      ENDINDEXFIELDS
      
    ENDINDICES
    REFERENCES
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
      Version: 3
      SOURCE #delete
        #public void  delete()
        #{
        #    ProducerTableType   producerTableType;
        #    ;
        #
        #    producerTableType = this.type();
        #    producerTableType.delete();
        #}
      ENDSOURCE
      SOURCE #editContactPersonName
        #//BP Deviation Documented
        #public edit ContactPersonName editContactPersonName(boolean _set, ContactPersonName _name)
        #{
        #    return this.CustVendTable::editContactPersonName(_set, _name);
        #}
      ENDSOURCE
      SOURCE #initValue
        #void  initValue()
        #{
        #    ExtendedTypeId  id  = TypeID2ExtendedTypeId(typeid(ProducerAccount));
        #    NumberSeq       num = NumberSeq::newGetNum(NumberSequenceReference::find(id));
        #    ;
        #
        #    super();
        #
        #    this.AccountNum     = num.num();
        #}
      ENDSOURCE
      SOURCE #type
        #ProducerTableType type()
        #{
        #    return ProducerTableType::construct(this);
        #}
      ENDSOURCE
      SOURCE #find
        #static ProducerTable find(ProducerAccount _producerAccount, boolean _forUpdate = false)
        #{
        #    ProducerTable   producerTable;
        #    ;
        #
        #    if (_producerAccount)
        #    {
        #        producerTable.selectForUpdate(_forUpdate);
        #
        #        select firstonly producerTable
        #            index hint AccountIdx
        #            where   producerTable.AccountNum == _producerAccount;
        #    }
        #
        #    return producerTable;
        #}
      ENDSOURCE
      SOURCE #findByProducerId
        #static ProducerTable findByProducerId(ProducerId _producerId, boolean _forUpdate = false)
        #{
        #    ProducerTable   producerTable;
        #    ;
        #
        #    if (_producerId)
        #    {
        #        producerTable.selectForUpdate(_forUpdate);
        #
        #        select firstonly producerTable
        #            index hint AccountIdx
        #            where   producerTable.ProducerId == _producerId;
        #    }
        #
        #    return producerTable;
        #}
      ENDSOURCE
      SOURCE #getMaxProducerId
        #// MIL 16.05.2012 CU_00236_1 KC
        #static ProducerId getMaxProducerId()
        #{
        #    ProducerTable   producerTable;
        #    ;
        #
        #    select maxof(ProducerId) from ProducerTable;
        #
        #    return producerTable.ProducerId;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics Table : LicenseTable unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #LicenseTable
    Id 40210
    PROPERTIES
      Name                #LicenseTable
      Label               #Лицензии поставщиков
      FormRef             #LicenseTable
      Table               #LicenseTable
      TitleField1         #VendAccount
      TitleField2         #LicenseCardNum_RU
      ConfigurationKey    #LedgerBasic
      SecurityKey         #LedgerTables
    ENDPROPERTIES
    
    FIELDS
      FIELD #LicenseCardSeries_RU
        Id 40001
        STRING
        PROPERTIES
          Name                #LicenseCardSeries_RU
          Table               #LicenseTable
          ExtendedDataType    
            ARRAY 
              #LicenseCardSeries_RU
              #
            ENDARRAY
          StringSize          #20
          Adjustment          #Right
        ENDPROPERTIES
        
      FIELD #LicenseCardNum_RU
        Id 40002
        STRING
        PROPERTIES
          Name                #LicenseCardNum_RU
          Table               #LicenseTable
          ExtendedDataType    
            ARRAY 
              #LicenseCardNum_RU
              #
            ENDARRAY
          StringSize          #20
          Adjustment          #Right
        ENDPROPERTIES
        
      FIELD #LicenseCardIssuedBy_RU
        Id 40003
        STRING
        PROPERTIES
          Name                #LicenseCardIssuedBy_RU
          Table               #LicenseTable
          ExtendedDataType    
            ARRAY 
              #LicenseCardIssuedBy_RU
              #
            ENDARRAY
          StringSize          #200
          Adjustment          #Right
        ENDPROPERTIES
        
      FIELD #LicenseCardStartDate_RU
        Id 40004
        DATE
        PROPERTIES
          Name                #LicenseCardStartDate_RU
          Mandatory           #Yes
          Table               #LicenseTable
          ExtendedDataType    
            ARRAY 
              #LicenseCardStartDate_RU
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #LicenseCardFinishDate_RU
        Id 40005
        DATE
        PROPERTIES
          Name                #LicenseCardFinishDate_RU
          Table               #LicenseTable
          ExtendedDataType    
            ARRAY 
              #LicenseCardFinishDate_RU
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #VendAccount
        Id 40006
        STRING
        PROPERTIES
          Name                #VendAccount
          Table               #LicenseTable
          ExtendedDataType    
            ARRAY 
              #VendAccount
              #
            ENDARRAY
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #LicenseId
        Id 40007
        INT
        PROPERTIES
          Name                #LicenseId
          Table               #LicenseTable
          ExtendedDataType    
            ARRAY 
              #LicenseId
              #
            ENDARRAY
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #VendAccount
          #LicenseCardSeries_RU
          #LicenseCardNum_RU
          #LicenseCardIssuedBy_RU
          #LicenseCardStartDate_RU
          #LicenseCardFinishDate_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #LicenseCard_RU
        PROPERTIES
          Name                #LicenseCard_RU
          Label               #Лицензия
        ENDPROPERTIES
        
        GROUPFIELDS
          #LicenseCardSeries_RU
          #LicenseCardNum_RU
          #LicenseCardIssuedBy_RU
          #LicenseCardStartDate_RU
          #LicenseCardFinishDate_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #VendAccount
        PROPERTIES
          Name                #VendAccount
          Label               #@SYS14048
        ENDPROPERTIES
        
        GROUPFIELDS
          #VendAccount
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #AccountIdx
      Id 40001
      PROPERTIES
        Name                #AccountIdx
      ENDPROPERTIES
      
      INDEXFIELDS
        #VendAccount
      ENDINDEXFIELDS
      
      #LicenseCard_RUIdx
      Id 40002
      PROPERTIES
        Name                #LicenseCard_RUIdx
      ENDPROPERTIES
      
      INDEXFIELDS
        #LicenseCardNum_RU
        #LicenseCardSeries_RU
      ENDINDEXFIELDS
      
    ENDINDICES
    REFERENCES
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
      Version: 3
      SOURCE #find
        #static LicenseTable find(VendAccount _vendAccount, date _date, boolean _selectForUpdate = false)
        #{
        #    LicenseTable    licenseTable;
        #    ;
        #
        #    if (_vendAccount)
        #    {
        #        licenseTable.selectForUpdate(_selectForUpdate);
        #
        #        select firstonly licenseTable
        #            index hint AccountIdx
        #            order by LicenseCardFinishDate_RU desc
        #            where   licenseTable.VendAccount                == _vendAccount
        #                &&  licenseTable.LicenseCardStartDate_RU    <= _date
        #                &&  (licenseTable.LicenseCardFinishDate_RU  >= _date || !licenseTable.LicenseCardFinishDate_RU);
        #    }
        #
        #    return licenseTable;
        #}
      ENDSOURCE
      SOURCE #getMaxLicenseId
        #// MIL 22.08.2012 CU_00236_2
        #static LicenseId getMaxLicenseId()
        #{
        #    LicenseTable    licenseTable;
        #    ;
        #
        #    select maxof(LicenseId) from licenseTable;
        #
        #    return licenseTable.LicenseId;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics Table : TmpAlcoOKPProducer unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #TmpAlcoOKPProducer
    Id 40198
    PROPERTIES
      Name                #TmpAlcoOKPProducer
      Label               #Временная таблица сочетаний кодов ОКП и производителей
      Table               #TmpAlcoOKPProducer
      Temporary           #Yes
      ConfigurationKey    #LedgerBasic
      SecurityKey         #ProducerTables
      ClusterIndex        #KeyIdx
    ENDPROPERTIES
    
    FIELDS
      FIELD #OKP_alcoId
        Id 40001
        STRING
        PROPERTIES
          Name                #OKP_alcoId
          Table               #TmpAlcoOKPProducer
          ExtendedDataType    
            ARRAY 
              #OKP_alcoId
              #
            ENDARRAY
          StringSize          #5
        ENDPROPERTIES
        
      FIELD #ProducerId
        Id 40002
        INT
        PROPERTIES
          Name                #ProducerId
          Table               #TmpAlcoOKPProducer
          ExtendedDataType    
            ARRAY 
              #ProducerId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #LicenseId
        Id 40003
        INT
        PROPERTIES
          Name                #LicenseId
          Table               #TmpAlcoOKPProducer
          ExtendedDataType    
            ARRAY 
              #LicenseId
              #
            ENDARRAY
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
    ENDGROUPS
    
    INDICES
      #KeyIdx
      Id 40001
      PROPERTIES
        Name                #KeyIdx
      ENDPROPERTIES
      
      INDEXFIELDS
        #LicenseId
        #ProducerId
      ENDINDEXFIELDS
      
    ENDINDICES
    REFERENCES
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics Table : TmpAlcoOKPProducerVend unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #TmpAlcoOKPProducerVend
    Id 40199
    PROPERTIES
      Name                #TmpAlcoOKPProducerVend
      Label               #Временная таблица сочетаний кодов ОКП, производителей и поставщиков
      Table               #TmpAlcoOKPProducerVend
      Temporary           #Yes
      ConfigurationKey    #LedgerBasic
      SecurityKey         #ProducerTables
      ClusterIndex        #KeyIdx
    ENDPROPERTIES
    
    FIELDS
      FIELD #ProducerId
        Id 40001
        INT
        PROPERTIES
          Name                #ProducerId
          Table               #TmpAlcoOKPProducerVend
          ExtendedDataType    
            ARRAY 
              #ProducerId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #OKP_alcoId
        Id 40002
        STRING
        PROPERTIES
          Name                #OKP_alcoId
          Table               #TmpAlcoOKPProducerVend
          ExtendedDataType    
            ARRAY 
              #OKP_alcoId
              #
            ENDARRAY
          StringSize          #5
        ENDPROPERTIES
        
      FIELD #VendId
        Id 40003
        INT
        PROPERTIES
          Name                #VendId
          Table               #TmpAlcoOKPProducerVend
          ExtendedDataType    
            ARRAY 
              #VendId
              #
            ENDARRAY
        ENDPROPERTIES
        
      FIELD #LicenseId
        Id 40004
        INT
        PROPERTIES
          Name                #LicenseId
          Table               #TmpAlcoOKPProducerVend
          ExtendedDataType    
            ARRAY 
              #LicenseId
              #
            ENDARRAY
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
    ENDGROUPS
    
    INDICES
      #KeyIdx
      Id 40001
      PROPERTIES
        Name                #KeyIdx
      ENDPROPERTIES
      
      INDEXFIELDS
        #LicenseId
        #ProducerId
        #VendId
      ENDINDEXFIELDS
      
    ENDINDICES
    REFERENCES
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
  ENDTABLE
  

***Element: CLS

; Microsoft Dynamics Class: ExportAlcoDecl2XML выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #ExportAlcoDecl2XML
    Id 40603
    PROPERTIES
      Name                #ExportAlcoDecl2XML
      Extends             #ExportAlcoDecl
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #appendAttributes
        #protected void appendAttributes(XMLElement _node, container _attributes)
        #{
        #    int             i;
        #    container       node;
        #    XMLAttribute    attribute;
        #    ;
        #
        #    for (i = 1; i <= conLen(_attributes); i++)
        #    {
        #        node        = conPeek(_attributes, i);
        #        attribute   = document.createAttribute(conPeek(node, 1));
        #
        #        _node.setAttributeNode(attribute);
        #        attribute.nodeValue(conPeek(node, 2));
        #    }
        #}
      ENDSOURCE
      SOURCE #appendChilds
        #protected void appendChilds(XMLElement _node, container _childs)
        #{
        #    int             i;
        #    container       child;
        #    XMLAttribute    attribute;
        #    anytype         value;
        #    ;
        #
        #    for (i = 1; i <= conLen(_childs); i++)
        #    {
        #        child       = conPeek(_childs, i);
        #        attribute   = _node.appendChild(document.createElement(conPeek(child, 1)));
        #        value       = conPeek(child, 2);
        #
        #        if (value)
        #            attribute.text(value);
        #    }
        #}
      ENDSOURCE
      SOURCE #buildQuery
        #protected Query buildQuery()
        #{
        #    Query                   ret = new Query();
        #    QueryBuildDataSource    qbds;
        #    ;
        #
        #    qbds    = ret.addDataSource(tablenum(InventLocation));
        #    qbds.addRange(fieldnum(InventLocation, JuridicalPersonId)).value(juridicalPersonId);
        #    qbds.addRange(fieldnum(InventLocation, InventLocationType)).value(enum2value(InventLocationType::Shop));
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #// MIL 25.05.2012 CU_00236_1 KC
        #class ExportAlcoDecl2XML extends ExportAlcoDecl
        #{
        #    XMLDocument             document;
        #    XMLElement              IDFile;
        #
        #    FileNameSave            fileName;
        #    DialogField             dlgFileName;
        #
        #    TmpAlcoOKPProducer      tmpAlcoOKPProducer;
        #    TmpAlcoOKPProducerVend  tmpAlcoOKPProducerVend;
        #
        #    #RequestDeclarantAlko
        #
        #    #define.CurrentVersion(1)
        #    #localmacro.CurrentList
        #        juridicalPersonId,
        #        fromDate,
        #        toDate
        #        , convert2Decaliter
        #        , itemId
        #        , filename
        #    #endmacro
        #}
      ENDSOURCE
      SOURCE #dialog
        #protected Object dialog(DialogRunbase _dialog, boolean forceOnClient)
        #{
        #    Dialog      ret;
        #    DialogGroup dialogColumns;
        #    ;
        #
        #    ret = super(_dialog, forceOnClient);
        #
        #    dialogColumns   = ret.addGroup("@SYS26804");
        #    dlgFileName     = ret.addFieldValue(typeid(FileNameSave), fileName);
        #    dlgFileName.value(this.getFileName());
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #existOKP_alcoId
        #protected boolean existOKP_alcoId(OKP_alcoId _alcoId, DimensionDepartment _dimDepartment = "")
        #{
        #}
      ENDSOURCE
      SOURCE #existVendor
        #protected boolean existVendor(OKP_alcoId            _col2,
        #                              DimensionDepartment   _dimDepartment  = "",
        #                              ProducerId            _producerId     = 0,
        #                              VendId                _vendId         = 0)
        #{
        #}
      ENDSOURCE
      SOURCE #fillDocument
        #protected void fillDocument()
        #{
        #    this.initTmpAlcoOKPProducer();
        #    this.initTmpAlcoOKPProducerVend();
        #
        #    // Файл
        #    this.initProlog();
        #
        #    // ФормаОтч
        #    this.printReportType();
        #
        #    // Справочники
        #    this.initReference();
        #    this.printReference();
        #
        #    // Документ
        #    this.printDocument();
        #}
      ENDSOURCE
      SOURCE #finalizeDocument
        #protected void finalizeDocument()
        #{
        #    document.save(this.templateName());
        #}
      ENDSOURCE
      SOURCE #fld1_1_Modified
        #void fld1_1_modified()
        #{
        #    FormStringControl   formControl = dialog.formRun().controlCallingMethod();
        #    ;
        #
        #    if (formControl.modified())
        #    {
        #        dlgFileName.value(this.getFileName());
        #    }
        #}
      ENDSOURCE
      SOURCE #getFileName
        #protected str getFileName()
        #{
        #}
      ENDSOURCE
      SOURCE #getFormNumValue
        #protected str getFormNumValue()
        #{
        #}
      ENDSOURCE
      SOURCE #getFromDialog
        #public boolean getFromDialog()
        #{
        #    ;
        #
        #    fileName  = dlgFileName.value();
        #
        #    return super();
        #}
      ENDSOURCE
      SOURCE #initInventLocation
        #protected InventLocation initInventLocation(DimensionDepartment _dimDepartment)
        #{
        #    InventLocation  inventLocation;
        #    ;
        #
        #    select firstonly inventLocation
        #        index hint DimDepartmentIdx
        #        where   inventLocation.DimDepartment        == _dimDepartment  &&
        #                inventLocation.InventLocationType   == InventLocationType::Shop;
        #
        #    return inventLocation;
        #}
        #
      ENDSOURCE
      SOURCE #initProducerReference
        #protected void initProducerReference()
        #{
        #}
      ENDSOURCE
      SOURCE #initProlog
        #protected void initProlog()
        #{
        #    container   attributes;
        #    ;
        #
        #    attributes  += this.setPair(#DocDate,           strFmt("%1", systemDateGet()));                                     // ДатаДок
        #    attributes  += this.setPair(#FormatVersion,     #FormatVersionValue);                                               // ВерсФорм
        #    attributes  += this.setPair(#ExportFromProgram, strFmt("%1 %2", xInfo::productName(), xInfo::releaseVersion()));    // НаимПрог
        #
        #    this.appendAttributes(IDFile, attributes);
        #}
      ENDSOURCE
      SOURCE #initReference
        #protected void initReference()
        #{
        #    // ПроизводителиИмпортеры
        #    this.initProducerReference();
        #
        #    // Поставщики
        #    this.initVendorReference();
        #}
      ENDSOURCE
      SOURCE #initTmpAlcoOKPProducer
        #protected void initTmpAlcoOKPProducer()
        #{
        #}
      ENDSOURCE
      SOURCE #initTmpAlcoOKPProducerVend
        #protected void initTmpAlcoOKPProducerVend()
        #{
        #}
      ENDSOURCE
      SOURCE #initVendorReference
        #protected void initVendorReference()
        #{
        #}
      ENDSOURCE
      SOURCE #makeDocument
        #protected final boolean makeDocument()
        #{
        #    ;
        #
        #    document    = XMLDocument::newBlank("windows-1251");
        #    IDFile      = document.appendChild(document.createElement(#IDFile));
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #pack
        #public container pack()
        #{
        #    return [#CurrentVersion, #CurrentList];
        #}
      ENDSOURCE
      SOURCE #printAddress
        #protected void printAddress(XMLElement _node, container _con)
        #{
        #    container       childs;
        #    ;
        #
        #    childs  += this.setPair(#IDCountryCode,     conPeek(_con, 1));  // КодСтраны
        #    childs  += this.setPair(#IDIndex,           conPeek(_con, 2));  // Индекс
        #    childs  += this.setPair(#IDRegionCode,      conPeek(_con, 3));  // КодРегион
        #    childs  += this.setPair(#IDDistrict,        conPeek(_con, 4));  // Район
        #    childs  += this.setPair(#IDCity,            conPeek(_con, 5));  // Город
        #    childs  += this.setPair(#IDTown,            conPeek(_con, 6));  // НаселПункт
        #    childs  += this.setPair(#IDStreet,          conPeek(_con, 7));  // Улица
        #    childs  += this.setPair(#IDHouse,           conPeek(_con, 8));  // Дом
        #    childs  += this.setPair(#IDPavilion,        conPeek(_con, 9));  // Корпус
        #    childs  += this.setPair(#IDHouseIndex,      conPeek(_con, 10)); // Литера
        #    childs  += this.setPair(#IDFlat,            conPeek(_con, 11)); // Кварт
        #
        #    this.appendChilds(_node, childs);
        #}
      ENDSOURCE
      SOURCE #printCompany
        #protected void printCompany(XMLElement _node)
        #{
        #    // Реквизиты
        #    this.printRequisites(_node);
        #
        #    // ОтветЛицо
        #    this.printResponsible(_node);
        #}
      ENDSOURCE
      SOURCE #printCompanyAddress
        #protected void printCompanyAddress(XMLElement _node, DimensionDepartment _dimDepartment = "")
        #{
        #    JuridicalPerson juridicalPerson     = JuridicalPerson::find(juridicalPersonId);
        #    XMLElement      IDCompanyAddress    = _node.appendChild(document.createElement(#IDCompanyAddress));
        #    Address         address;
        #    InventLocation  inventLocation;
        #    ;
        #
        #    if (_dimDepartment)
        #    {
        #        inventLocation  = this.initInventLocation(_dimDepartment);
        #        address         = Address::find(inventLocation.TableId, inventLocation.RecId, AddressType::Delivery);
        #
        #        // АдрОрг
        #        this.printAddress(IDCompanyAddress,
        #                          [AddressCountryRegion::find(address.CountryRegionId).OKSMCode_RU,                     // КодСтраны
        #                           address.ZipCode,                                                                     // Индекс
        #                           address.State,                                                                       // КодРегион
        #                           AddressCounty::find(address.CountryRegionId, address.State, address.County).Name,    // Район
        #                           address.City,                                                                        // Город
        #                           address.SettlementId_RU,                                                             // НаселПункт
        #                           AddressZipCode::find(address.ZipCode).StreetName,                                    // Улица
        #                           address.Estate_RU,                                                                   // Дом
        #                           address.Building_RU,                                                                 // Корпус
        #                           "",                                                                                  // Литера
        #                           address.Flat_RU                                                                      // Кварт
        #                           ]);
        #    }
        #    else
        #    {
        #        // АдрОрг
        #        this.printAddress(IDCompanyAddress,
        #                          [AddressCountryRegion::find(juridicalPerson.CountryRegionId).OKSMCode_RU,                                     // КодСтраны
        #                           juridicalPerson.ZipCode,                                                                                     // Индекс
        #                           juridicalPerson.State,                                                                                       // КодРегион
        #                           AddressCounty::find(juridicalPerson.CountryRegionId, juridicalPerson.State, juridicalPerson.County).Name,    // Район
        #                           juridicalPerson.City,                                                                                        // Город
        #                           juridicalPerson.SettlementId_RU,                                                                             // НаселПункт
        #                           AddressZipCode::find(juridicalPerson.ZipCode).StreetName,                                                    // Улица
        #                           juridicalPerson.Estate_RU,                                                                                   // Дом
        #                           juridicalPerson.Building_RU,                                                                                 // Корпус
        #                           "",                                                                                                          // Литера
        #                           juridicalPerson.Flat_RU                                                                                      // Кварт
        #                           ]);
        #    }
        #}
      ENDSOURCE
      SOURCE #printCompanyTurnover
        #protected void printCompanyTurnover(XMLElement _node, DimensionDepartment _dimDepartment = "")
        #{
        #    JuridicalPerson juridicalPerson     = JuridicalPerson::find(juridicalPersonId);
        #    Name            name                = strReplace(juridicalPerson.Name, '"', name);
        #    XMLElement      IDCompanyTurnover   = _node.appendChild(document.createElement(#IDCompanyTurnover));
        #    KPPU_RU         KPPU_RU             = _dimDepartment ? this.initInventLocation(_dimDepartment).KPP_RU : juridicalPerson.KPPU_RU;
        #    container       attributes;
        #    OKP_ALCO_RU     OKP_ALCO_RU;
        #    int             num;
        #    ;
        #
        #    // ОбъемОборота
        #    attributes  += this.setPair(#JuridicalPersonName,   name);      // НаимЮЛ
        #    attributes  += this.setPair(#JuridicalPersonKPP,    KPPU_RU);   // КППЮЛ
        #    attributes  += this.setPair(#TurnoverExists,        "true");    // НаличиеОборота
        #
        #    this.appendAttributes(IDCompanyTurnover, attributes);
        #
        #    // АдрОрг
        #    this.printCompanyAddress(IDCompanyTurnover, _dimDepartment);
        #
        #    while
        #        select OKP_ALCO_RU
        #            order by OKP_alcoId asc
        #    {
        #        if (this.existOKP_alcoId(OKP_ALCO_RU.OKP_alcoId, _dimDepartment))
        #        {
        #            num++;
        #            this.printTurnover(IDCompanyTurnover, num, OKP_ALCO_RU.OKP_alcoId, _dimDepartment);
        #
        #//            break;
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #printContacts
        #protected void printContacts(XMLElement _node, Name _name)
        #{
        #    container   con = Global::strSplit(_name, " ");
        #    container   childs;
        #    ;
        #
        #    childs  += this.setPair(#IDFamily,  conPeek(con, 1)); // Фамилия
        #    childs  += this.setPair(#IDName,    conPeek(con, 2)); // Имя
        #    childs  += this.setPair(#IDSurname, conPeek(con, 3)); // Отчество
        #
        #    this.appendChilds(_node, childs);
        #}
      ENDSOURCE
      SOURCE #printDocument
        #protected void printDocument()
        #{
        #    XMLElement      IDDocument  = IDFile.appendChild(document.createElement(#IDDocument));
        #    Query           q           = new Query(this.buildQuery());
        #    QueryRun        qr          = new QueryRun(q);
        #    InventLocation  inventLocation;
        #    ;
        #
        #    // Организация
        #    this.printCompany(IDDocument);
        #
        #    sop = new SysOperationProgress();
        #    sop.setCaption(this.parmSOPCaption());
        #    sop.setAnimation(#AviUpdate);
        #    sop.setTotal(SysQuery::countTotal(qr) + 1);
        #
        #    // Объёмы оборотов по организации
        #    sop.setText("Экспорт данных по организации");
        #    this.printCompanyTurnover(IDDocument);
        #    sop.incCount();
        #
        #    // Объёмы оборотов по месту нахождения обособленного подразделения
        #    while (qr.next())
        #    {
        #        inventLocation = qr.getNo(1);
        #
        #        sop.setText(strFmt("Экспорт данных по %1", inventLocation.InventLocationId));
        #        this.printCompanyTurnover(IDDocument, inventLocation.DimDepartment);
        #        sop.incCount();
        #    }
        #}
      ENDSOURCE
      SOURCE #printJuridicalPerson
        #protected void printJuridicalPerson(XMLElement _node, container _con)
        #{
        #    XMLElement  IDJuridicalPerson   = _node.appendChild(document.createElement(#IDJuridicalPerson));
        #    container   attributes;
        #    ;
        #
        #    // ЮЛ
        #    attributes  += this.setPair(#P000000000009, conPeek(_con, 2));   // П000000000009
        #    attributes  += this.setPair(#P000000000010, conPeek(_con, 3));   // П000000000010
        #
        #    this.appendAttributes(IDJuridicalPerson, attributes);
        #}
      ENDSOURCE
      SOURCE #printPrimCorrFormType
        #protected void printPrimCorrFormType(XMLElement    _node)
        #{
        #    XMLElement  IDPrimary   = _node.appendChild(document.createElement(#IDPrimary));
        #    ;
        #}
      ENDSOURCE
      SOURCE #printProducerInfo
        #protected void printProducerInfo(XMLElement             _node,
        #                                 int                    _num,
        #                                 OKP_alcoId             _alcoId,
        #                                 ProducerId             _producerId,
        #                                 DimensionDepartment    _dimDepartment  = "")
        #{
        #    container   attributes;
        #    int         cnt;
        #    ;
        #
        #    // СведПроизвИмпорт
        #    attributes  += this.setPair(#Num,       int2str(_num));         // ПN
        #    attributes  += this.setPair(#ProdImpId, int2str(_producerId));  // ИдПроизвИмп
        #
        #    this.appendAttributes(_node, attributes);
        #
        #    while
        #        select tmpAlcoOKPProducerVend
        #            where   tmpAlcoOKPProducerVend.OKP_alcoId   == _alcoId
        #                &&  tmpAlcoOKPProducerVend.ProducerId   == _producerId
        #    {
        #        if (this.existVendor(_alcoId, _dimDepartment, _producerId, tmpAlcoOKPProducerVend.VendId))
        #        {
        #            cnt++;
        #//+ MIL 17.08.2012 CU_00236_2
        #//            this.printVendor(_node, cnt, _alcoId, _producerId, tmpAlcoOKPProducerVend.VendId, _dimDepartment);
        #            this.printVendor(_node,
        #                             cnt,
        #                             _alcoId,
        #                             _producerId,
        #                             tmpAlcoOKPProducerVend.VendId,
        #                             tmpAlcoOKPProducerVend.LicenseId,
        #                             _dimDepartment);
        #//- MIL 17.08.2012 CU_00236_2
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #printProducerReference
        #protected void printProducerReference(XMLElement _node)
        #{
        #}
      ENDSOURCE
      SOURCE #printReference
        #protected void printReference()
        #{
        #    XMLElement  IDReference = IDFile.appendChild(document.createElement(#IDReference));
        #    ;
        #
        #    // ПроизводителиИмпортеры
        #    this.printProducerReference(IDReference);
        #
        #    // Поставщики
        #    this.printVendorReference(IDReference);
        #}
      ENDSOURCE
      SOURCE #printReportType
        #protected void printReportType()
        #{
        #    XMLElement  IDReportType    = IDFile.appendChild(document.createElement(#IDReportType));
        #    container   attributes;
        #    ;
        #
        #    attributes  += this.setPair(#FormNum,       this.getFormNumValue());                // НомФорм
        #    attributes  += this.setPair(#RepPer,        #RepPerValue);                          // ПризПериодОтч
        #    attributes  += this.setPair(#FormType,      #FormTypeValue);                        // ПризФОтч
        #    attributes  += this.setPair(#DocPerYear,    strFmt("%1", year(systemDateGet())));   // ГодПериодОтч
        #
        #    this.appendAttributes(IDReportType, attributes);
        #
        #    // Первичная или корректирующая форма отчетности
        #    this.printPrimCorrFormType(IDReportType);
        #}
      ENDSOURCE
      SOURCE #printRequisites
        #protected void printRequisites(XMLElement _node)
        #{
        #}
      ENDSOURCE
      SOURCE #printResponsible
        #private void printResponsible(XMLElement _node)
        #{
        #    XMLElement  IDResponsible       = _node.appendChild(document.createElement(#IDResponsible));
        #    XMLElement  IDDirector          = IDResponsible.appendChild(document.createElement(#IDDirector));
        #    XMLElement  IDChiefAccountant   = IDResponsible.appendChild(document.createElement(#IDChiefAccountant));
        #    ;
        #
        #    // Руководитель
        #    this.printContacts(IDDirector, OfficialsTable_RU::findDirector().Name);
        #
        #    // Главбух
        #    this.printContacts(IDChiefAccountant, OfficialsTable_RU::findAccountant().Name);
        #}
      ENDSOURCE
      SOURCE #printTrans
        #protected void printTrans(XMLElement _node, int _num, Common _data)
        #{
        #}
      ENDSOURCE
      SOURCE #printTurnover
        #protected void printTurnover(XMLElement           _node,
        #                           int                  _num,
        #                           OKP_alcoId           _col2,
        #                           DimensionDepartment  _dimDepartment = "")
        #{
        #    XMLElement  IDTurnover  = _node.appendChild(document.createElement(#IDTurnover));
        #    container   attributes;
        #    int         cnt;
        #    ;
        #
        #    // Оборот
        #    attributes  += this.setPair(#Num,           int2str(_num)); // ПN
        #    attributes  += this.setPair(#P000000000003, _col2);         // П000000000003
        #
        #    this.appendAttributes(IDTurnover, attributes);
        #
        #    while
        #        select tmpAlcoOKPProducer
        #            where   tmpAlcoOKPProducer.OKP_alcoId   == _col2
        #    {
        #        cnt++;
        #        this.printProducerInfo(IDTurnover, cnt, _col2, tmpAlcoOKPProducer.ProducerId, _dimDepartment);
        #
        #//        break;
        #    }
        #}
      ENDSOURCE
      SOURCE #printVendor
        #protected void printVendor(XMLElement           _node,
        #                           int                  _num,
        #                           OKP_alcoId           _alcoId,
        #                           ProducerId           _producerId,
        #                           VendId               _vendId,
        #                           LicenseId            _licenseId, // MIL 17.08.2012 CU_00236_2
        #                           DimensionDepartment  _dimDepartment  = "")
        #{
        #}
      ENDSOURCE
      SOURCE #printVendorReference
        #protected void printVendorReference(XMLElement  _node)
        #{
        #}
      ENDSOURCE
      SOURCE #setPair
        #protected container setPair(str _key, anytype _value)
        #{
        #    return  [[_key, _value]];
        #}
      ENDSOURCE
      SOURCE #unpack
        #public boolean unpack(container packedClass)
        #{
        #    Version     version = RunBase::getVersion(packedClass);
        #    ;
        #
        #    switch (version)
        #    {
        #        case #CurrentVersion:
        #            [version, #CurrentList] = packedClass;
        #            break;
        #        default:
        #            return false;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #validate
        #public boolean validate(Object calledFrom)
        #{
        #    boolean ret;
        #
        #    ret = super(calledFrom);
        #
        #    if (!fileName)
        #        ret = checkFailed("Укажите файл для сохранения декларации.");
        #
        #    return ret;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics Class: ExportAlcoDeclApp112XML выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #ExportAlcoDeclApp112XML
    Id 40604
    PROPERTIES
      Name                #ExportAlcoDeclApp112XML
      Extends             #ExportAlcoDecl2XML
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #caption
        #public ClassDescription caption()
        #{
        #    return #Caption;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #// MIL 16.05.2012 CU_00236_1 KC
        #class ExportAlcoDeclApp112XML extends ExportAlcoDecl2XML
        #{
        #    #DEFINE.Caption ("Экспорт приложения №11 в XML")
        #
        #    #DEFINE.FormNumValue    ("11-о")
        #
        #    // Лицензии
        #    #DEFINE.IDLicenses      ("Лицензии")
        #    #DEFINE.IDLicense       ("Лицензия")
        #    #DEFINE.LicenseId       ("ИдЛицензии")
        #    #DEFINE.P000000000011   ("П000000000011")
        #    #DEFINE.P000000000012   ("П000000000012")
        #    #DEFINE.P000000000013   ("П000000000013")
        #    #DEFINE.P000000000014   ("П000000000014")
        #
        #    TmpAlcoDeclApp11T1Data  dynamicData1;
        #    TmpAlcoDeclApp11T2Data  dynamicData2;
        #
        #    Map                     producerRef;
        #    Map                     vendRef;
        #    Map                     vendLicenseRef; // MIL 20.08.2012 CU_00236_2
        #}
      ENDSOURCE
      SOURCE #classDescription
        #final protected ClassDescription classDescription()
        #{
        #    return #Caption;
        #}
      ENDSOURCE
      SOURCE #existOKP_alcoId
        #protected boolean existOKP_alcoId(OKP_alcoId _alcoId, DimensionDepartment _dimDepartment = "")
        #{
        #    return TmpAlcoDeclApp11T1Data::existOKP_alcoId(dynamicData1, _alcoId, _dimDepartment);
        #}
      ENDSOURCE
      SOURCE #existVendor
        #protected boolean existVendor(OKP_alcoId            _col2,
        #                              DimensionDepartment   _dimDepartment  = "",
        #                              ProducerId            _producerId     = 0,
        #                              VendId                _vendId         = 0)
        #{
        #    return
        #        TmpAlcoDeclApp11T2Data::existVendor(dynamicData2,
        #                                            _col2,
        #                                            _dimDepartment,
        #                                            _producerId,
        #                                            tmpAlcoOKPProducerVend.VendId);
        #}
      ENDSOURCE
      SOURCE #getFileName
        #protected str getFileName()
        #{
        #    Date    curDate = SystemDateGet();
        #    ;
        #
        #    return
        #        strFmt(
        #            "%1\\R1_%2_03%3_%4_ExportApp112XML4BystronomLLC%4.xml",
        #            ProducerParameters::find().PathExportAlcoDeclApp112XML,
        #            JuridicalPerson::find(dlgJuridicalPersonId.value()).INN_RU,
        #            subStr(int2str(year(curDate)), 4, 1),
        #            date2str(curDate, 123, 2, 0, 2, 0, 4));
        #}
      ENDSOURCE
      SOURCE #getFormNumValue
        #protected str getFormNumValue()
        #{
        #    return #FormNumValue;
        #}
      ENDSOURCE
      SOURCE #initProducerReference
        #protected void initProducerReference()
        #{
        #    TmpAlcoDeclApp11T1Data  tmpAlcoDeclApp11T1Data;
        #    TmpAlcoDeclApp11T2Data  tmpAlcoDeclApp11T2Data;
        #    Name                    name;
        #    ;
        #
        #    producerRef = new Map(Types::Integer, Types::Container);
        #
        #    tmpAlcoDeclApp11T1Data.clear();
        #    tmpAlcoDeclApp11T1Data.setTmpData(dynamicData1);
        #
        #    while
        #        select ProducerId, Col3, Col4, Col5 from tmpAlcoDeclApp11T1Data
        #            index hint IdIdx
        #            order by ProducerId asc
        #    {
        #        if (!producerRef.exists(tmpAlcoDeclApp11T1Data.ProducerId))
        #        {
        #            name    = strReplace(tmpAlcoDeclApp11T1Data.Col3, '"', name);
        #
        #            producerRef.insert(tmpAlcoDeclApp11T1Data.ProducerId,
        #                               [name,
        #                                tmpAlcoDeclApp11T1Data.Col4,
        #                                tmpAlcoDeclApp11T1Data.Col5]);
        #        }
        #    }
        #
        #    tmpAlcoDeclApp11T2Data.clear();
        #    tmpAlcoDeclApp11T2Data.setTmpData(dynamicData2);
        #
        #    while
        #        select ProducerId, Col3, Col4, Col5 from tmpAlcoDeclApp11T2Data
        #            index hint IdIdx
        #            order by ProducerId asc
        #    {
        #        if (!producerRef.exists(tmpAlcoDeclApp11T2Data.ProducerId))
        #        {
        #            name    = strReplace(tmpAlcoDeclApp11T2Data.Col3, '"', name);
        #
        #            producerRef.insert(tmpAlcoDeclApp11T2Data.ProducerId,
        #                               [name,
        #                                tmpAlcoDeclApp11T2Data.Col4,
        #                                tmpAlcoDeclApp11T2Data.Col5]);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #initTmpAlcoOKPProducer
        #protected void initTmpAlcoOKPProducer()
        #{
        #    TmpAlcoDeclApp11T1Data  tmpAlcoDeclApp11T1Data;
        #    ;
        #
        #    tmpAlcoDeclApp11T1Data.setTmpData(dynamicData1);
        #
        #    while
        #        select tmpAlcoDeclApp11T1Data
        #            group by ProducerId asc, Col2
        #    {
        #        ttsbegin;
        #        tmpAlcoOKPProducer.OKP_alcoId   = tmpAlcoDeclApp11T1Data.Col2;
        #        tmpAlcoOKPProducer.ProducerId   = tmpAlcoDeclApp11T1Data.ProducerId;
        #        tmpAlcoOKPProducer.insert();
        #        ttscommit;
        #    }
        #}
      ENDSOURCE
      SOURCE #initTmpAlcoOKPProducerVend
        #protected void initTmpAlcoOKPProducerVend()
        #{
        #    TmpAlcoDeclApp11T2Data  tmpAlcoDeclApp11T2Data;
        #    ;
        #
        #    tmpAlcoDeclApp11T2Data.setTmpData(dynamicData2);
        #
        #    while
        #        select tmpAlcoDeclApp11T2Data
        #            group by VendId asc, Col2, ProducerId
        #                , LicenseId // MIL 16.08.2012 CU_00236_2
        #    {
        #        ttsbegin;
        #        tmpAlcoOKPProducerVend.OKP_alcoId   = tmpAlcoDeclApp11T2Data.Col2;
        #        tmpAlcoOKPProducerVend.ProducerId   = tmpAlcoDeclApp11T2Data.ProducerId;
        #        tmpAlcoOKPProducerVend.VendId       = tmpAlcoDeclApp11T2Data.VendId;
        #        tmpAlcoOKPProducerVend.LicenseId    = tmpAlcoDeclApp11T2Data.LicenseId; // MIL 17.08.2012 CU_00236_2
        #        tmpAlcoOKPProducerVend.insert();
        #        ttscommit;
        #    }
        #}
      ENDSOURCE
      SOURCE #initVendorReference
        #// MIL 20.08.2012 CU_00236_2
        #protected void initVendorReference()
        #{
        #    TmpAlcoDeclApp11T2Data  tmpAlcoDeclApp11T2Data;
        #    TmpAlcoDeclApp11T2Data  tmpAlcoDeclApp11T2Data1;
        #    Name                    name;
        #    Map                     map;
        #    ;
        #
        #    tmpAlcoDeclApp11T2Data.setTmpData(dynamicData2);
        #    tmpAlcoDeclApp11T2Data1.setTmpData(dynamicData2);
        #
        #    vendRef         = new Map(Types::Integer, Types::Container);
        #    vendLicenseRef  = new Map(Types::Integer, Types::Class);
        #
        #    while
        #        select tmpAlcoDeclApp11T2Data
        #            index hint IdIdx
        #            group by VendId asc
        #    {
        #        map     = new Map(Types::Integer, Types::Container);
        #        name    = strReplace(tmpAlcoDeclApp11T2Data.Col6, '"', name);
        #
        #        vendRef.insert(tmpAlcoDeclApp11T2Data.VendId,
        #                       [name,
        #                        tmpAlcoDeclApp11T2Data.Col7,
        #                        tmpAlcoDeclApp11T2Data.Col8]);
        #
        #        while
        #            select tmpAlcoDeclApp11T2Data1
        #                index hint IdIdx
        #                group by LicenseId asc, Col9, Col10, Col11, Col12
        #                where tmpAlcoDeclApp11T2Data1.VendId    == tmpAlcoDeclApp11T2Data.VendId
        #        {
        #            map.insert(tmpAlcoDeclApp11T2Data1.LicenseId,
        #                       [tmpAlcoDeclApp11T2Data1.LicenseId,
        #                        tmpAlcoDeclApp11T2Data1.Col9,
        #                        tmpAlcoDeclApp11T2Data1.Col10,
        #                        tmpAlcoDeclApp11T2Data1.Col11,
        #                        tmpAlcoDeclApp11T2Data1.Col12]);
        #        }
        #
        #        vendLicenseRef.insert(tmpAlcoDeclApp11T2Data.VendId, map);
        #    }
        #}
      ENDSOURCE
      SOURCE #initVendorReference_CU_00236_1
        #// MIL 20.08.2012 CU_00236_2
        #protected void initVendorReference_CU_00236_1()
        #{
        #    TmpAlcoDeclApp11T2Data  tmpAlcoDeclApp11T2Data;
        #    Name                    name;
        #    ;
        #
        #    tmpAlcoDeclApp11T2Data.setTmpData(dynamicData2);
        #
        #    vendRef = new Map(Types::Integer, Types::Container);
        #
        #    while
        #        select tmpAlcoDeclApp11T2Data
        #            index hint IdIdx
        #            order by VendId asc
        #    {
        #        if (!vendRef.exists(tmpAlcoDeclApp11T2Data.VendId))
        #        {
        #            name    = strReplace(tmpAlcoDeclApp11T2Data.Col6, '"', name);
        #
        #            vendRef.insert(tmpAlcoDeclApp11T2Data.VendId,
        #                           [name,
        #                            tmpAlcoDeclApp11T2Data.Col7,
        #                            tmpAlcoDeclApp11T2Data.Col8,
        #                            tmpAlcoDeclApp11T2Data.LicenseId,
        #                            tmpAlcoDeclApp11T2Data.Col9,
        #                            tmpAlcoDeclApp11T2Data.Col10,
        #                            tmpAlcoDeclApp11T2Data.Col11,
        #                            tmpAlcoDeclApp11T2Data.Col12]);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #prepareData
        #final protected void prepareData()
        #{
        #    ;
        #
        #    dynamicData1.setTmpData(TmpAlcoDeclApp11T1Data::prepareData(juridicalPersonId, fromDate, toDate, convert2Decaliter, itemId));
        #    dynamicData2.setTmpData(TmpAlcoDeclApp11T2Data::prepareData(juridicalPersonId, fromDate, toDate, convert2Decaliter, itemId));
        #}
      ENDSOURCE
      SOURCE #printCompany
        #protected void printCompany(XMLElement _node)
        #{
        #    XMLElement  IDCompany   = _node.appendChild(document.createElement(#IDCompany));
        #    ;
        #
        #    super(IDCompany);
        #
        #    // Лицензии
        #    this.printCompanyLicenses(IDCompany);
        #}
      ENDSOURCE
      SOURCE #printCompanyLicense
        #// MIL 20.08.2012 CU_00236_2
        #private void printCompanyLicense(XMLElement _node, container _con)
        #{
        #    XMLElement  IDLicense   = _node.appendChild(document.createElement(#IDLicense));
        #    container   attributes;
        #    ;
        #
        #    // Лицензия
        #    attributes  += this.setPair(#BusinessType, int2str(conPeek(_con, 1)));          // ВидДеят
        #    attributes  += this.setPair(#LicenseSeries, conPeek(_con, 2));                  // СерЛиц
        #    attributes  += this.setPair(#LicenseNum,  conPeek(_con, 3));                    // НомерЛиц
        #    attributes  += this.setPair(#LicenseFromDate, strFmt("%1", conPeek(_con, 4)));  // ДатаНачЛиц
        #    attributes  += this.setPair(#LicenseToDate, strFmt("%1", conPeek(_con, 5)));    // ДатаОконЛиц
        #
        #    this.appendAttributes(IDLicense, attributes);
        #}
      ENDSOURCE
      SOURCE #printCompanyLicenses
        #private void printCompanyLicenses(XMLElement    _node)
        #{
        #    XMLElement              IDLicenses  = _node.appendChild(document.createElement(#IDLicenses));
        #    LicenseJuridicalPerson  licenseJuridicalPerson; // MIL 21.08.2012 CU_00236_2
        #    ;
        #
        #//+ MIL 21.08.2012 CU_00236_2
        #    while
        #        select licenseJuridicalPerson
        #            where licenseJuridicalPerson.JuridicalPersonId   == juridicalPersonId
        #    {
        #        this.printCompanyLicense(IDLicenses,
        #                                 ["14",
        #                                  licenseJuridicalPerson.LicenseCardSeries_RU,
        #                                  licenseJuridicalPerson.LicenseCardNum_RU,
        #                                  licenseJuridicalPerson.FromDate,
        #                                  licenseJuridicalPerson.ToDate]);
        #    }
        #//- MIL 21.08.2012 CU_00236_2
        #}
      ENDSOURCE
      SOURCE #printProducerInfo
        #final protected void printProducerInfo(XMLElement           _node,
        #                                       int                  _num,
        #                                       OKP_alcoId           _alcoId,
        #                                       ProducerId           _producerId,
        #                                       DimensionDepartment  _dimDepartment  = "")
        #{
        #    XMLElement              IDProducerInfo  = _node.appendChild(document.createElement(#IDProducerInfo));
        #    Query                   q               = new Query(TmpAlcoDeclApp11T1Data::buildQueryLines(_alcoId, _dimDepartment, _producerId));
        #    QueryRun                qr              = new QueryRun(q);
        #    TmpAlcoDeclApp11T1Data  data;
        #    int                     cnt;
        #    ;
        #
        #    super(IDProducerInfo, _num, _alcoId, _producerId, _dimDepartment);
        #
        #    qr.setCursor(dynamicData1);
        #
        #    while (qr.next())
        #    {
        #        data    = qr.getNo(1);
        #
        #        cnt++;
        #        this.printTrans(IDProducerInfo, cnt, data);
        #    }
        #}
      ENDSOURCE
      SOURCE #printProducerReference
        #final protected void printProducerReference(XMLElement _node)
        #{
        #    MapIterator iter    = new MapIterator(producerRef);
        #    container   con;
        #    XMLElement  IDProducerImporter;
        #    container   attributes;
        #    ;
        #
        #    while (iter.more())
        #    {
        #        con = iter.value();
        #
        #        // ПроизводителиИмпортеры
        #        IDProducerImporter  = _node.appendChild(document.createElement(#IDProducerImporter));
        #        attributes          = this.setPair(#ProdImpRefId, int2str(iter.key()));     // ИДПроизвИмп
        #        attributes          += this.setPair(#P000000000004, conPeek(con, 1));       // П000000000004
        #        attributes          += this.setPair(#P000000000005, conPeek(con, 2));       // П000000000005
        #        attributes          += this.setPair(#P000000000006, conPeek(con, 3));       // П000000000006
        #
        #        this.appendAttributes(IDProducerImporter, attributes);
        #
        #        iter.next();
        #//        break;
        #    }
        #}
      ENDSOURCE
      SOURCE #printProduct
        #private void printProduct(XMLElement _node, int _num, TmpAlcoDeclApp11T2Data _data)
        #{
        #    XMLElement  IDProduct   = _node.appendChild(document.createElement(#IDProduct));
        #    container   attributes;
        #    ;
        #
        #    // Продукция
        #    attributes  += this.setPair(#P200000000013, strFmt("%1", _data.Col13));         // П200000000013
        #    attributes  += this.setPair(#P200000000014, _data.Col14);                       // П200000000014
        #    attributes  += this.setPair(#P200000000015, "");                                // П200000000015
        #    attributes  += this.setPair(#P200000000016, num2str(_data.Col16, 0, 5, 1, 0));  // П200000000016
        #
        #    this.appendAttributes(IDProduct, attributes);
        #}
      ENDSOURCE
      SOURCE #printRequisites
        #protected void printRequisites(XMLElement _node)
        #{
        #    JuridicalPerson juridicalPerson = JuridicalPerson::find(juridicalPersonId);
        #    Name            name            = strReplace(juridicalPerson.Name, '"', name);
        #    XMLElement      IDRequisites    = _node.appendChild(document.createElement(#IDRequisites));
        #    container       attributes;
        #    ;
        #
        #    // Реквизиты
        #    attributes  += this.setPair(#JuridicalPersonName,   name);                      // НаимЮЛ
        #    attributes  += this.setPair(#JuridicalPersonINN,    juridicalPerson.INN_RU);    // ИННЮЛ
        #    attributes  += this.setPair(#JuridicalPersonKPP,    juridicalPerson.KPPU_RU);   // КППЮЛ
        #    attributes  += this.setPair(#CompanyPhone,          juridicalPerson.Phone);     // ТелОрг
        #    attributes  += this.setPair(#CompanyEMail,          juridicalPerson.Email);     // EmailОтпр
        #
        #    this.appendAttributes(IDRequisites, attributes);
        #
        #    // АдрОрг
        #    this.printCompanyAddress(IDRequisites);
        #}
      ENDSOURCE
      SOURCE #printTrans
        #protected void printTrans(XMLElement _node, int _num, TmpAlcoDeclApp11T1Data _data)
        #{
        #    XMLElement  IDTrans  = _node.appendChild(document.createElement(#IDTrans));
        #    container   attributes;
        #    ;
        #
        #    // Движение
        #    attributes  += this.setPair(#Num,           int2str(_num));                     // ПN
        #    attributes  += this.setPair(#P100000000006, num2str(_data.Col6, 0, 5, 1, 0));   // П100000000006
        #    attributes  += this.setPair(#P100000000007, num2str(_data.Col7, 0, 5, 1, 0));   // П100000000007
        #    attributes  += this.setPair(#P100000000008, num2str(_data.Col8, 0, 5, 1, 0));   // П100000000008
        #    attributes  += this.setPair(#P100000000009, num2str(_data.Col9, 0, 5, 1, 0));   // П100000000009
        #    attributes  += this.setPair(#P100000000010, num2str(_data.Col10, 0, 5, 1, 0));  // П1000000000010
        #    attributes  += this.setPair(#P100000000011, num2str(_data.Col11, 0, 5, 1, 0));  // П1000000000011
        #    attributes  += this.setPair(#P100000000012, num2str(_data.Col12, 0, 5, 1, 0));  // П1000000000012
        #    attributes  += this.setPair(#P100000000013, num2str(_data.Col13, 0, 5, 1, 0));  // П1000000000013
        #    attributes  += this.setPair(#P100000000014, num2str(_data.Col14, 0, 5, 1, 0));  // П1000000000014
        #    attributes  += this.setPair(#P100000000015, num2str(_data.Col15, 0, 5, 1, 0));  // П1000000000015
        #    attributes  += this.setPair(#P100000000016, num2str(_data.Col16, 0, 5, 1, 0));  // П1000000000016
        #    attributes  += this.setPair(#P100000000017, num2str(_data.Col17, 0, 5, 1, 0));  // П1000000000017
        #    attributes  += this.setPair(#P100000000018, num2str(_data.Col18, 0, 5, 1, 0));  // П1000000000018
        #    attributes  += this.setPair(#P100000000019, num2str(_data.Col19, 0, 5, 1, 0));  // П1000000000019
        #    attributes  += this.setPair(#P100000000020, num2str(_data.Col20, 0, 5, 1, 0));  // П1000000000020
        #
        #    this.appendAttributes(IDTrans, attributes);
        #}
      ENDSOURCE
      SOURCE #printVendor
        #final protected void printVendor(XMLElement             _node,
        #                                 int                    _num,
        #                                 OKP_alcoId             _alcoId,
        #                                 ProducerId             _producerId,
        #                                 VendId                 _vendId,
        #                                 LicenseId              _licenseId, // MIL 17.08.2012 CU_00236_2
        #                                 DimensionDepartment    _dimDepartment  = "")
        #{
        #//+ MIL 17.08.2012 CU_00236_2
        #//    Query                   q           = new Query(TmpAlcoDeclApp11T2Data::buildQueryLines(_alcoId, _dimDepartment, _producerId, _vendId));
        #    Query                   q           = new Query(TmpAlcoDeclApp11T2Data::buildQueryLines(_alcoId,
        #                                                                                            _dimDepartment,
        #                                                                                            _producerId,
        #                                                                                            _vendId,
        #                                                                                            _licenseId));
        #//- MIL 17.08.2012 CU_00236_2
        #    QueryRun                qr          = new QueryRun(q);
        #    XMLElement              IDVendor    = _node.appendChild(document.createElement(#IDVendor));
        #    container               attributes;
        #    TmpAlcoDeclApp11T2Data  data;
        #    int                     cnt;
        #    ;
        #
        #    // Поставщик
        #    attributes  += this.setPair(#Num,       int2str(_num));                                         // ПN
        #    attributes  += this.setPair(#VendorId,  int2str(_vendId));                                      // ИдПоставщика
        #//+ MIL 16.08.2012 CU_00236_2
        #//    attributes  += this.setPair(#LicenseId, int2str(VendTable::findByVendId(_vendId).LicenseId));   // ИдЛицензии
        #    attributes  += this.setPair(#LicenseId, int2str(_licenseId));                                 // ИдЛицензии
        #//- MIL 16.08.2012 CU_00236_2
        #
        #    this.appendAttributes(IDVendor, attributes);
        #
        #    qr.setCursor(dynamicData2);
        #
        #    while (qr.next())
        #    {
        #        data    = qr.getNo(1);
        #
        #        cnt++;
        #        this.printProduct(IDVendor, cnt, data);
        #    }
        #}
      ENDSOURCE
      SOURCE #printVendorLicense
        #// MIL 20.08.2012 CU_00236_2
        #private void printVendorLicense(XMLElement _node, container _con)
        #{
        #    XMLElement  IDLicense   = _node.appendChild(document.createElement(#IDLicense));
        #    container   attributes;
        #    ;
        #
        #    // Лицензия
        #    attributes  += this.setPair(#LicenseId, int2str(conPeek(_con, 1)));             // ИдЛицензии
        #    attributes  += this.setPair(#P000000000011, conPeek(_con, 2));                  // П000000000011
        #    attributes  += this.setPair(#P000000000012, strFmt("%1", conPeek(_con, 3)));    // П000000000012
        #    attributes  += this.setPair(#P000000000013, strFmt("%1", conPeek(_con, 4)));    // П000000000013
        #    attributes  += this.setPair(#P000000000014, conPeek(_con, 5));                  // П000000000014
        #
        #    this.appendAttributes(IDLicense, attributes);
        #}
      ENDSOURCE
      SOURCE #printVendorLicenses
        #// MIL 21.08.2012 CU_00236_2
        #private void printVendorLicenses(XMLElement _node, Map _map)
        #{
        #    MapIterator iter        = new MapIterator(_map);
        #    XMLElement  IDLicenses  = _node.appendChild(document.createElement(#IDLicenses));
        #    ;
        #
        #    while (iter.more())
        #    {
        #        this.printVendorLicense(IDLicenses, iter.value());
        #
        #        iter.next();
        #    }
        #}
      ENDSOURCE
      SOURCE #printVendorLicenses_CU_00236_1
        #// MIL 20.08.2012 CU_00236_2
        #private void printVendorLicenses_CU_00236_1(XMLElement _node, container _con)
        #{
        #    XMLElement  IDLicenses  = _node.appendChild(document.createElement(#IDLicenses));
        #    XMLElement  IDLicense   = IDLicenses.appendChild(document.createElement(#IDLicense));
        #    container   attributes;
        #    ;
        #
        #    // Лицензия
        #    attributes  += this.setPair(#LicenseId, int2str(conPeek(_con, 4)));             // ИдЛицензии
        #    attributes  += this.setPair(#P000000000011, conPeek(_con, 5));                  // П000000000011
        #    attributes  += this.setPair(#P000000000012, strFmt("%1", conPeek(_con, 6)));    // П000000000012
        #    attributes  += this.setPair(#P000000000013, strFmt("%1", conPeek(_con, 7)));    // П000000000013
        #    attributes  += this.setPair(#P000000000014, conPeek(_con, 8));                  // П000000000014
        #
        #    this.appendAttributes(IDLicense, attributes);
        #}
      ENDSOURCE
      SOURCE #printVendorReference
        #final protected void printVendorReference(XMLElement  _node)
        #{
        #    MapIterator iter    = new MapIterator(vendRef);
        #    container   con;
        #    container   attributes;
        #    XMLElement  IDVendors;
        #    VendId      vendId;
        #    ;
        #
        #    while (iter.more())
        #    {
        #        vendId  = iter.key();
        #        con     = iter.value();
        #
        #        // Поставщики
        #        IDVendors  = _node.appendChild(document.createElement(#IDVendors));
        #        attributes  = this.setPair(#VendId,        int2str(vendId));    // ИдПостав
        #        attributes  += this.setPair(#P000000000007, conPeek(con, 1));   // П000000000007
        #
        #        this.appendAttributes(IDVendors, attributes);
        #
        #        // Лицензии
        #//+ MIL 20.08.2012 CU_00236_2
        #//        this.printVendorLicenses(IDVendonrs, con);
        #        if (vendLicenseRef.exists(vendId))
        #            this.printVendorLicenses(IDVendors, vendLicenseRef.lookup(vendId));
        #//- MIL 20.08.2012 CU_00236_2
        #
        #        // ЮЛ
        #        this.printJuridicalPerson(IDVendors, con);
        #
        #        iter.next();
        #    }
        #}
      ENDSOURCE
      SOURCE #templateName
        #final protected str templateName()
        #{
        #    return fileName;
        #}
      ENDSOURCE
      SOURCE #construct
        #private static ExportAlcoDeclApp112XML construct()
        #{
        #    return new ExportAlcoDeclApp112XML();
        #}
      ENDSOURCE
      SOURCE #main
        #public static void main(Args _args)
        #{
        #    ExportAlcoDeclApp112XML  launcher = ExportAlcoDeclApp112XML::construct();
        #    ;
        #
        #    if (launcher.prompt())
        #    {
        #        launcher.parmSOPCaption(#Caption);
        #        launcher.run();
        #    }
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics Class: ExportAlcoDeclApp122XML выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #ExportAlcoDeclApp122XML
    Id 40607
    PROPERTIES
      Name                #ExportAlcoDeclApp122XML
      Extends             #ExportAlcoDecl2XML
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #caption
        #public ClassDescription caption()
        #{
        #    return #Caption;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #// MIL 25.05.2012 CU_00236_1 KC
        #class ExportAlcoDeclApp122XML extends ExportAlcoDecl2XML
        #{
        #    #DEFINE.Caption("Экспорт приложения №12 в XML")
        #
        #    // НомФорм
        #    #DEFINE.FormNumValue                ("12-о")
        #
        #    #DEFINE.CompanyName                 ("НаимОрг")
        #
        #    // ЮЛ
        #    #DEFINE.IDProducerJuridicalPerson   ("ЮЛ")
        #
        #    // ЮЛ
        #    #DEFINE.IDCompanyJuridicalPerson    ("ЮЛ")
        #    #DEFINE.JuridicalPersonINN          ("ИННЮЛ")
        #    #DEFINE.JuridicalPersonKPP          ("КППЮЛ")
        #
        #    TmpAlcoDeclApp12T1Data  dynamicData1;
        #    TmpAlcoDeclApp12T2Data  dynamicData2;
        #
        #    Map                     producerRef;
        #    Map                     vendRef;
        #}
      ENDSOURCE
      SOURCE #classDescription
        #final protected ClassDescription classDescription()
        #{
        #    return #Caption;
        #}
      ENDSOURCE
      SOURCE #existOKP_alcoId
        #protected boolean existOKP_alcoId(OKP_alcoId _alcoId, DimensionDepartment _dimDepartment = "")
        #{
        #    return TmpAlcoDeclApp12T1Data::existOKP_alcoId(dynamicData1, _alcoId, _dimDepartment);
        #}
      ENDSOURCE
      SOURCE #existVendor
        #protected boolean existVendor(OKP_alcoId            _col2,
        #                              DimensionDepartment   _dimDepartment  = "",
        #                              ProducerId            _producerId     = 0,
        #                              VendId                _vendId         = 0)
        #{
        #    return
        #        TmpAlcoDeclApp12T2Data::existVendor(dynamicData2,
        #                                            _col2,
        #                                            _dimDepartment,
        #                                            _producerId,
        #                                            tmpAlcoOKPProducerVend.VendId);
        #}
      ENDSOURCE
      SOURCE #getFileName
        #protected str getFileName()
        #{
        #    Date    curDate = SystemDateGet();
        #    ;
        #
        #    return
        #        strFmt(
        #            "%1\\R2_%2_03%3_%4_ExportApp122XML4BystronomLLC%4.xml",
        #            ProducerParameters::find().PathExportAlcoDeclApp122XML,
        #            JuridicalPerson::find(dlgJuridicalPersonId.value()).INN_RU,
        #            subStr(int2str(year(curDate)), 4, 1),
        #            date2str(curDate, 123, 2, 0, 2, 0, 4));
        #}
      ENDSOURCE
      SOURCE #getFormNumValue
        #protected str getFormNumValue()
        #{
        #    return #FormNumValue;
        #}
      ENDSOURCE
      SOURCE #initProducerReference
        #protected void initProducerReference()
        #{
        #    TmpAlcoDeclApp12T1Data  tmpAlcoDeclApp12T1Data;
        #    TmpAlcoDeclApp12T2Data  tmpAlcoDeclApp12T2Data;
        #    Name                    name;
        #    ;
        #
        #    producerRef = new Map(Types::Integer, Types::Container);
        #
        #    tmpAlcoDeclApp12T1Data.clear();
        #    tmpAlcoDeclApp12T1Data.setTmpData(dynamicData1);
        #
        #    while
        #        select ProducerId, Col3, Col4, Col5 from tmpAlcoDeclApp12T1Data
        #            index hint IdIdx
        #            order by ProducerId asc
        #    {
        #        if (!producerRef.exists(tmpAlcoDeclApp12T1Data.ProducerId))
        #        {
        #            name    = strReplace(tmpAlcoDeclApp12T1Data.Col3, '"', name);
        #
        #            producerRef.insert(tmpAlcoDeclApp12T1Data.ProducerId,
        #                               [name,
        #                                tmpAlcoDeclApp12T1Data.Col4,
        #                                tmpAlcoDeclApp12T1Data.Col5]);
        #        }
        #    }
        #
        #    tmpAlcoDeclApp12T2Data.clear();
        #    tmpAlcoDeclApp12T2Data.setTmpData(dynamicData2);
        #
        #    while
        #        select ProducerId, Col3, Col4, Col5 from tmpAlcoDeclApp12T2Data
        #            index hint IdIdx
        #            order by ProducerId asc
        #    {
        #        if (!producerRef.exists(tmpAlcoDeclApp12T2Data.ProducerId))
        #        {
        #            name    = strReplace(tmpAlcoDeclApp12T2Data.Col3, '"', name);
        #
        #            producerRef.insert(tmpAlcoDeclApp12T2Data.ProducerId,
        #                               [name,
        #                                tmpAlcoDeclApp12T2Data.Col4,
        #                                tmpAlcoDeclApp12T2Data.Col5]);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #initTmpAlcoOKPProducer
        #protected void initTmpAlcoOKPProducer()
        #{
        #    TmpAlcoDeclApp12T1Data  tmpAlcoDeclApp12T1Data;
        #    ;
        #
        #    tmpAlcoDeclApp12T1Data.setTmpData(dynamicData1);
        #
        #    while
        #        select tmpAlcoDeclApp12T1Data
        #            group by ProducerId asc, Col2
        #                , LicenseId // MIL 17.08.2012 CU_00236_2
        #    {
        #        ttsbegin;
        #        tmpAlcoOKPProducer.OKP_alcoId   = tmpAlcoDeclApp12T1Data.Col2;
        #        tmpAlcoOKPProducer.ProducerId   = tmpAlcoDeclApp12T1Data.ProducerId;
        #        tmpAlcoOKPProducer.LicenseId    = tmpAlcoDeclApp12T1Data.LicenseId; // MIL 17.08.2012 CU_00236_2
        #        tmpAlcoOKPProducer.insert();
        #        ttscommit;
        #    }
        #}
      ENDSOURCE
      SOURCE #initTmpAlcoOKPProducerVend
        #protected void initTmpAlcoOKPProducerVend()
        #{
        #    TmpAlcoDeclApp12T2Data  tmpAlcoDeclApp12T2Data;
        #    ;
        #
        #    tmpAlcoDeclApp12T2Data.setTmpData(dynamicData2);
        #
        #    while
        #        select tmpAlcoDeclApp12T2Data
        #            group by VendId asc, Col2, ProducerId
        #    {
        #        ttsbegin;
        #        tmpAlcoOKPProducerVend.OKP_alcoId   = tmpAlcoDeclApp12T2Data.Col2;
        #        tmpAlcoOKPProducerVend.ProducerId   = tmpAlcoDeclApp12T2Data.ProducerId;
        #        tmpAlcoOKPProducerVend.VendId       = tmpAlcoDeclApp12T2Data.VendId;
        #        tmpAlcoOKPProducerVend.insert();
        #        ttscommit;
        #    }
        #}
      ENDSOURCE
      SOURCE #initVendorReference
        #protected void initVendorReference()
        #{
        #    TmpAlcoDeclApp12T2Data  tmpAlcoDeclApp12T2Data;
        #    Name                    name;
        #    ;
        #
        #    tmpAlcoDeclApp12T2Data.setTmpData(dynamicData2);
        #
        #    vendRef = new Map(Types::Integer, Types::Container);
        #
        #    while
        #        select tmpAlcoDeclApp12T2Data
        #            index hint IdIdx
        #            order by VendId asc
        #    {
        #        if (!vendRef.exists(tmpAlcoDeclApp12T2Data.VendId))
        #        {
        #            name    = strReplace(tmpAlcoDeclApp12T2Data.Col6, '"', name);
        #
        #            vendRef.insert(tmpAlcoDeclApp12T2Data.VendId,
        #                           [name,
        #                            tmpAlcoDeclApp12T2Data.Col7,
        #                            tmpAlcoDeclApp12T2Data.Col8,
        #                            tmpAlcoDeclApp12T2Data.LicenseId]);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #prepareData
        #final protected void prepareData()
        #{
        #    ;
        #
        #    dynamicData1.setTmpData(TmpAlcoDeclApp12T1Data::prepareData(juridicalPersonId, fromDate, toDate, convert2Decaliter, itemId));
        #    dynamicData2.setTmpData(TmpAlcoDeclApp12T2Data::prepareData(juridicalPersonId, fromDate, toDate, convert2Decaliter, itemId));
        #}
      ENDSOURCE
      SOURCE #printCompany
        #protected void printCompany(XMLElement _node)
        #{
        #    XMLElement  IDCompany   = _node.appendChild(document.createElement(#IDCompany));
        #    ;
        #
        #    super(IDCompany);
        #}
      ENDSOURCE
      SOURCE #printCompanyJuridicalPerson
        #private void printCompanyJuridicalPerson(XMLElement _node, INN_RU _INN_RU, KPPU_RU _KPPU_RU)
        #{
        #    XMLElement  IDJuridicalPerson   = _node.appendChild(document.createElement(#IDCompanyJuridicalPerson));
        #    container   attributes;
        #    ;
        #
        #    // ЮЛ
        #    attributes  += this.setPair(#JuridicalPersonINN, _INN_RU);  // ИННЮЛ
        #    attributes  += this.setPair(#JuridicalPersonKPP, _KPPU_RU); // КППЮЛ
        #
        #    this.appendAttributes(IDJuridicalPerson, attributes);
        #}
      ENDSOURCE
      SOURCE #printProducerInfo
        #final protected void printProducerInfo(XMLElement           _node,
        #                                       int                  _num,
        #                                       OKP_alcoId           _alcoId,
        #                                       ProducerId           _producerId,
        #                                       DimensionDepartment  _dimDepartment  = "")
        #{
        #    XMLElement              IDProducerInfo  = _node.appendChild(document.createElement(#IDProducerInfo));
        #    Query                   q               = new Query(TmpAlcoDeclApp12T1Data::buildQueryLines(_alcoId, _dimDepartment, _producerId));
        #    QueryRun                qr              = new QueryRun(q);
        #    TmpAlcoDeclApp12T1Data  data;
        #    int                     cnt;
        #    ;
        #
        #    super(IDProducerInfo, _num, _alcoId, _producerId, _dimDepartment);
        #
        #    qr.setCursor(dynamicData1);
        #
        #    while (qr.next())
        #    {
        #        data    = qr.getNo(1);
        #
        #        cnt++;
        #        this.printTrans(IDProducerInfo, cnt, data);
        #    }
        #}
      ENDSOURCE
      SOURCE #printProducerJuridicalPerson
        #private void printProducerJuridicalPerson(XMLElement _node, container _con)
        #{
        #    XMLElement  IDJuridicalPerson   = _node.appendChild(document.createElement(#IDCompanyJuridicalPerson));
        #    container   attributes;
        #    ;
        #
        #    // ЮЛ
        #    attributes  += this.setPair(#P000000000005, conPeek(_con, 2));   // П000000000005
        #    attributes  += this.setPair(#P000000000006, conPeek(_con, 3));   // П000000000006
        #
        #    this.appendAttributes(IDJuridicalPerson, attributes);
        #}
      ENDSOURCE
      SOURCE #printProducerReference
        #final protected void printProducerReference(XMLElement _node)
        #{
        #    MapIterator iter    = new MapIterator(producerRef);
        #    container   con;
        #    XMLElement  IDProducerImporter;
        #    container   attributes;
        #    ;
        #
        #    while (iter.more())
        #    {
        #        con = iter.value();
        #
        #        // ПроизводителиИмпортеры
        #        IDProducerImporter  = _node.appendChild(document.createElement(#IDProducerImporter));
        #        attributes          = this.setPair(#ProdImpRefId, int2str(iter.key()));     // ИДПроизвИмп
        #        attributes          += this.setPair(#P000000000004, conPeek(con, 1));       // П000000000004
        #
        #//        // TODO Требуются в версии 3.1.2
        #//        attributes          += this.setPair(#P000000000005, conPeek(con, 2));       // П000000000005
        #//        attributes          += this.setPair(#P000000000006, conPeek(con, 3));       // П000000000006
        #
        #        this.appendAttributes(IDProducerImporter, attributes);
        #
        #        // TODO Требуются в версии 3.1.5
        #        // ЮЛ
        #        this.printProducerJuridicalPerson(IDProducerImporter, con);
        #
        #        iter.next();
        #//        break;
        #    }
        #}
      ENDSOURCE
      SOURCE #printProduct
        #private void printProduct(XMLElement _node, int _num, TmpAlcoDeclApp12T2Data _data)
        #{
        #    XMLElement  IDProduct   = _node.appendChild(document.createElement(#IDProduct));
        #    container   attributes;
        #    ;
        #
        #    // Продукция
        #    attributes  += this.setPair(#P200000000013, strFmt("%1", _data.Col9));          // П200000000013
        #    attributes  += this.setPair(#P200000000014, _data.Col10);                       // П200000000014
        #    attributes  += this.setPair(#P200000000015, "");                                // П200000000015
        #    attributes  += this.setPair(#P200000000016, num2str(_data.Col12, 0, 5, 1, 0));  // П200000000016
        #
        #    this.appendAttributes(IDProduct, attributes);
        #}
      ENDSOURCE
      SOURCE #printRequisites
        #protected void printRequisites(XMLElement _node)
        #{
        #    JuridicalPerson juridicalPerson = JuridicalPerson::find(juridicalPersonId);
        #    Name            name            = strReplace(juridicalPerson.Name, '"', name);
        #    XMLElement      IDRequisites    = _node.appendChild(document.createElement(#IDRequisites));
        #    container       attributes;
        #    ;
        #
        #    // Реквизиты
        #    attributes  += this.setPair(#CompanyName,   name);                  // НаимОрг
        #    attributes  += this.setPair(#CompanyPhone,  juridicalPerson.Phone); // ТелОрг
        #    attributes  += this.setPair(#CompanyEMail,  juridicalPerson.Email); // EmailОтпр
        #
        #    this.appendAttributes(IDRequisites, attributes);
        #
        #    // АдрОрг
        #    this.printCompanyAddress(IDRequisites);
        #
        #    // ЮЛ
        #    this.printCompanyJuridicalPerson(IDRequisites, juridicalPerson.INN_RU, juridicalPerson.KPPU_RU);
        #}
      ENDSOURCE
      SOURCE #printTrans
        #protected void printTrans(XMLElement _node, int _num, TmpAlcoDeclApp12T1Data _data)
        #{
        #    XMLElement  IDTrans  = _node.appendChild(document.createElement(#IDTrans));
        #    container   attributes;
        #    ;
        #
        #    // Движение
        #    attributes  += this.setPair(#Num,           int2str(_num));                     // ПN
        #    attributes  += this.setPair(#P100000000006, num2str(_data.Col6, 0, 5, 1, 0));   // П100000000006
        #    attributes  += this.setPair(#P100000000007, num2str(_data.Col7, 0, 5, 1, 0));   // П100000000007
        #    attributes  += this.setPair(#P100000000008, num2str(_data.Col8, 0, 5, 1, 0));   // П100000000008
        #    attributes  += this.setPair(#P100000000009, num2str(_data.Col9, 0, 5, 1, 0));   // П100000000009
        #    attributes  += this.setPair(#P100000000010, num2str(_data.Col10, 0, 5, 1, 0));  // П1000000000010
        #    attributes  += this.setPair(#P100000000011, num2str(_data.Col11, 0, 5, 1, 0));  // П1000000000011
        #    attributes  += this.setPair(#P100000000012, num2str(_data.Col12, 0, 5, 1, 0));  // П1000000000012
        #    attributes  += this.setPair(#P100000000013, num2str(_data.Col13, 0, 5, 1, 0));  // П1000000000013
        #    attributes  += this.setPair(#P100000000014, num2str(_data.Col14, 0, 5, 1, 0));  // П1000000000014
        #    attributes  += this.setPair(#P100000000015, num2str(_data.Col15, 0, 5, 1, 0));  // П1000000000015
        #    attributes  += this.setPair(#P100000000016, num2str(_data.Col16, 0, 5, 1, 0));  // П1000000000016
        #    attributes  += this.setPair(#P100000000017, num2str(_data.Col17, 0, 5, 1, 0));  // П1000000000017
        #    attributes  += this.setPair(#P100000000018, num2str(_data.Col18, 0, 5, 1, 0));  // П1000000000018
        #
        #    this.appendAttributes(IDTrans, attributes);
        #}
      ENDSOURCE
      SOURCE #printVendor
        #final protected void printVendor(XMLElement             _node,
        #                                 int                    _num,
        #                                 OKP_alcoId             _alcoId,
        #                                 ProducerId             _producerId,
        #                                 VendId                 _vendId,
        #                                 LicenseId              _licenseId, // MIL 17.08.2012 CU_00236_2
        #                                 DimensionDepartment    _dimDepartment  = "")
        #{
        #    Query                   q           = new Query(TmpAlcoDeclApp12T2Data::buildQueryLines(_alcoId, _dimDepartment, _producerId, _vendId));
        #    QueryRun                qr          = new QueryRun(q);
        #    XMLElement              IDVendor    = _node.appendChild(document.createElement(#IDVendor));
        #    container               attributes;
        #    TmpAlcoDeclApp12T2Data  data;
        #    int                     cnt;
        #    ;
        #
        #    // Поставщик
        #    attributes  += this.setPair(#Num,       int2str(_num));     // ПN
        #    attributes  += this.setPair(#VendorId,  int2str(_vendId));  // ИдПоставщика
        #
        #    this.appendAttributes(IDVendor, attributes);
        #
        #    qr.setCursor(dynamicData2);
        #
        #    while (qr.next())
        #    {
        #        data    = qr.getNo(1);
        #
        #        cnt++;
        #        this.printProduct(IDVendor, cnt, data);
        #    }
        #}
      ENDSOURCE
      SOURCE #printVendorReference
        #final protected void printVendorReference(XMLElement  _node)
        #{
        #    MapIterator iter    = new MapIterator(vendRef);
        #    container   con;
        #    container   attributes;
        #    XMLElement  IDVendonrs;
        #    ;
        #
        #    while (iter.more())
        #    {
        #        con = iter.value();
        #
        #        // Поставщики
        #        IDVendonrs  = _node.appendChild(document.createElement(#IDVendors));
        #        attributes  = this.setPair(#VendId,        int2str(iter.key()));    // ИдПостав
        #        attributes  += this.setPair(#P000000000007, conPeek(con, 1));       // П000000000007
        #
        #        this.appendAttributes(IDVendonrs, attributes);
        #
        #        // ЮЛ
        #        this.printJuridicalPerson(IDVendonrs, con);
        #
        #        iter.next();
        #//        break;
        #    }
        #}
      ENDSOURCE
      SOURCE #templateName
        #final protected str templateName()
        #{
        #    return fileName;
        #}
      ENDSOURCE
      SOURCE #construct
        #private static ExportAlcoDeclApp122XML construct()
        #{
        #    return new ExportAlcoDeclApp122XML();
        #}
      ENDSOURCE
      SOURCE #main
        #public static void main(Args _args)
        #{
        #    ExportAlcoDeclApp122XML  launcher = ExportAlcoDeclApp122XML::construct();
        #    ;
        #
        #    if (launcher.prompt())
        #    {
        #        launcher.parmSOPCaption(#Caption);
        #        launcher.run();
        #    }
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: PRN

; Microsoft Dynamics Project : CU_00236_2 unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #CU_00236_2
   SHARED
  PROPERTIES
    Name                #CU_00236_2
  ENDPROPERTIES
  
    BEGINNODE
      FILETYPE 0
      UTILTYPE 44
      UTILOBJECTID 40190
      NODETYPE 204
      NAME #TmpAlcoDeclApp11T1Data
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 44
      UTILOBJECTID 40192
      NODETYPE 204
      NAME #TmpAlcoDeclApp11T2Data
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 44
      UTILOBJECTID 40194
      NODETYPE 204
      NAME #TmpAlcoDeclApp12T1Data
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 44
      UTILOBJECTID 40196
      NODETYPE 204
      NAME #TmpAlcoDeclApp12T2Data
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 44
      UTILOBJECTID 505
      NODETYPE 204
      NAME #VendTable
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 44
      UTILOBJECTID 40180
      NODETYPE 204
      NAME #ProducerTable
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 44
      UTILOBJECTID 40210
      NODETYPE 204
      NAME #LicenseTable
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 44
      UTILOBJECTID 40198
      NODETYPE 204
      NAME #TmpAlcoOKPProducer
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 44
      UTILOBJECTID 40199
      NODETYPE 204
      NAME #TmpAlcoOKPProducerVend
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 40603
      NODETYPE 329
      NAME #ExportAlcoDecl2XML
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 40604
      NODETYPE 329
      NAME #ExportAlcoDeclApp112XML
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 40607
      NODETYPE 329
      NAME #ExportAlcoDeclApp122XML
    ENDNODE
  ENDPROJECT
  

***Element: END
